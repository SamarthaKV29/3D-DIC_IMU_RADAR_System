###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.2.11706/W32 for ARM       22/Dec/2017  10:34:31
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\Invn\EmbUtils\InvProtocol.c
#    Command line =  
#        C:\Users\prasa\Documents\1.0.0\sources\Invn\EmbUtils\InvProtocol.c -D
#        IAR_COMPILER -D __inline=inline -D INV_MSG_ENABLE -D ASSERT -D NUCLEO
#        -D USE_STDPERIPH_DRIVER -D USE_HSE_BYPASS -D HSE_VALUE=8000000 -D
#        STM32F411xE -lC
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list
#        --diag_suppress Pa050 -o
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 --silent --warnings_are_errors -e
#        --char_is_signed --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../board-hal\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Core\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Device\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/STM32F4xx_StdPeriph_Driver/inc\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/Images\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/DynamicProtocol\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list\InvProtocol.lst
#    Object file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj\InvProtocol.o
#
###############################################################################

C:\Users\prasa\Documents\1.0.0\sources\Invn\EmbUtils\InvProtocol.c
      1          /*
      2              Copyright (c) 2014-2015 InvenSense Inc. Portions Copyright (c) 2014-2015 Movea. All rights reserved.
      3          
      4              This software, related documentation and any modifications thereto (collectively "Software") is subject
      5              to InvenSense and its licensors' intellectual property rights under U.S. and international copyright and
      6              other intellectual property rights laws.
      7          
      8              InvenSense and its licensors retain all intellectual property and proprietary rights in and to the Software
      9              and any use, reproduction, disclosure or distribution of the Software without an express license
     10              agreement from InvenSense is strictly prohibited.
     11          */
     12          
     13          #include "InvProtocol.h"
     14          
     15          enum InvProtocolState {
     16          	INVPROTOCOL_STATE_HEADER,
     17          	INVPROTOCOL_STATE_TYPE,
     18          	INVPROTOCOL_STATE_CODE,
     19          	INVPROTOCOL_STATE_SIZE0, INVPROTOCOL_STATE_SIZE1,
     20          	INVPROTOCOL_STATE_ARG,
     21          	INVPROTOCOL_STATE_CRC0, INVPROTOCOL_STATE_CRC1
     22          };
     23          

   \                                 In section .text, align 4, keep-with-next
     24          static const uint8_t sInvFrameHeader[] = {(uint8_t)0x55, (uint8_t)0xaa, (uint8_t)0x55, (uint8_t)0xaa};
   \                     sInvFrameHeader:
   \   00000000   0x55 0xAA          DC8 85, 170, 85, 170
   \              0x55 0xAA    
     25          
     26          #define INVPROTOCOL_HEADER_SIZE		(sizeof(sInvFrameHeader))
     27          #define INVPROTOCOL_TYPE_SIZE		(sizeof(uint8_t))
     28          #define INVPROTOCOL_CODE_SIZE		(sizeof(uint8_t))
     29          #define INVPROTOCOL_DATA_SIZE		(sizeof(uint16_t))
     30          #define INVPROTOCOL_CRC_SIZE		(sizeof(uint16_t))
     31          

   \                                 In section .text, align 2, keep-with-next
     32          static __inline uint16_t cksum_reset(void)
     33          {
     34          	return 1;
   \                     cksum_reset: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
     35          }
     36          

   \                                 In section .text, align 2, keep-with-next
     37          static __inline uint16_t cksum_update(uint16_t chk, uint8_t byte)
     38          {
     39          	return (chk << 1) + chk + byte;
   \                     cksum_update: (+1)
   \   00000000   0xEB00 0x0040      ADD      R0,R0,R0, LSL #+1
   \   00000004   0x1840             ADDS     R0,R0,R1
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0x4770             BX       LR               ;; return
     40          }
     41          

   \                                 In section .text, align 2, keep-with-next
     42          void InvProtocolDecoder_init(InvProtocolDecoder *self)
     43          {
     44          	self->state = INVPROTOCOL_STATE_HEADER;
   \                     InvProtocolDecoder_init: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x7001             STRB     R1,[R0, #+0]
     45          	self->rcrc = 0;
   \   00000004   0x8041             STRH     R1,[R0, #+2]
     46          	self->ccrc = 0;
   \   00000006   0x8081             STRH     R1,[R0, #+4]
     47          	self->count = 0;
   \   00000008   0x80C1             STRH     R1,[R0, #+6]
     48          }
   \   0000000A   0x4770             BX       LR               ;; return
     49          

   \                                 In section .text, align 4, keep-with-next
     50          int InvProtocolDecoder_processByte(InvProtocolDecoder *self,
     51                                             uint8_t 	byte,
     52                                             uint8_t 	*type,
     53                                             uint8_t 	*code,
     54                                             size_t *size,
     55                                             void 		*data,
     56                                             size_t maxSize
     57                                            )
     58          {
   \                     InvProtocolDecoder_processByte: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
     59          	int rc = INVPROTOCOL_NOK;
   \   00000004   0xF04F 0x36FF      MOV      R6,#-1
   \   00000008   0x9D06             LDR      R5,[SP, #+24]
   \   0000000A   0x9808             LDR      R0,[SP, #+32]
     60          
     61          	switch (self->state) {
   \   0000000C   0x7827             LDRB     R7,[R4, #+0]
   \   0000000E   0x2F07             CMP      R7,#+7
   \   00000010   0xD867             BHI.N    ??InvProtocolDecoder_processByte_1
   \   00000012   0xE8DF 0xF007      TBB      [PC, R7]
   \                     ??InvProtocolDecoder_processByte_0:
   \   00000016   0x04 0x15          DC8      0x4,0x15,0x1B,0x21
   \              0x1B 0x21    
   \   0000001A   0x27 0x38          DC8      0x27,0x38,0x4F,0x55
   \              0x4F 0x55    
     62          	case INVPROTOCOL_STATE_HEADER: {
     63          			if (byte != sInvFrameHeader[self->count++]) {
   \                     ??InvProtocolDecoder_processByte_2: (+1)
   \   0000001E   0x88E0             LDRH     R0,[R4, #+6]
   \   00000020   0x1C42             ADDS     R2,R0,#+1
   \   00000022   0x80E2             STRH     R2,[R4, #+6]
   \   00000024   0x.... 0x....      ADR.W    R3,sInvFrameHeader
   \   00000028   0x5C18             LDRB     R0,[R3, R0]
   \   0000002A   0x4281             CMP      R1,R0
   \   0000002C   0xD002             BEQ.N    ??InvProtocolDecoder_processByte_3
     64          				rc = INVPROTOCOL_INVALID_HEADER;
   \   0000002E   0xF06F 0x0602      MVN      R6,#+2
     65          				break;
   \   00000032   0xE056             B.N      ??InvProtocolDecoder_processByte_1
     66          			}
     67          
     68          			if (self->count == INVPROTOCOL_HEADER_SIZE) {
   \                     ??InvProtocolDecoder_processByte_3: (+1)
   \   00000034   0xB292             UXTH     R2,R2
   \   00000036   0x2A04             CMP      R2,#+4
   \   00000038   0xD139             BNE.N    ??InvProtocolDecoder_processByte_4
     69          				self->state = INVPROTOCOL_STATE_TYPE;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x7020             STRB     R0,[R4, #+0]
   \   0000003E   0xE036             B.N      ??InvProtocolDecoder_processByte_4
     70          			}
     71          
     72          			return INVPROTOCOL_INCOMPLETE;
     73          		}
     74          	case INVPROTOCOL_STATE_TYPE: {
     75          			*type = byte;
   \                     ??InvProtocolDecoder_processByte_5: (+1)
   \   00000040   0x7011             STRB     R1,[R2, #+0]
     76          			self->state = INVPROTOCOL_STATE_CODE;
   \   00000042   0x2002             MOVS     R0,#+2
   \   00000044   0x7020             STRB     R0,[R4, #+0]
     77          
     78          			return INVPROTOCOL_INCOMPLETE;
   \   00000046   0xF06F 0x0001      MVN      R0,#+1
   \   0000004A   0xBDF2             POP      {R1,R4-R7,PC}
     79          		}
     80          	case INVPROTOCOL_STATE_CODE: {
     81          			*code = byte;
   \                     ??InvProtocolDecoder_processByte_6: (+1)
   \   0000004C   0x7019             STRB     R1,[R3, #+0]
     82          			self->state = INVPROTOCOL_STATE_SIZE0;
   \   0000004E   0x2003             MOVS     R0,#+3
   \   00000050   0x7020             STRB     R0,[R4, #+0]
     83          
     84          			return INVPROTOCOL_INCOMPLETE;
   \   00000052   0xF06F 0x0001      MVN      R0,#+1
   \   00000056   0xBDF2             POP      {R1,R4-R7,PC}
     85          		}
     86          	case INVPROTOCOL_STATE_SIZE0: {
     87          			*size = byte;
   \                     ??InvProtocolDecoder_processByte_7: (+1)
   \   00000058   0x6029             STR      R1,[R5, #+0]
     88          			self->state = INVPROTOCOL_STATE_SIZE1;
   \   0000005A   0x2004             MOVS     R0,#+4
   \   0000005C   0x7020             STRB     R0,[R4, #+0]
     89          
     90          			return INVPROTOCOL_INCOMPLETE;
   \   0000005E   0xF06F 0x0001      MVN      R0,#+1
   \   00000062   0xBDF2             POP      {R1,R4-R7,PC}
     91          		}
     92          	case INVPROTOCOL_STATE_SIZE1: {
     93          			*size |= (uint16_t)byte << 8;
   \                     ??InvProtocolDecoder_processByte_8: (+1)
   \   00000064   0x6828             LDR      R0,[R5, #+0]
   \   00000066   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   0000006A   0x6028             STR      R0,[R5, #+0]
     94          			self->state = (*size != 0) ? INVPROTOCOL_STATE_ARG : INVPROTOCOL_STATE_CRC0;
   \   0000006C   0xD001             BEQ.N    ??InvProtocolDecoder_processByte_9
   \   0000006E   0x2005             MOVS     R0,#+5
   \   00000070   0xE000             B.N      ??InvProtocolDecoder_processByte_10
   \                     ??InvProtocolDecoder_processByte_9: (+1)
   \   00000072   0x2006             MOVS     R0,#+6
   \                     ??InvProtocolDecoder_processByte_10: (+1)
   \   00000074   0x7020             STRB     R0,[R4, #+0]
     95          			self->ccrc = cksum_reset();
   \   00000076   0x.... 0x....      BL       cksum_reset
   \   0000007A   0x80A0             STRH     R0,[R4, #+4]
     96          			self->count = 0;
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x80E0             STRH     R0,[R4, #+6]
     97          
     98          			return INVPROTOCOL_INCOMPLETE;
   \   00000080   0xF06F 0x0001      MVN      R0,#+1
   \   00000084   0xBDF2             POP      {R1,R4-R7,PC}
     99          		}
    100          	case INVPROTOCOL_STATE_ARG: {
    101          			if (self->count < maxSize && data != 0) {
   \                     ??InvProtocolDecoder_processByte_11: (+1)
   \   00000086   0x88E2             LDRH     R2,[R4, #+6]
   \   00000088   0x4282             CMP      R2,R0
   \   0000008A   0xD203             BCS.N    ??InvProtocolDecoder_processByte_12
   \   0000008C   0x9807             LDR      R0,[SP, #+28]
   \   0000008E   0x2800             CMP      R0,#+0
   \   00000090   0xD000             BEQ.N    ??InvProtocolDecoder_processByte_12
    102          				uint8_t *ptr = data;
    103          				ptr[self->count] = (uint8_t)byte;
   \   00000092   0x5481             STRB     R1,[R0, R2]
    104          			}
    105          
    106          			self->count++;
   \                     ??InvProtocolDecoder_processByte_12: (+1)
   \   00000094   0x88E0             LDRH     R0,[R4, #+6]
   \   00000096   0x1C40             ADDS     R0,R0,#+1
   \   00000098   0x80E0             STRH     R0,[R4, #+6]
    107          			self->ccrc = cksum_update(self->ccrc, (uint8_t)byte);
   \   0000009A   0x88A0             LDRH     R0,[R4, #+4]
   \   0000009C   0x.... 0x....      BL       cksum_update
   \   000000A0   0x80A0             STRH     R0,[R4, #+4]
    108          
    109          			if (self->count == *size) {
   \   000000A2   0x88E0             LDRH     R0,[R4, #+6]
   \   000000A4   0x6829             LDR      R1,[R5, #+0]
   \   000000A6   0x4288             CMP      R0,R1
   \   000000A8   0xD101             BNE.N    ??InvProtocolDecoder_processByte_4
    110          				self->state = INVPROTOCOL_STATE_CRC0;
   \   000000AA   0x2006             MOVS     R0,#+6
   \   000000AC   0x7020             STRB     R0,[R4, #+0]
    111          			}
    112          
    113          			return INVPROTOCOL_INCOMPLETE;
   \                     ??InvProtocolDecoder_processByte_4: (+1)
   \   000000AE   0xF06F 0x0001      MVN      R0,#+1
   \   000000B2   0xBDF2             POP      {R1,R4-R7,PC}
    114          		}
    115          	case INVPROTOCOL_STATE_CRC0: {
    116          			self->rcrc = (uint8_t)byte;
   \                     ??InvProtocolDecoder_processByte_13: (+1)
   \   000000B4   0x8061             STRH     R1,[R4, #+2]
    117          			self->state = INVPROTOCOL_STATE_CRC1;
   \   000000B6   0x2007             MOVS     R0,#+7
   \   000000B8   0x7020             STRB     R0,[R4, #+0]
    118          
    119          			return INVPROTOCOL_INCOMPLETE;
   \   000000BA   0xF06F 0x0001      MVN      R0,#+1
   \   000000BE   0xBDF2             POP      {R1,R4-R7,PC}
    120          		}
   \                     ??InvProtocolDecoder_processByte_14: (+1)
   \   000000C0   0x8862             LDRH     R2,[R4, #+2]
   \   000000C2   0xEA42 0x2101      ORR      R1,R2,R1, LSL #+8
   \   000000C6   0x8061             STRH     R1,[R4, #+2]
    121          	case INVPROTOCOL_STATE_CRC1: {
    122          			self->rcrc |= (uint16_t)byte << 8;
    123          
    124          			if (self->rcrc != self->ccrc) {
   \   000000C8   0x88A2             LDRH     R2,[R4, #+4]
   \   000000CA   0x4291             CMP      R1,R2
   \   000000CC   0xD002             BEQ.N    ??InvProtocolDecoder_processByte_15
    125          				rc = INVPROTOCOL_INVALID_CRC;
   \   000000CE   0xF06F 0x0603      MVN      R6,#+3
    126          				break;
   \   000000D2   0xE006             B.N      ??InvProtocolDecoder_processByte_1
    127          			}
    128          
    129          			if (self->count > maxSize) {
   \                     ??InvProtocolDecoder_processByte_15: (+1)
   \   000000D4   0x88E1             LDRH     R1,[R4, #+6]
   \   000000D6   0x4288             CMP      R0,R1
   \   000000D8   0xD202             BCS.N    ??InvProtocolDecoder_processByte_16
    130          				rc = INVPROTOCOL_INVALID_SIZE;
   \   000000DA   0xF06F 0x0604      MVN      R6,#+4
    131          				break;
   \   000000DE   0xE000             B.N      ??InvProtocolDecoder_processByte_1
    132          			}
    133          
    134          			rc = INVPROTOCOL_OK;
   \                     ??InvProtocolDecoder_processByte_16: (+1)
   \   000000E0   0x2600             MOVS     R6,#+0
    135          			break;
    136          		}
    137          
    138          	default:
    139          		break;
    140          	}
    141          
    142          	InvProtocolDecoder_init(self);
   \                     ??InvProtocolDecoder_processByte_1: (+1)
   \   000000E2   0x4620             MOV      R0,R4
   \   000000E4   0x.... 0x....      BL       InvProtocolDecoder_init
    143          
    144          	return rc;
   \   000000E8   0x4630             MOV      R0,R6
   \   000000EA   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    145          }
    146          

   \                                 In section .text, align 2, keep-with-next
    147          int InvProtocolDecoder_decodeBuffer(
    148                  const uint8_t 	*input,
    149                  size_t 		sinput,
    150                  uint8_t 	*type,
    151                  uint8_t 	*code,
    152                  size_t 	*scontent,
    153                  void 		*content,
    154                  size_t 		max,
    155                  size_t 	*idx
    156          )
    157          {
   \                     InvProtocolDecoder_decodeBuffer: (+1)
   \   00000000   0xE92D 0x4FF3      PUSH     {R0,R1,R4-R11,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x4614             MOV      R4,R2
   \   00000008   0x461D             MOV      R5,R3
    158          	InvProtocolDecoder state;
    159          	int rc = INVPROTOCOL_INCOMPLETE;
   \   0000000A   0xF06F 0x0601      MVN      R6,#+1
   \   0000000E   0x46B3             MOV      R11,R6
    160          
    161          	InvProtocolDecoder_init(&state);
   \   00000010   0xA803             ADD      R0,SP,#+12
   \   00000012   0x.... 0x....      BL       InvProtocolDecoder_init
   \   00000016   0x9F13             LDR      R7,[SP, #+76]
    162          
    163          	for (*idx = 0; *idx < sinput && rc == INVPROTOCOL_INCOMPLETE; ++(*idx)) {
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x6038             STR      R0,[R7, #+0]
   \   0000001C   0xF8DD 0x8040      LDR      R8,[SP, #+64]
   \   00000020   0xF8DD 0x9044      LDR      R9,[SP, #+68]
   \   00000024   0xF8DD 0xA048      LDR      R10,[SP, #+72]
   \   00000028   0xE010             B.N      ??InvProtocolDecoder_decodeBuffer_0
    164          		rc = InvProtocolDecoder_processByte(&state, input[*idx], type, code, scontent,
    165          		                                    content, max);
   \                     ??InvProtocolDecoder_decodeBuffer_1: (+1)
   \   0000002A   0xF8CD 0xA008      STR      R10,[SP, #+8]
   \   0000002E   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \   00000032   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   00000036   0x462B             MOV      R3,R5
   \   00000038   0x4622             MOV      R2,R4
   \   0000003A   0x9905             LDR      R1,[SP, #+20]
   \   0000003C   0x5C09             LDRB     R1,[R1, R0]
   \   0000003E   0xA803             ADD      R0,SP,#+12
   \   00000040   0x.... 0x....      BL       InvProtocolDecoder_processByte
   \   00000044   0x4683             MOV      R11,R0
    166          	}
   \   00000046   0x6838             LDR      R0,[R7, #+0]
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0x6038             STR      R0,[R7, #+0]
   \                     ??InvProtocolDecoder_decodeBuffer_0: (+1)
   \   0000004C   0x6838             LDR      R0,[R7, #+0]
   \   0000004E   0x9906             LDR      R1,[SP, #+24]
   \   00000050   0x4288             CMP      R0,R1
   \   00000052   0xD201             BCS.N    ??InvProtocolDecoder_decodeBuffer_2
   \   00000054   0x45B3             CMP      R11,R6
   \   00000056   0xD0E8             BEQ.N    ??InvProtocolDecoder_decodeBuffer_1
    167          
    168          	return rc;
   \                     ??InvProtocolDecoder_decodeBuffer_2: (+1)
   \   00000058   0x4658             MOV      R0,R11
   \   0000005A   0xB007             ADD      SP,SP,#+28
   \   0000005C   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    169          }
    170          

   \                                 In section .text, align 2, keep-with-next
    171          void InvProtocolFormater_init(InvProtocolFormater *self)
    172          {
    173          	self->state = INVPROTOCOL_STATE_HEADER;
   \                     InvProtocolFormater_init: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x7001             STRB     R1,[R0, #+0]
    174          	self->ccrc 	= 0;
   \   00000004   0x8041             STRH     R1,[R0, #+2]
    175          	self->count = 0;
   \   00000006   0x8081             STRH     R1,[R0, #+4]
    176          }
   \   00000008   0x4770             BX       LR               ;; return
    177          

   \                                 In section .text, align 4, keep-with-next
    178          int InvProtocolFormater_processByte(InvProtocolFormater *self,
    179                                              uint8_t 		type,
    180                                              uint8_t 		code,
    181                                              const void 	*data,
    182                                              size_t 			size,
    183                                              uint8_t 		*outbyte
    184                                             )
    185          {
   \                     InvProtocolFormater_processByte: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x9D04             LDR      R5,[SP, #+16]
   \   00000006   0x9805             LDR      R0,[SP, #+20]
    186          	switch (self->state) {
   \   00000008   0x7826             LDRB     R6,[R4, #+0]
   \   0000000A   0x2E07             CMP      R6,#+7
   \   0000000C   0xD854             BHI.N    ??InvProtocolFormater_processByte_1
   \   0000000E   0xE8DF 0xF006      TBB      [PC, R6]
   \                     ??InvProtocolFormater_processByte_0:
   \   00000012   0x04 0x11          DC8      0x4,0x11,0x17,0x1D
   \              0x17 0x1D    
   \   00000016   0x23 0x35          DC8      0x23,0x35,0x47,0x4E
   \              0x47 0x4E    
    187          	case INVPROTOCOL_STATE_HEADER: {
    188          			*outbyte = sInvFrameHeader[self->count++];
   \                     ??InvProtocolFormater_processByte_2: (+1)
   \   0000001A   0x88A1             LDRH     R1,[R4, #+4]
   \   0000001C   0x1C4A             ADDS     R2,R1,#+1
   \   0000001E   0x80A2             STRH     R2,[R4, #+4]
   \   00000020   0x.... 0x....      ADR.W    R2,sInvFrameHeader
   \   00000024   0x5C51             LDRB     R1,[R2, R1]
   \   00000026   0x7001             STRB     R1,[R0, #+0]
    189          
    190          			if (self->count == INVPROTOCOL_HEADER_SIZE) {
   \   00000028   0x88A0             LDRH     R0,[R4, #+4]
   \   0000002A   0x2804             CMP      R0,#+4
   \   0000002C   0xD135             BNE.N    ??InvProtocolFormater_processByte_3
    191          				self->state = INVPROTOCOL_STATE_TYPE;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x7020             STRB     R0,[R4, #+0]
   \   00000032   0xE032             B.N      ??InvProtocolFormater_processByte_3
    192          			}
    193          
    194          			return INVPROTOCOL_INCOMPLETE;
    195          		}
    196          	case INVPROTOCOL_STATE_TYPE: {
    197          			*outbyte = type;
   \                     ??InvProtocolFormater_processByte_4: (+1)
   \   00000034   0x7001             STRB     R1,[R0, #+0]
    198          			self->state = INVPROTOCOL_STATE_CODE;
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x7020             STRB     R0,[R4, #+0]
    199          			return INVPROTOCOL_INCOMPLETE;
   \   0000003A   0xF06F 0x0001      MVN      R0,#+1
   \   0000003E   0xBD70             POP      {R4-R6,PC}
    200          		}
    201          	case INVPROTOCOL_STATE_CODE: {
    202          			*outbyte = code;
   \                     ??InvProtocolFormater_processByte_5: (+1)
   \   00000040   0x7002             STRB     R2,[R0, #+0]
    203          			self->state = INVPROTOCOL_STATE_SIZE0;
   \   00000042   0x2003             MOVS     R0,#+3
   \   00000044   0x7020             STRB     R0,[R4, #+0]
    204          			return INVPROTOCOL_INCOMPLETE;
   \   00000046   0xF06F 0x0001      MVN      R0,#+1
   \   0000004A   0xBD70             POP      {R4-R6,PC}
    205          		}
    206          	case INVPROTOCOL_STATE_SIZE0: {
    207          			*outbyte = ((uint16_t)size & (uint16_t)0x00FF);
   \                     ??InvProtocolFormater_processByte_6: (+1)
   \   0000004C   0x7005             STRB     R5,[R0, #+0]
    208          			self->state = INVPROTOCOL_STATE_SIZE1;
   \   0000004E   0x2004             MOVS     R0,#+4
   \   00000050   0x7020             STRB     R0,[R4, #+0]
    209          			return INVPROTOCOL_INCOMPLETE;
   \   00000052   0xF06F 0x0001      MVN      R0,#+1
   \   00000056   0xBD70             POP      {R4-R6,PC}
    210          		}
    211          	case INVPROTOCOL_STATE_SIZE1: {
    212          			*outbyte = ((uint16_t)size & (uint16_t)0xFF00) >> 8;
   \                     ??InvProtocolFormater_processByte_7: (+1)
   \   00000058   0x4629             MOV      R1,R5
   \   0000005A   0xB289             UXTH     R1,R1
   \   0000005C   0x0A09             LSRS     R1,R1,#+8
   \   0000005E   0x7001             STRB     R1,[R0, #+0]
    213          			self->state = (size != 0) ? INVPROTOCOL_STATE_ARG : INVPROTOCOL_STATE_CRC0;
   \   00000060   0x2D00             CMP      R5,#+0
   \   00000062   0xD001             BEQ.N    ??InvProtocolFormater_processByte_8
   \   00000064   0x2005             MOVS     R0,#+5
   \   00000066   0xE000             B.N      ??InvProtocolFormater_processByte_9
   \                     ??InvProtocolFormater_processByte_8: (+1)
   \   00000068   0x2006             MOVS     R0,#+6
   \                     ??InvProtocolFormater_processByte_9: (+1)
   \   0000006A   0x7020             STRB     R0,[R4, #+0]
    214          			self->ccrc = cksum_reset();
   \   0000006C   0x.... 0x....      BL       cksum_reset
   \   00000070   0x8060             STRH     R0,[R4, #+2]
    215          			self->count = 0;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x80A0             STRH     R0,[R4, #+4]
    216          
    217          			return INVPROTOCOL_INCOMPLETE;
   \   00000076   0xF06F 0x0001      MVN      R0,#+1
   \   0000007A   0xBD70             POP      {R4-R6,PC}
    218          		}
    219          	case INVPROTOCOL_STATE_ARG: {
    220          			*outbyte = ((const uint8_t *)data)[self->count++];
   \                     ??InvProtocolFormater_processByte_10: (+1)
   \   0000007C   0x88A1             LDRH     R1,[R4, #+4]
   \   0000007E   0x1C4A             ADDS     R2,R1,#+1
   \   00000080   0x80A2             STRH     R2,[R4, #+4]
   \   00000082   0x5C59             LDRB     R1,[R3, R1]
   \   00000084   0x7001             STRB     R1,[R0, #+0]
    221          			self->ccrc = cksum_update(self->ccrc, *outbyte);
   \   00000086   0x8860             LDRH     R0,[R4, #+2]
   \   00000088   0x.... 0x....      BL       cksum_update
   \   0000008C   0x8060             STRH     R0,[R4, #+2]
    222          
    223          			if (self->count == (uint16_t)size) {
   \   0000008E   0x88A0             LDRH     R0,[R4, #+4]
   \   00000090   0xB2AD             UXTH     R5,R5
   \   00000092   0x42A8             CMP      R0,R5
   \   00000094   0xD101             BNE.N    ??InvProtocolFormater_processByte_3
    224          				self->state = INVPROTOCOL_STATE_CRC0;
   \   00000096   0x2006             MOVS     R0,#+6
   \   00000098   0x7020             STRB     R0,[R4, #+0]
    225          			}
    226          
    227          			return INVPROTOCOL_INCOMPLETE;
   \                     ??InvProtocolFormater_processByte_3: (+1)
   \   0000009A   0xF06F 0x0001      MVN      R0,#+1
   \   0000009E   0xBD70             POP      {R4-R6,PC}
    228          		}
    229          	case INVPROTOCOL_STATE_CRC0: {
    230          			*outbyte = (self->ccrc & (uint16_t)0x00FF);
   \                     ??InvProtocolFormater_processByte_11: (+1)
   \   000000A0   0x8861             LDRH     R1,[R4, #+2]
   \   000000A2   0x7001             STRB     R1,[R0, #+0]
    231          			self->state = INVPROTOCOL_STATE_CRC1;
   \   000000A4   0x2007             MOVS     R0,#+7
   \   000000A6   0x7020             STRB     R0,[R4, #+0]
    232          
    233          			return INVPROTOCOL_INCOMPLETE;
   \   000000A8   0xF06F 0x0001      MVN      R0,#+1
   \   000000AC   0xBD70             POP      {R4-R6,PC}
    234          		}
    235          	case INVPROTOCOL_STATE_CRC1: {
    236          			*outbyte = (self->ccrc & (uint16_t)0xFF00) >> 8;
   \                     ??InvProtocolFormater_processByte_12: (+1)
   \   000000AE   0x8861             LDRH     R1,[R4, #+2]
   \   000000B0   0x0A09             LSRS     R1,R1,#+8
   \   000000B2   0x7001             STRB     R1,[R0, #+0]
    237          
    238          			return INVPROTOCOL_OK;
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0xBD70             POP      {R4-R6,PC}
    239          		}
    240          
    241          	default:
    242          		break;
    243          	}
    244          
    245          	return INVPROTOCOL_NOK;
   \                     ??InvProtocolFormater_processByte_1: (+1)
   \   000000B8   0xF04F 0x30FF      MOV      R0,#-1
   \   000000BC   0xBD70             POP      {R4-R6,PC}       ;; return
    246          }
    247          

   \                                 In section .text, align 2, keep-with-next
    248          int InvProtocolFormater_formatBuffer(
    249                  uint8_t 		type,
    250                  uint8_t 		code,
    251                  const void 	*data,
    252                  size_t			size,
    253                  uint8_t 		*outbuffer,
    254                  size_t 			soutbuffer
    255          )
    256          {
   \                     InvProtocolFormater_formatBuffer: (+1)
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x4615             MOV      R5,R2
   \   0000000A   0x461E             MOV      R6,R3
    257          	InvProtocolFormater state;
    258          	size_t i;
    259          	int rc = INVPROTOCOL_INCOMPLETE;
   \   0000000C   0xF06F 0x0701      MVN      R7,#+1
   \   00000010   0x46BB             MOV      R11,R7
    260          
    261          	InvProtocolFormater_init(&state);
   \   00000012   0xA802             ADD      R0,SP,#+8
   \   00000014   0x.... 0x....      BL       InvProtocolFormater_init
    262          
    263          	for (i = 0; i < soutbuffer && rc == INVPROTOCOL_INCOMPLETE; ++i) {
   \   00000018   0xF04F 0x0800      MOV      R8,#+0
   \   0000001C   0xF8DD 0x9038      LDR      R9,[SP, #+56]
   \   00000020   0xF8DD 0xA03C      LDR      R10,[SP, #+60]
   \   00000024   0xE00D             B.N      ??InvProtocolFormater_formatBuffer_0
    264          		rc = InvProtocolFormater_processByte(&state, type, code, data, size,
    265          		                                     &outbuffer[i]);
   \                     ??InvProtocolFormater_formatBuffer_1: (+1)
   \   00000026   0xEB09 0x0008      ADD      R0,R9,R8
   \   0000002A   0x9001             STR      R0,[SP, #+4]
   \   0000002C   0x9600             STR      R6,[SP, #+0]
   \   0000002E   0x462B             MOV      R3,R5
   \   00000030   0x4622             MOV      R2,R4
   \   00000032   0xF89D 0x1010      LDRB     R1,[SP, #+16]
   \   00000036   0xA802             ADD      R0,SP,#+8
   \   00000038   0x.... 0x....      BL       InvProtocolFormater_processByte
   \   0000003C   0x4683             MOV      R11,R0
    266          	}
   \   0000003E   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??InvProtocolFormater_formatBuffer_0: (+1)
   \   00000042   0x45D0             CMP      R8,R10
   \   00000044   0xD201             BCS.N    ??InvProtocolFormater_formatBuffer_2
   \   00000046   0x45BB             CMP      R11,R7
   \   00000048   0xD0ED             BEQ.N    ??InvProtocolFormater_formatBuffer_1
    267          
    268          	return (rc == INVPROTOCOL_OK) ? (int)i : rc;
   \                     ??InvProtocolFormater_formatBuffer_2: (+1)
   \   0000004A   0xF1BB 0x0F00      CMP      R11,#+0
   \   0000004E   0xD100             BNE.N    ??InvProtocolFormater_formatBuffer_3
   \   00000050   0x46C3             MOV      R11,R8
   \                     ??InvProtocolFormater_formatBuffer_3: (+1)
   \   00000052   0x4658             MOV      R0,R11
   \   00000054   0xB005             ADD      SP,SP,#+20
   \   00000056   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    269          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      64   InvProtocolDecoder_decodeBuffer
        64   -> InvProtocolDecoder_init
        64   -> InvProtocolDecoder_processByte
       0   InvProtocolDecoder_init
      24   InvProtocolDecoder_processByte
        24   -> InvProtocolDecoder_init
        24   -> cksum_reset
        24   -> cksum_update
      56   InvProtocolFormater_formatBuffer
        56   -> InvProtocolFormater_init
        56   -> InvProtocolFormater_processByte
       0   InvProtocolFormater_init
      16   InvProtocolFormater_processByte
        16   -> cksum_reset
        16   -> cksum_update
       0   cksum_reset
       0   cksum_update


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      96  InvProtocolDecoder_decodeBuffer
      12  InvProtocolDecoder_init
     236  InvProtocolDecoder_processByte
      90  InvProtocolFormater_formatBuffer
      10  InvProtocolFormater_init
     190  InvProtocolFormater_processByte
       4  cksum_reset
      10  cksum_update
       4  sInvFrameHeader

 
 652 bytes in section .text
 
 652 bytes of CODE memory

Errors: none
Warnings: none
