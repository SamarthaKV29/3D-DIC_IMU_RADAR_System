###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.2.11706/W32 for ARM       22/Dec/2017  10:34:25
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\Invn\DynamicProtocol\DynProtocolTransportUart.c
#    Command line =  
#        C:\Users\prasa\Documents\1.0.0\sources\Invn\DynamicProtocol\DynProtocolTransportUart.c
#        -D IAR_COMPILER -D __inline=inline -D INV_MSG_ENABLE -D ASSERT -D
#        NUCLEO -D USE_STDPERIPH_DRIVER -D USE_HSE_BYPASS -D HSE_VALUE=8000000
#        -D STM32F411xE -lC
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list
#        --diag_suppress Pa050 -o
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 --silent --warnings_are_errors -e
#        --char_is_signed --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../board-hal\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Core\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Device\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/STM32F4xx_StdPeriph_Driver/inc\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/Images\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/DynamicProtocol\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list\DynProtocolTransportUart.lst
#    Object file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj\DynProtocolTransportUart.o
#
###############################################################################

C:\Users\prasa\Documents\1.0.0\sources\Invn\DynamicProtocol\DynProtocolTransportUart.c
      1          /*
      2           * ________________________________________________________________________________________________________
      3           * Copyright (c) 2016-2016 InvenSense Inc. All rights reserved.
      4           *
      5           * This software, related documentation and any modifications thereto (collectively “Software”) is subject
      6           * to InvenSense and its licensors' intellectual property rights under U.S. and international copyright
      7           * and other intellectual property rights laws.
      8           *
      9           * InvenSense and its licensors retain all intellectual property and proprietary rights in and to the Software
     10           * and any use, reproduction, disclosure or distribution of the Software without an express license agreement
     11           * from InvenSense is strictly prohibited.
     12           *
     13           * EXCEPT AS OTHERWISE PROVIDED IN A LICENSE AGREEMENT BETWEEN THE PARTIES, THE SOFTWARE IS
     14           * PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
     15           * TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
     16           * EXCEPT AS OTHERWISE PROVIDED IN A LICENSE AGREEMENT BETWEEN THE PARTIES, IN NO EVENT SHALL
     17           * INVENSENSE BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, OR ANY
     18           * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
     19           * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
     20           * OF THE SOFTWARE.
     21           * ________________________________________________________________________________________________________
     22           */
     23          
     24          #include "DynProtocolTransportUart.h"
     25          
     26          #include "Invn/EmbUtils/Message.h"
     27          
     28          #include <stdint.h>
     29          #include <string.h>
     30          
     31          /** TX/RX frames have the following format: 0x55 0xAA <NB_BYTES (2)> <PACKET (n)> */
     32          
     33          #define SYNC_BYTE_0                         0x55
     34          #define SYNC_BYTE_1                         0xAA
     35          #define DYN_PRO_TRANSPORT_UART_OVERHEAD     4
     36          

   \                                 In section .text, align 2, keep-with-next
     37          static inline void DynProTransportUart_callEventCB(DynProTransportUart_t * self, 
     38          		enum DynProTransportEvent event,
     39          		union DynProTransportEventData data)
     40          {
   \                     DynProTransportUart_callEventCB: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460B             MOV      R3,R1
   \   00000004   0x4611             MOV      R1,R2
     41          	if(self->event_cb) {
   \   00000006   0x6804             LDR      R4,[R0, #+0]
   \   00000008   0x0022             MOVS     R2,R4
   \   0000000A   0xD002             BEQ.N    ??DynProTransportUart_callEventCB_0
     42          		self->event_cb(event, data, self->event_cb_cookie);
   \   0000000C   0x6842             LDR      R2,[R0, #+4]
   \   0000000E   0x4618             MOV      R0,R3
   \   00000010   0x47A0             BLX      R4
     43          	}
     44          }
   \                     ??DynProTransportUart_callEventCB_0: (+1)
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     45          

   \                                 In section .text, align 2, keep-with-next
     46          void DynProTransportUart_init(DynProTransportUart_t * self,
     47          		DynProTransportEvent_cb event_cb, void * cookie)
     48          {
     49          	self->event_cb        = event_cb;
   \                     DynProTransportUart_init: (+1)
   \   00000000   0x6001             STR      R1,[R0, #+0]
     50          	self->event_cb_cookie = cookie;
   \   00000002   0x6042             STR      R2,[R0, #+4]
     51          	self->rx_sm_state     = RECEIVER_STATE_IDLE;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x7201             STRB     R1,[R0, #+8]
     52          	self->use_tx_dma        = 0;
   \   00000008   0x7381             STRB     R1,[R0, #+14]
     53          }
   \   0000000A   0x4770             BX       LR               ;; return
     54          
     55          
     56          /** @brief This function forces protocol to use DMA when transfering data on UART
     57           *
     58           * DMA is unused by default at startup. Once enabled DMA can not be disabled
     59           * until next POR.
     60           *
     61           *  @note : rx data is not impacted. Only tx data.
     62           *  @note : This function should be called after DynProTransportUart_init function. It was 
     63           *          not merged with DynProTransportUart_init() to avoid any API break.
     64           *
     65           * @param[in] self pointer on current DynProTransportUart_t transport object
     66           *
     67           */

   \                                 In section .text, align 2, keep-with-next
     68          void DynProTransportUart_enableTxDma(DynProTransportUart_t * self)
     69          {
     70          	self->use_tx_dma = 1;
   \                     DynProTransportUart_enableTxDma: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x7381             STRB     R1,[R0, #+14]
     71          }
   \   00000004   0x4770             BX       LR               ;; return
     72          

   \                                 In section .text, align 2, keep-with-next
     73          void DynProTransportUart_rxProcessReset(DynProTransportUart_t * self)
     74          {
     75          	self->rx_sm_state = RECEIVER_STATE_IDLE;
   \                     DynProTransportUart_rxProcessReset: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x7201             STRB     R1,[R0, #+8]
     76          }
   \   00000004   0x4770             BX       LR               ;; return
     77          

   \                                 In section .text, align 2, keep-with-next
     78          int DynProTransportUart_checkHeader_fromISR(uint8_t * rcv_byte)
     79          {
     80          	uint16_t expected_size;
     81          	
     82          	if (rcv_byte[0] != SYNC_BYTE_0)
   \                     DynProTransportUart_checkHeader_fromISR: (+1)
   \   00000000   0x7801             LDRB     R1,[R0, #+0]
   \   00000002   0x2955             CMP      R1,#+85
   \   00000004   0xD002             BEQ.N    ??DynProTransportUart_checkHeader_fromISR_0
     83          		return -1;
   \   00000006   0xF04F 0x30FF      MOV      R0,#-1
   \   0000000A   0x4770             BX       LR
     84          	if (rcv_byte[1] != SYNC_BYTE_1)
   \                     ??DynProTransportUart_checkHeader_fromISR_0: (+1)
   \   0000000C   0x7841             LDRB     R1,[R0, #+1]
   \   0000000E   0x29AA             CMP      R1,#+170
   \   00000010   0xD002             BEQ.N    ??DynProTransportUart_checkHeader_fromISR_1
     85          		return -1;
   \   00000012   0xF04F 0x30FF      MOV      R0,#-1
   \   00000016   0x4770             BX       LR
     86          	
     87          	expected_size = (uint16_t)rcv_byte[2] | ((uint16_t)rcv_byte[3] << 8U);
   \                     ??DynProTransportUart_checkHeader_fromISR_1: (+1)
   \   00000018   0x7881             LDRB     R1,[R0, #+2]
   \   0000001A   0x78C0             LDRB     R0,[R0, #+3]
   \   0000001C   0xEA41 0x2000      ORR      R0,R1,R0, LSL #+8
     88          	
     89          	if (expected_size > 128) // Arbitrary reasonable value to allow very quick check
   \   00000020   0x2881             CMP      R0,#+129
   \   00000022   0xDB01             BLT.N    ??DynProTransportUart_checkHeader_fromISR_2
     90          		return -1;
   \   00000024   0xF04F 0x30FF      MOV      R0,#-1
     91          	else
     92          		return expected_size;
   \                     ??DynProTransportUart_checkHeader_fromISR_2: (+1)
   \   00000028   0x4770             BX       LR               ;; return
     93          		
     94          }
     95          

   \                                 In section .text, align 4, keep-with-next
     96          int DynProTransportUart_rxProcessByte(DynProTransportUart_t * self, uint8_t rcv_byte)
     97          {
   \                     DynProTransportUart_rxProcessByte: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x4604             MOV      R4,R0
     98          	union DynProTransportEventData udata;
     99          
    100          	switch(self->rx_sm_state) {
   \   00000006   0xF994 0x0008      LDRSB    R0,[R4, #+8]
   \   0000000A   0x2804             CMP      R0,#+4
   \   0000000C   0xD808             BHI.N    ??DynProTransportUart_rxProcessByte_1
   \   0000000E   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??DynProTransportUart_rxProcessByte_0:
   \   00000012   0x03 0x1C          DC8      0x3,0x1C,0x34,0x38
   \              0x34 0x38    
   \   00000016   0x4A 0x00          DC8      0x4A,0x0
    101          	case RECEIVER_STATE_IDLE:
    102          		if(rcv_byte == SYNC_BYTE_0) {
   \                     ??DynProTransportUart_rxProcessByte_2: (+1)
   \   00000018   0x2955             CMP      R1,#+85
   \   0000001A   0xD103             BNE.N    ??DynProTransportUart_rxProcessByte_3
    103          			self->rx_sm_state = RECEIVER_STATE_SYNC_1;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x7220             STRB     R0,[R4, #+8]
    104          		}
    105          		else {
    106          			INV_MSG(INV_MSG_LEVEL_VERBOSE, "DynProTransportUart: unexpected SYNC0 byte %x recevied", rcv_byte);
    107          			self->rx_sm_state = RECEIVER_STATE_IDLE;
    108          			udata.error = -1;
    109          			DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_ERROR, udata);
    110          			return -1;
    111          		}
    112          		break;
    113          
    114          	case RECEIVER_STATE_SYNC_1:
    115          		if(rcv_byte == SYNC_BYTE_1) {
    116          			self->rx_sm_state = RECEIVER_STATE_SIZE_BYTE_0;
    117          		}
    118          		else {
    119          			INV_MSG(INV_MSG_LEVEL_VERBOSE, "DynProTransportUart: unexpected SYNC1 byte %x recevied", rcv_byte);
    120          			self->rx_sm_state = RECEIVER_STATE_IDLE;
    121          			udata.error = -1;
    122          			DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_ERROR, udata);
    123          			return -1;
    124          		}
    125          		break;
    126          
    127          	case RECEIVER_STATE_SIZE_BYTE_0:
    128          		self->rx_expected_bytes = (uint16_t)rcv_byte;
    129          		self->rx_sm_state = RECEIVER_STATE_SIZE_BYTE_1;
    130          		break;
    131          
    132          	case RECEIVER_STATE_SIZE_BYTE_1:
    133          		self->rx_expected_bytes |= ((uint16_t)rcv_byte << 8U);
    134          		self->rx_received_bytes = 0;
    135          		self->rx_sm_state = RECEIVER_STATE_PACKET_DATA;
    136          		udata.pkt_size = self->rx_expected_bytes;
    137          		DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_PKT_SIZE, udata);
    138          		return 1;
    139          
    140          	case RECEIVER_STATE_PACKET_DATA:
    141          		self->rx_received_bytes++;
    142          		udata.pkt_size = rcv_byte;
    143          		DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_PKT_BYTE, udata);
    144          		if(self->rx_received_bytes == self->rx_expected_bytes) {
    145          			self->rx_sm_state = RECEIVER_STATE_IDLE;
    146          			udata.pkt_size = self->rx_received_bytes;
    147          			DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_PKT_END, udata);
    148          		}
    149          		return 1;
    150          	}
    151          
    152          	return 0;
   \                     ??DynProTransportUart_rxProcessByte_1: (+1)
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   \                     ??DynProTransportUart_rxProcessByte_3: (+1)
   \   00000024   0x460A             MOV      R2,R1
   \   00000026   0x.... 0x....      ADR.W    R1,?_0
   \   0000002A   0x2004             MOVS     R0,#+4
   \   0000002C   0x.... 0x....      BL       inv_msg
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x7220             STRB     R0,[R4, #+8]
   \   00000034   0xF04F 0x30FF      MOV      R0,#-1
   \   00000038   0x9000             STR      R0,[SP, #+0]
   \   0000003A   0x4602             MOV      R2,R0
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       DynProTransportUart_callEventCB
   \   00000044   0xF04F 0x30FF      MOV      R0,#-1
   \   00000048   0xBD16             POP      {R1,R2,R4,PC}
   \                     ??DynProTransportUart_rxProcessByte_4: (+1)
   \   0000004A   0x29AA             CMP      R1,#+170
   \   0000004C   0xD102             BNE.N    ??DynProTransportUart_rxProcessByte_5
   \   0000004E   0x2002             MOVS     R0,#+2
   \   00000050   0x7220             STRB     R0,[R4, #+8]
   \   00000052   0xE7E5             B.N      ??DynProTransportUart_rxProcessByte_1
   \                     ??DynProTransportUart_rxProcessByte_5: (+1)
   \   00000054   0x460A             MOV      R2,R1
   \   00000056   0x.... 0x....      ADR.W    R1,?_1
   \   0000005A   0x2004             MOVS     R0,#+4
   \   0000005C   0x.... 0x....      BL       inv_msg
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x7220             STRB     R0,[R4, #+8]
   \   00000064   0xF04F 0x30FF      MOV      R0,#-1
   \   00000068   0x9000             STR      R0,[SP, #+0]
   \   0000006A   0x4602             MOV      R2,R0
   \   0000006C   0x2100             MOVS     R1,#+0
   \   0000006E   0x4620             MOV      R0,R4
   \   00000070   0x.... 0x....      BL       DynProTransportUart_callEventCB
   \   00000074   0xF04F 0x30FF      MOV      R0,#-1
   \   00000078   0xBD16             POP      {R1,R2,R4,PC}
   \                     ??DynProTransportUart_rxProcessByte_6: (+1)
   \   0000007A   0x8161             STRH     R1,[R4, #+10]
   \   0000007C   0x2003             MOVS     R0,#+3
   \   0000007E   0x7220             STRB     R0,[R4, #+8]
   \   00000080   0xE7CE             B.N      ??DynProTransportUart_rxProcessByte_1
   \                     ??DynProTransportUart_rxProcessByte_7: (+1)
   \   00000082   0x8960             LDRH     R0,[R4, #+10]
   \   00000084   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000088   0x8160             STRH     R0,[R4, #+10]
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x81A0             STRH     R0,[R4, #+12]
   \   0000008E   0x2004             MOVS     R0,#+4
   \   00000090   0x7220             STRB     R0,[R4, #+8]
   \   00000092   0x8960             LDRH     R0,[R4, #+10]
   \   00000094   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000098   0x9A00             LDR      R2,[SP, #+0]
   \   0000009A   0x2101             MOVS     R1,#+1
   \   0000009C   0x4620             MOV      R0,R4
   \   0000009E   0x.... 0x....      BL       DynProTransportUart_callEventCB
   \   000000A2   0x2001             MOVS     R0,#+1
   \   000000A4   0xBD16             POP      {R1,R2,R4,PC}
   \                     ??DynProTransportUart_rxProcessByte_8: (+1)
   \   000000A6   0x89A0             LDRH     R0,[R4, #+12]
   \   000000A8   0x1C40             ADDS     R0,R0,#+1
   \   000000AA   0x81A0             STRH     R0,[R4, #+12]
   \   000000AC   0xF8AD 0x1000      STRH     R1,[SP, #+0]
   \   000000B0   0x9A00             LDR      R2,[SP, #+0]
   \   000000B2   0x2102             MOVS     R1,#+2
   \   000000B4   0x4620             MOV      R0,R4
   \   000000B6   0x.... 0x....      BL       DynProTransportUart_callEventCB
   \   000000BA   0x89A0             LDRH     R0,[R4, #+12]
   \   000000BC   0x8961             LDRH     R1,[R4, #+10]
   \   000000BE   0x4288             CMP      R0,R1
   \   000000C0   0xD109             BNE.N    ??DynProTransportUart_rxProcessByte_9
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0x7220             STRB     R0,[R4, #+8]
   \   000000C6   0x89A0             LDRH     R0,[R4, #+12]
   \   000000C8   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   000000CC   0x9A00             LDR      R2,[SP, #+0]
   \   000000CE   0x2103             MOVS     R1,#+3
   \   000000D0   0x4620             MOV      R0,R4
   \   000000D2   0x.... 0x....      BL       DynProTransportUart_callEventCB
   \                     ??DynProTransportUart_rxProcessByte_9: (+1)
   \   000000D6   0x2001             MOVS     R0,#+1
   \   000000D8   0xBD16             POP      {R1,R2,R4,PC}
    153          }
    154          
    155          
    156          /** @brief This function is used to send a frame on UART.
    157           *
    158           * To keep the protocol hardware independant, this function does not call any UART API. It just sends
    159           * some events to the transport callback. Transport callback is in charge of calling UART driver.
    160           * 
    161           * If DMA is enabled, function sends DYN_PRO_TRANSPORT_EVENT_TX_START_DMA event and frame pointer
    162           * to transport callback 
    163           * If DMA is disabled, function sends :
    164           *    - DYN_PRO_TRANSPORT_EVENT_TX_START event and frame size in bytes to the transport callback
    165           *    - DYN_PRO_TRANSPORT_EVENT_TX_BYTE event for each byte of the frame
    166           *    - DYN_PRO_TRANSPORT_EVENT_TX_END event and frame pointer to transport callback  
    167           *  
    168           * Finnally it sends DYN_PRO_TRANSPORT_EVENT_TX_END to the transport callback
    169           * 
    170           * @param[in] self : pointer on current DynProTransportUart_t transport object
    171           * @param[in] frame : pointer to frmae descriptor to be sent
    172           *
    173           * @return      0 on sucess, negative value on error
    174           */

   \                                 In section .text, align 2, keep-with-next
    175          int DynProTransportUart_txSendFrame(DynProTransportUart_t * self, DynProTransportUartFrame_t *frame)
    176          {
   \                     DynProTransportUart_txSendFrame: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    177          	union DynProTransportEventData udata;
    178          	uint16_t i;
    179          
    180          	if(self->use_tx_dma) {
   \   00000008   0x7BA0             LDRB     R0,[R4, #+14]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD006             BEQ.N    ??DynProTransportUart_txSendFrame_0
    181          		udata.frame = (void*)frame;
   \   0000000E   0x9500             STR      R5,[SP, #+0]
    182          		DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_TX_START_DMA, udata);
   \   00000010   0x460A             MOV      R2,R1
   \   00000012   0x2107             MOVS     R1,#+7
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       DynProTransportUart_callEventCB
   \   0000001A   0xE01E             B.N      ??DynProTransportUart_txSendFrame_1
    183          	}
    184          	else {
    185          		udata.tx_start = frame->len;
   \                     ??DynProTransportUart_txSendFrame_0: (+1)
   \   0000001C   0x89A8             LDRH     R0,[R5, #+12]
   \   0000001E   0x9000             STR      R0,[SP, #+0]
    186          		DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_TX_START, udata);
   \   00000020   0x4602             MOV      R2,R0
   \   00000022   0x2104             MOVS     R1,#+4
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       DynProTransportUart_callEventCB
    187          
    188          		for(i = 0; i < frame->len; ++i) {
   \   0000002A   0x2600             MOVS     R6,#+0
   \   0000002C   0xE00A             B.N      ??DynProTransportUart_txSendFrame_2
    189          			udata.tx_byte = ((uint8_t*)frame->header)[i];
   \                     ??DynProTransportUart_txSendFrame_3: (+1)
   \   0000002E   0x6828             LDR      R0,[R5, #+0]
   \   00000030   0xB2B6             UXTH     R6,R6
   \   00000032   0x5D80             LDRB     R0,[R0, R6]
   \   00000034   0xF88D 0x0000      STRB     R0,[SP, #+0]
    190          			DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_TX_BYTE, udata);
   \   00000038   0x9A00             LDR      R2,[SP, #+0]
   \   0000003A   0x2105             MOVS     R1,#+5
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       DynProTransportUart_callEventCB
    191          		}
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   \                     ??DynProTransportUart_txSendFrame_2: (+1)
   \   00000044   0x4630             MOV      R0,R6
   \   00000046   0x89A9             LDRH     R1,[R5, #+12]
   \   00000048   0xB280             UXTH     R0,R0
   \   0000004A   0x4288             CMP      R0,R1
   \   0000004C   0xD3EF             BCC.N    ??DynProTransportUart_txSendFrame_3
    192          		
    193          		// send frame pointer to callback in case some memory need to be free
    194          		udata.frame = (void*)frame;
   \   0000004E   0x9500             STR      R5,[SP, #+0]
    195          		DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_TX_END, udata);
   \   00000050   0x462A             MOV      R2,R5
   \   00000052   0x2106             MOVS     R1,#+6
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       DynProTransportUart_callEventCB
    196          	}
    197          	
    198          	return 0;
   \                     ??DynProTransportUart_txSendFrame_1: (+1)
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    199          }
    200          
    201          /** @deprecated Deprecated function. Consider using DynProTransportUart_txSendFrame() instead.
    202           * 
    203           * @brief This function is used to send a buffer byte after byte on UART.
    204           *
    205           * To keep the protocol hardware independant, this function does not call any UART API. It just sends
    206           * some events to the transport callback. Transport callback is in charge of calling UART driver.
    207           * 
    208           * Function starts by sending DYN_PRO_TRANSPORT_EVENT_TX_START event to transport callback.
    209           * Then it sends DYN_PRO_TRANSPORT_EVENT_TX_BYTE event to the transport callback for each byte of :
    210           *    - the 4 bytes transport layer header
    211           *    - buffer given in paramters
    212           *  
    213           * Finnally it sends DYN_PRO_TRANSPORT_EVENT_TX_END to the transport callback
    214           * 
    215           * @param[in] self : pointer on current DynProTransportUart_t transport object
    216           * @param[in] buffer : pointer to the first byte to be sent
    217           * @param[in] size : number of bytes to be sent
    218           *
    219           * @return      0 on sucess, negative value on error
    220           */

   \                                 In section .text, align 2, keep-with-next
    221          int DynProTransportUart_tx(DynProTransportUart_t * self,
    222          	const uint8_t * buffer, uint16_t size)
    223          {
   \                     DynProTransportUart_tx: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    224          	union DynProTransportEventData udata;
    225          	const uint32_t total_bytes = DYN_PRO_TRANSPORT_UART_OVERHEAD + size;
    226          	uint16_t i;
    227          
    228          	udata.tx_start = total_bytes;
   \   00000008   0x1D30             ADDS     R0,R6,#+4
   \   0000000A   0x9000             STR      R0,[SP, #+0]
    229          	DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_TX_START, udata);
   \   0000000C   0x4602             MOV      R2,R0
   \   0000000E   0x2104             MOVS     R1,#+4
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       DynProTransportUart_callEventCB
    230          	udata.tx_byte = SYNC_BYTE_0;
   \   00000016   0x2055             MOVS     R0,#+85
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
    231          	DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_TX_BYTE, udata);
   \   0000001C   0x9A00             LDR      R2,[SP, #+0]
   \   0000001E   0x2105             MOVS     R1,#+5
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       DynProTransportUart_callEventCB
    232          	udata.tx_byte = SYNC_BYTE_1;
   \   00000026   0x20AA             MOVS     R0,#+170
   \   00000028   0xF88D 0x0000      STRB     R0,[SP, #+0]
    233          	DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_TX_BYTE, udata);
   \   0000002C   0x9A00             LDR      R2,[SP, #+0]
   \   0000002E   0x2105             MOVS     R1,#+5
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       DynProTransportUart_callEventCB
    234          	udata.tx_byte = (size & 0x00FF);
   \   00000036   0x4630             MOV      R0,R6
   \   00000038   0xF88D 0x0000      STRB     R0,[SP, #+0]
    235          	DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_TX_BYTE, udata);
   \   0000003C   0x9A00             LDR      R2,[SP, #+0]
   \   0000003E   0x2105             MOVS     R1,#+5
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       DynProTransportUart_callEventCB
    236          	udata.tx_byte = (size & 0xFF00) >> 8;
   \   00000046   0x4630             MOV      R0,R6
   \   00000048   0x0A00             LSRS     R0,R0,#+8
   \   0000004A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    237          	DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_TX_BYTE, udata);
   \   0000004E   0x9A00             LDR      R2,[SP, #+0]
   \   00000050   0x2105             MOVS     R1,#+5
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       DynProTransportUart_callEventCB
    238          
    239          	for(i = 0; i < size; ++i) {
   \   00000058   0x2700             MOVS     R7,#+0
   \   0000005A   0xE009             B.N      ??DynProTransportUart_tx_0
    240          		udata.tx_byte = buffer[i];
   \                     ??DynProTransportUart_tx_1: (+1)
   \   0000005C   0xB2BF             UXTH     R7,R7
   \   0000005E   0x5DE8             LDRB     R0,[R5, R7]
   \   00000060   0xF88D 0x0000      STRB     R0,[SP, #+0]
    241          		DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_TX_BYTE, udata);
   \   00000064   0x9A00             LDR      R2,[SP, #+0]
   \   00000066   0x2105             MOVS     R1,#+5
   \   00000068   0x4620             MOV      R0,R4
   \   0000006A   0x.... 0x....      BL       DynProTransportUart_callEventCB
    242          	}
   \   0000006E   0x1C7F             ADDS     R7,R7,#+1
   \                     ??DynProTransportUart_tx_0: (+1)
   \   00000070   0x4638             MOV      R0,R7
   \   00000072   0x4631             MOV      R1,R6
   \   00000074   0xB280             UXTH     R0,R0
   \   00000076   0x4288             CMP      R0,R1
   \   00000078   0xD3F0             BCC.N    ??DynProTransportUart_tx_1
    243          
    244          	DynProTransportUart_callEventCB(self, DYN_PRO_TRANSPORT_EVENT_TX_END, udata);
   \   0000007A   0x9A00             LDR      R2,[SP, #+0]
   \   0000007C   0x2106             MOVS     R1,#+6
   \   0000007E   0x4620             MOV      R0,R4
   \   00000080   0x.... 0x....      BL       DynProTransportUart_callEventCB
    245          
    246          	return 0;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    247          }
    248          

   \                                 In section .text, align 2, keep-with-next
    249          int DynProTransportUart_txAssignBuffer(DynProTransportUart_t * self, 
    250          	DynProTransportUartFrame_t * frame, uint8_t * mem_buf, uint16_t buf_size)
    251          {
    252          	(void)self;
    253          
    254          	/* sanity check */
    255          	if(buf_size < DYN_PRO_TRANSPORT_UART_OVERHEAD){
   \                     DynProTransportUart_txAssignBuffer: (+1)
   \   00000000   0x2B04             CMP      R3,#+4
   \   00000002   0xDA02             BGE.N    ??DynProTransportUart_txAssignBuffer_0
    256          		return -1;
   \   00000004   0xF04F 0x30FF      MOV      R0,#-1
   \   00000008   0x4770             BX       LR
    257          	}
    258          
    259          	frame->header = mem_buf;
   \                     ??DynProTransportUart_txAssignBuffer_0: (+1)
   \   0000000A   0x600A             STR      R2,[R1, #+0]
    260          	frame->payload_data = mem_buf + DYN_PRO_TRANSPORT_UART_OVERHEAD;
   \   0000000C   0x1D10             ADDS     R0,R2,#+4
   \   0000000E   0x6048             STR      R0,[R1, #+4]
    261          	frame->payload_len = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x8108             STRH     R0,[R1, #+8]
    262          	frame->max_payload_len = buf_size - DYN_PRO_TRANSPORT_UART_OVERHEAD;
   \   00000014   0x1F18             SUBS     R0,R3,#+4
   \   00000016   0x8148             STRH     R0,[R1, #+10]
    263          	frame->len = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x8188             STRH     R0,[R1, #+12]
    264          
    265          	return 0;
   \   0000001C   0x4770             BX       LR               ;; return
    266          }
    267          

   \                                 In section .text, align 2, keep-with-next
    268          int DynProTransportUart_txEncodeFrame(DynProTransportUart_t * self, 
    269          	DynProTransportUartFrame_t * frame)
    270          {
    271          	(void)self;
    272          
    273          	/* sanity check */
    274          	if((frame->payload_len <= 0) || (frame->payload_data != (frame->header + DYN_PRO_TRANSPORT_UART_OVERHEAD))) {
   \                     DynProTransportUart_txEncodeFrame: (+1)
   \   00000000   0x8908             LDRH     R0,[R1, #+8]
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD004             BEQ.N    ??DynProTransportUart_txEncodeFrame_0
   \   00000006   0x6808             LDR      R0,[R1, #+0]
   \   00000008   0x684A             LDR      R2,[R1, #+4]
   \   0000000A   0x1D03             ADDS     R3,R0,#+4
   \   0000000C   0x429A             CMP      R2,R3
   \   0000000E   0xD002             BEQ.N    ??DynProTransportUart_txEncodeFrame_1
    275          		return -1;
   \                     ??DynProTransportUart_txEncodeFrame_0: (+1)
   \   00000010   0xF04F 0x30FF      MOV      R0,#-1
   \   00000014   0x4770             BX       LR
    276          	}
    277          
    278          	frame->header[0] = SYNC_BYTE_0;
   \                     ??DynProTransportUart_txEncodeFrame_1: (+1)
   \   00000016   0x2255             MOVS     R2,#+85
   \   00000018   0x7002             STRB     R2,[R0, #+0]
    279          	frame->header[1] = SYNC_BYTE_1;
   \   0000001A   0x20AA             MOVS     R0,#+170
   \   0000001C   0x680A             LDR      R2,[R1, #+0]
   \   0000001E   0x7050             STRB     R0,[R2, #+1]
    280          	frame->header[2] = (frame->payload_len & 0x00FF);
   \   00000020   0x8908             LDRH     R0,[R1, #+8]
   \   00000022   0x680A             LDR      R2,[R1, #+0]
   \   00000024   0x7090             STRB     R0,[R2, #+2]
    281          	frame->header[3] = (frame->payload_len & 0xFF00) >> 8;
   \   00000026   0x8908             LDRH     R0,[R1, #+8]
   \   00000028   0x0A00             LSRS     R0,R0,#+8
   \   0000002A   0x680A             LDR      R2,[R1, #+0]
   \   0000002C   0x70D0             STRB     R0,[R2, #+3]
    282          
    283          	frame->len = frame->payload_len + DYN_PRO_TRANSPORT_UART_OVERHEAD;
   \   0000002E   0x8908             LDRH     R0,[R1, #+8]
   \   00000030   0x1D00             ADDS     R0,R0,#+4
   \   00000032   0x8188             STRH     R0,[R1, #+12]
    284          
    285          	return 0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x4770             BX       LR               ;; return
    286          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x44 0x79          DC8 44H, 79H, 6EH, 50H, 72H, 6FH, 54H, 72H
   \              0x6E 0x50    
   \              0x72 0x6F    
   \              0x54 0x72    
   \   00000008   0x61 0x6E          DC8 61H, 6EH, 73H, 70H, 6FH, 72H, 74H, 55H
   \              0x73 0x70    
   \              0x6F 0x72    
   \              0x74 0x55    
   \   00000010   0x61 0x72          DC8 61H, 72H, 74H, 3AH, 20H, 75H, 6EH, 65H
   \              0x74 0x3A    
   \              0x20 0x75    
   \              0x6E 0x65    
   \   00000018   0x78 0x70          DC8 78H, 70H, 65H, 63H, 74H, 65H, 64H, 20H
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x20    
   \   00000020   0x53 0x59          DC8 53H, 59H, 4EH, 43H, 30H, 20H, 62H, 79H
   \              0x4E 0x43    
   \              0x30 0x20    
   \              0x62 0x79    
   \   00000028   0x74 0x65          DC8 74H, 65H, 20H, 25H, 78H, 20H, 72H, 65H
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x72 0x65    
   \   00000030   0x63 0x65          DC8 63H, 65H, 76H, 69H, 65H, 64H, 0
   \              0x76 0x69    
   \              0x65 0x64    
   \              0x00         
   \   00000037   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x44 0x79          DC8 44H, 79H, 6EH, 50H, 72H, 6FH, 54H, 72H
   \              0x6E 0x50    
   \              0x72 0x6F    
   \              0x54 0x72    
   \   00000008   0x61 0x6E          DC8 61H, 6EH, 73H, 70H, 6FH, 72H, 74H, 55H
   \              0x73 0x70    
   \              0x6F 0x72    
   \              0x74 0x55    
   \   00000010   0x61 0x72          DC8 61H, 72H, 74H, 3AH, 20H, 75H, 6EH, 65H
   \              0x74 0x3A    
   \              0x20 0x75    
   \              0x6E 0x65    
   \   00000018   0x78 0x70          DC8 78H, 70H, 65H, 63H, 74H, 65H, 64H, 20H
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x20    
   \   00000020   0x53 0x59          DC8 53H, 59H, 4EH, 43H, 31H, 20H, 62H, 79H
   \              0x4E 0x43    
   \              0x31 0x20    
   \              0x62 0x79    
   \   00000028   0x74 0x65          DC8 74H, 65H, 20H, 25H, 78H, 20H, 72H, 65H
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x72 0x65    
   \   00000030   0x63 0x65          DC8 63H, 65H, 76H, 69H, 65H, 64H, 0
   \              0x76 0x69    
   \              0x65 0x64    
   \              0x00         
   \   00000037   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DynProTransportUart_callEventCB
         8   -- Indirect call
       0   DynProTransportUart_checkHeader_fromISR
       0   DynProTransportUart_enableTxDma
       0   DynProTransportUart_init
      16   DynProTransportUart_rxProcessByte
        16   -> DynProTransportUart_callEventCB
        16   -> inv_msg
       0   DynProTransportUart_rxProcessReset
      24   DynProTransportUart_tx
        24   -> DynProTransportUart_callEventCB
       0   DynProTransportUart_txAssignBuffer
       0   DynProTransportUart_txEncodeFrame
      24   DynProTransportUart_txSendFrame
        24   -> DynProTransportUart_callEventCB


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      56  ?_0
      56  ?_1
      20  DynProTransportUart_callEventCB
      42  DynProTransportUart_checkHeader_fromISR
       6  DynProTransportUart_enableTxDma
      12  DynProTransportUart_init
     218  DynProTransportUart_rxProcessByte
       6  DynProTransportUart_rxProcessReset
     136  DynProTransportUart_tx
      30  DynProTransportUart_txAssignBuffer
      56  DynProTransportUart_txEncodeFrame
      94  DynProTransportUart_txSendFrame

 
 732 bytes in section .text
 
 732 bytes of CODE memory

Errors: none
Warnings: none
