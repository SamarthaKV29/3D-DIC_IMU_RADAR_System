###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.2.11706/W32 for ARM       22/Dec/2017  10:34:32
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\board-hal\spi_master.c
#    Command line =  
#        C:\Users\prasa\Documents\1.0.0\sources\board-hal\spi_master.c -D
#        IAR_COMPILER -D __inline=inline -D INV_MSG_ENABLE -D ASSERT -D NUCLEO
#        -D USE_STDPERIPH_DRIVER -D USE_HSE_BYPASS -D HSE_VALUE=8000000 -D
#        STM32F411xE -lC
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list
#        --diag_suppress Pa050 -o
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 --silent --warnings_are_errors -e
#        --char_is_signed --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../board-hal\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Core\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Device\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/STM32F4xx_StdPeriph_Driver/inc\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/Images\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/DynamicProtocol\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list\spi_master.lst
#    Object file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj\spi_master.o
#
###############################################################################

C:\Users\prasa\Documents\1.0.0\sources\board-hal\spi_master.c
      1          /*
      2           * ________________________________________________________________________________________________________
      3           * Copyright (c) 2016-2016 InvenSense Inc. All rights reserved.
      4           *
      5           * This software, related documentation and any modifications thereto (collectively “Software”) is subject
      6           * to InvenSense and its licensors' intellectual property rights under U.S. and international copyright
      7           * and other intellectual property rights laws.
      8           *
      9           * InvenSense and its licensors retain all intellectual property and proprietary rights in and to the Software
     10           * and any use, reproduction, disclosure or distribution of the Software without an express license agreement
     11           * from InvenSense is strictly prohibited.
     12           *
     13           * EXCEPT AS OTHERWISE PROVIDED IN A LICENSE AGREEMENT BETWEEN THE PARTIES, THE SOFTWARE IS
     14           * PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
     15           * TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
     16           * EXCEPT AS OTHERWISE PROVIDED IN A LICENSE AGREEMENT BETWEEN THE PARTIES, IN NO EVENT SHALL
     17           * INVENSENSE BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, OR ANY
     18           * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
     19           * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
     20           * OF THE SOFTWARE.
     21           * ________________________________________________________________________________________________________
     22           */
     23          
     24          #include "spi_master.h"
     25          
     26          #include "stm32f4xx.h"
     27          #include "stm32f4xx_gpio.h" 
     28          #include "stm32f4xx_spi.h" 
     29          #include "stm32f4xx_rcc.h"
     30          
     31          /********************************* Defines ************************************/
     32          
     33          // SPI1 defines
     34          #define SENSORS_SPI_GPIO_PORT              GPIOA
     35          #define SENSORS_SPI_GPIO_CLK               RCC_AHB1Periph_GPIOA
     36          
     37          #define SENSORS_SPI_SCK_GPIO_PIN           GPIO_Pin_5
     38          #define SENSORS_SPI_SCK_GPIO_PINSOURCE     GPIO_PinSource5
     39          #define SENSORS_SPI_MISO_GPIO_PIN          GPIO_Pin_6
     40          #define SENSORS_SPI_MISO_GPIO_PINSOURCE    GPIO_PinSource6
     41          #define SENSORS_SPI_MOSI_GPIO_PIN          GPIO_Pin_7
     42          #define SENSORS_SPI_MOSI_GPIO_PINSOURCE    GPIO_PinSource7
     43          
     44          #define SENSORS_CS_GPIO_PORT               GPIOB
     45          #define SENSORS_CS_GPIO_CLK                RCC_AHB1Periph_GPIOB
     46          #define SENSORS_CS_GPIO_PIN                GPIO_Pin_6
     47          
     48          #define SENSORS_SPI                        SPI1
     49          #define SENSORS_GPIO_AF_SPI                GPIO_AF_SPI1
     50          #define SENSORS_SPI_RCC_CLK                RCC_APB2Periph_SPI1
     51          
     52          //SPI2 defines
     53          #define SENSORS_SPI2_GPIO_PORT             GPIOB
     54          #define SENSORS_SPI2_GPIO_CLK              RCC_AHB1Periph_GPIOB
     55          
     56          #define SENSORS_SPI2_SCK_GPIO_PIN          GPIO_Pin_13
     57          #define SENSORS_SPI2_SCK_GPIO_PINSOURCE    GPIO_PinSource13
     58          #define SENSORS_SPI2_MISO_GPIO_PIN         GPIO_Pin_14
     59          #define SENSORS_SPI2_MISO_GPIO_PINSOURCE   GPIO_PinSource14
     60          #define SENSORS_SPI2_MOSI_GPIO_PIN         GPIO_Pin_15
     61          #define SENSORS_SPI2_MOSI_GPIO_PINSOURCE   GPIO_PinSource15
     62          
     63          #define SENSORS_CS2_GPIO_PORT              GPIOB
     64          #define SENSORS_CS2_GPIO_CLK               RCC_AHB1Periph_GPIOB
     65          #define SENSORS_CS2_GPIO_PIN               GPIO_Pin_12
     66          
     67          #define SENSORS_SPI2                       SPI2
     68          #define SENSORS_GPIO_AF_SPI2               GPIO_AF_SPI2
     69          #define SENSORS_SPI2_RCC_CLK               RCC_APB1Periph_SPI2
     70          
     71          // bit mask to notify a SPI read register
     72          #define READ_BIT_MASK                      0x80
     73          
     74          #define SPIx_FLAG_TIMEOUT                 ((uint32_t) 900)
     75          #define SPIx_LONG_TIMEOUT                 ((uint32_t) (300 * SPIx_FLAG_TIMEOUT))
     76          
     77          #define WAIT_FOR_FLAG(SPI, flag, timeout, errorcode) SPITimeout = timeout;\
     78                      while(!SPI_I2S_GetFlagStatus(SPI, flag))  {\
     79                        if((SPITimeout--) == 0) return SPIx_TIMEOUT_UserCallback(errorcode); \
     80                      }\
     81          
     82          /********************************* Globals ************************************/

   \                                 In section .bss, align 1
     83          static uint8_t IsInitedSpi1 = 0;
   \                     IsInitedSpi1:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
     84          static uint8_t IsInitedSpi2 = 0;
     85          
     86          /********************************* Private Prototypes **************************/
     87          

   \                                 In section .text, align 2, keep-with-next
     88          static void spi_master_init_gpio_spi1(GPIO_InitTypeDef* GPIO_InitStructure)
     89          {
   \                     spi_master_init_gpio_spi1: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
     90          	//Check if we already inited it
     91          	if(IsInitedSpi1 != 0)
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable9
   \   00000008   0x7828             LDRB     R0,[R5, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD127             BNE.N    ??spi_master_init_gpio_spi1_0
     92          		return;
     93          	/* Enable SPIx clock */
     94          	RCC_APB2PeriphClockCmd(SENSORS_SPI_RCC_CLK, ENABLE);
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0xF44F 0x5080      MOV      R0,#+4096
   \   00000014   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     95          
     96          	/* Enable SPI GPIO clock */
     97          	RCC_AHB1PeriphClockCmd(SENSORS_SPI_GPIO_CLK | SENSORS_CS_GPIO_CLK, ENABLE);
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x2003             MOVS     R0,#+3
   \   0000001C   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     98          
     99          	/* Configure SPIx pin: SCK, MOSI and MISO -------------------------*/
    100          	GPIO_InitStructure->GPIO_Pin =  SENSORS_SPI_SCK_GPIO_PIN | SENSORS_SPI_MISO_GPIO_PIN | SENSORS_SPI_MOSI_GPIO_PIN; 
   \   00000020   0x20E0             MOVS     R0,#+224
   \   00000022   0x6020             STR      R0,[R4, #+0]
    101          	GPIO_InitStructure->GPIO_Mode = GPIO_Mode_AF;
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0x7120             STRB     R0,[R4, #+4]
    102          	GPIO_InitStructure->GPIO_Speed = GPIO_Speed_50MHz;
   \   00000028   0x7160             STRB     R0,[R4, #+5]
    103          	GPIO_InitStructure->GPIO_OType = GPIO_OType_PP;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x71A0             STRB     R0,[R4, #+6]
    104          	GPIO_InitStructure->GPIO_PuPd  = GPIO_PuPd_NOPULL;
   \   0000002E   0x71E0             STRB     R0,[R4, #+7]
    105          	GPIO_Init(SENSORS_SPI_GPIO_PORT, GPIO_InitStructure);
   \   00000030   0x.... 0x....      LDR.W    R6,??DataTable9_1  ;; 0x40020000
   \   00000034   0x4621             MOV      R1,R4
   \   00000036   0x4630             MOV      R0,R6
   \   00000038   0x.... 0x....      BL       GPIO_Init
    106          
    107          	/* Connect SPIx pins to AF4 */
    108          	GPIO_PinAFConfig(SENSORS_SPI_GPIO_PORT, SENSORS_SPI_SCK_GPIO_PINSOURCE, SENSORS_GPIO_AF_SPI);  
   \   0000003C   0x2205             MOVS     R2,#+5
   \   0000003E   0x4611             MOV      R1,R2
   \   00000040   0x4630             MOV      R0,R6
   \   00000042   0x.... 0x....      BL       GPIO_PinAFConfig
    109          	GPIO_PinAFConfig(SENSORS_SPI_GPIO_PORT, SENSORS_SPI_MISO_GPIO_PINSOURCE, SENSORS_GPIO_AF_SPI);  
   \   00000046   0x2205             MOVS     R2,#+5
   \   00000048   0x2106             MOVS     R1,#+6
   \   0000004A   0x4630             MOV      R0,R6
   \   0000004C   0x.... 0x....      BL       GPIO_PinAFConfig
    110          	GPIO_PinAFConfig(SENSORS_SPI_GPIO_PORT, SENSORS_SPI_MOSI_GPIO_PINSOURCE, SENSORS_GPIO_AF_SPI);  
   \   00000050   0x2205             MOVS     R2,#+5
   \   00000052   0x2107             MOVS     R1,#+7
   \   00000054   0x4630             MOV      R0,R6
   \   00000056   0x.... 0x....      BL       GPIO_PinAFConfig
    111          
    112          	IsInitedSpi1 = 1;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x7028             STRB     R0,[R5, #+0]
    113          }
   \                     ??spi_master_init_gpio_spi1_0: (+1)
   \   0000005E   0xBD70             POP      {R4-R6,PC}       ;; return
    114          

   \                                 In section .text, align 2, keep-with-next
    115          static void spi_master_init_gpio_spi2(GPIO_InitTypeDef* GPIO_InitStructure)
    116          {
   \                     spi_master_init_gpio_spi2: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    117          	//Check if we already inited it
    118          	if(IsInitedSpi2 != 0)
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable9
   \   00000008   0x7868             LDRB     R0,[R5, #+1]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD128             BNE.N    ??spi_master_init_gpio_spi2_0
    119          		return;
    120          
    121          	/* Enable SPIx clock */
    122          	RCC_APB1PeriphClockCmd(SENSORS_SPI2_RCC_CLK, ENABLE);
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0xF44F 0x4080      MOV      R0,#+16384
   \   00000014   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
    123          
    124          	/* Enable SPI GPIO clock */
    125          	RCC_AHB1PeriphClockCmd(SENSORS_SPI2_GPIO_CLK | SENSORS_CS2_GPIO_CLK, ENABLE);
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
    126          
    127          	/* Configure SPIx pin: SCK, MOSI and MISO -------------------------*/
    128          	GPIO_InitStructure->GPIO_Pin =  SENSORS_SPI2_SCK_GPIO_PIN | SENSORS_SPI2_MISO_GPIO_PIN | SENSORS_SPI2_MOSI_GPIO_PIN; 
   \   00000020   0xF44F 0x4060      MOV      R0,#+57344
   \   00000024   0x6020             STR      R0,[R4, #+0]
    129          	GPIO_InitStructure->GPIO_Mode = GPIO_Mode_AF;
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0x7120             STRB     R0,[R4, #+4]
    130          	GPIO_InitStructure->GPIO_Speed = GPIO_Speed_50MHz;
   \   0000002A   0x7160             STRB     R0,[R4, #+5]
    131          	GPIO_InitStructure->GPIO_OType = GPIO_OType_PP;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x71A0             STRB     R0,[R4, #+6]
    132          	GPIO_InitStructure->GPIO_PuPd  = GPIO_PuPd_NOPULL;
   \   00000030   0x71E0             STRB     R0,[R4, #+7]
    133          	GPIO_Init(SENSORS_SPI2_GPIO_PORT, GPIO_InitStructure);
   \   00000032   0x.... 0x....      LDR.W    R6,??DataTable9_2  ;; 0x40020400
   \   00000036   0x4621             MOV      R1,R4
   \   00000038   0x4630             MOV      R0,R6
   \   0000003A   0x.... 0x....      BL       GPIO_Init
    134          
    135          	/* Connect SPIx pins to AF4 */
    136          	GPIO_PinAFConfig(SENSORS_SPI2_GPIO_PORT, SENSORS_SPI2_SCK_GPIO_PINSOURCE, SENSORS_GPIO_AF_SPI2);  
   \   0000003E   0x2205             MOVS     R2,#+5
   \   00000040   0x210D             MOVS     R1,#+13
   \   00000042   0x4630             MOV      R0,R6
   \   00000044   0x.... 0x....      BL       GPIO_PinAFConfig
    137          	GPIO_PinAFConfig(SENSORS_SPI2_GPIO_PORT, SENSORS_SPI2_MISO_GPIO_PINSOURCE, SENSORS_GPIO_AF_SPI2);  
   \   00000048   0x2205             MOVS     R2,#+5
   \   0000004A   0x210E             MOVS     R1,#+14
   \   0000004C   0x4630             MOV      R0,R6
   \   0000004E   0x.... 0x....      BL       GPIO_PinAFConfig
    138          	GPIO_PinAFConfig(SENSORS_SPI2_GPIO_PORT, SENSORS_SPI2_MOSI_GPIO_PINSOURCE, SENSORS_GPIO_AF_SPI2);  
   \   00000052   0x2205             MOVS     R2,#+5
   \   00000054   0x210F             MOVS     R1,#+15
   \   00000056   0x4630             MOV      R0,R6
   \   00000058   0x.... 0x....      BL       GPIO_PinAFConfig
    139          
    140          	IsInitedSpi2 = 1;
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x7068             STRB     R0,[R5, #+1]
    141          }
   \                     ??spi_master_init_gpio_spi2_0: (+1)
   \   00000060   0xBD70             POP      {R4-R6,PC}       ;; return
    142          

   \                                 In section .text, align 2, keep-with-next
    143          static SPI_TypeDef* spi_master_get_instance(spi_num_t spinum)
    144          {
    145          	//set SPI type according to required line
    146          	if(spinum == SPI_NUM1)
   \                     spi_master_get_instance: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0xD102             BNE.N    ??spi_master_get_instance_0
    147          		return SENSORS_SPI;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable9_3  ;; 0x40013000
   \   00000008   0x4770             BX       LR
    148          	else if(spinum == SPI_NUM2)
   \                     ??spi_master_get_instance_0: (+1)
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD102             BNE.N    ??spi_master_get_instance_1
    149          		return SENSORS_SPI2;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable9_4  ;; 0x40003800
   \   00000012   0x4770             BX       LR
    150          	else
    151          		return 0;
   \                     ??spi_master_get_instance_1: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x4770             BX       LR               ;; return
    152          }
    153          

   \                                 In section .text, align 2, keep-with-next
    154          static GPIO_TypeDef* spi_master_get_cs_port(SPI_TypeDef* spi)
    155          {
    156          	if(spi == SENSORS_SPI)
   \                     spi_master_get_cs_port: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable9_3  ;; 0x40013000
   \   00000004   0x4288             CMP      R0,R1
   \   00000006   0xD102             BNE.N    ??spi_master_get_cs_port_0
    157          		return SENSORS_CS_GPIO_PORT;
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable9_2  ;; 0x40020400
   \   0000000C   0x4770             BX       LR
    158          	else if(spi == SENSORS_SPI2)
   \                     ??spi_master_get_cs_port_0: (+1)
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable9_4  ;; 0x40003800
   \   00000012   0x4288             CMP      R0,R1
   \   00000014   0xD101             BNE.N    ??spi_master_get_cs_port_1
    159          		return SENSORS_CS2_GPIO_PORT;
   \   00000016   0x....             LDR.N    R0,??DataTable9_2  ;; 0x40020400
   \   00000018   0x4770             BX       LR
    160          	else
    161          		return 0;
   \                     ??spi_master_get_cs_port_1: (+1)
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x4770             BX       LR               ;; return
    162          }
    163          

   \                                 In section .text, align 2, keep-with-next
    164          static uint16_t spi_master_get_cs_pin(SPI_TypeDef* spi)
    165          {
    166          	if(spi == SENSORS_SPI)
   \                     spi_master_get_cs_pin: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable9_3  ;; 0x40013000
   \   00000002   0x4288             CMP      R0,R1
   \   00000004   0xD101             BNE.N    ??spi_master_get_cs_pin_0
    167          		return SENSORS_CS_GPIO_PIN;
   \   00000006   0x2040             MOVS     R0,#+64
   \   00000008   0x4770             BX       LR
    168          	else if(spi == SENSORS_SPI2)
   \                     ??spi_master_get_cs_pin_0: (+1)
   \   0000000A   0x....             LDR.N    R1,??DataTable9_4  ;; 0x40003800
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD102             BNE.N    ??spi_master_get_cs_pin_1
    169          		return SENSORS_CS2_GPIO_PIN;
   \   00000010   0xF44F 0x5080      MOV      R0,#+4096
   \   00000014   0x4770             BX       LR
    170          	else
    171          		return 0;
   \                     ??spi_master_get_cs_pin_1: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x4770             BX       LR               ;; return
    172          }
    173          

   \                                 In section .text, align 4, keep-with-next
    174          static uint16_t spi_master_get_prescaler_spi1(spi_speed_t speed)
    175          {
    176          	switch(speed)
   \                     spi_master_get_prescaler_spi1: (+1)
   \   00000000   0x2806             CMP      R0,#+6
   \   00000002   0xD813             BHI.N    ??spi_master_get_prescaler_spi1_1
   \   00000004   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??spi_master_get_prescaler_spi1_0:
   \   00000008   0x04 0x06          DC8      0x4,0x6,0x8,0xA
   \              0x08 0x0A    
   \   0000000C   0x0C 0x0E          DC8      0xC,0xE,0x10,0x0
   \              0x10 0x00    
    177          	{
    178          	case SPI_25MHZ:
    179          		return SPI_BaudRatePrescaler_4;
   \                     ??spi_master_get_prescaler_spi1_2: (+1)
   \   00000010   0x2008             MOVS     R0,#+8
   \   00000012   0x4770             BX       LR
    180          	case SPI_12MHZ:
    181          		return SPI_BaudRatePrescaler_8;
   \                     ??spi_master_get_prescaler_spi1_3: (+1)
   \   00000014   0x2010             MOVS     R0,#+16
   \   00000016   0x4770             BX       LR
    182          	case SPI_6MHZ:
    183          		return SPI_BaudRatePrescaler_16;
   \                     ??spi_master_get_prescaler_spi1_4: (+1)
   \   00000018   0x2018             MOVS     R0,#+24
   \   0000001A   0x4770             BX       LR
    184          	case SPI_3MHZ:
    185          		return SPI_BaudRatePrescaler_32;
   \                     ??spi_master_get_prescaler_spi1_5: (+1)
   \   0000001C   0x2020             MOVS     R0,#+32
   \   0000001E   0x4770             BX       LR
    186          	case SPI_1562KHZ:
    187          		return SPI_BaudRatePrescaler_64;
   \                     ??spi_master_get_prescaler_spi1_6: (+1)
   \   00000020   0x2028             MOVS     R0,#+40
   \   00000022   0x4770             BX       LR
    188          	case SPI_781KHZ:
    189          		return SPI_BaudRatePrescaler_128;
   \                     ??spi_master_get_prescaler_spi1_7: (+1)
   \   00000024   0x2030             MOVS     R0,#+48
   \   00000026   0x4770             BX       LR
    190          	case SPI_390KHZ:
    191          		return SPI_BaudRatePrescaler_256;
   \                     ??spi_master_get_prescaler_spi1_8: (+1)
   \   00000028   0x2038             MOVS     R0,#+56
   \   0000002A   0x4770             BX       LR
    192          	}
    193          	return 0;
   \                     ??spi_master_get_prescaler_spi1_1: (+1)
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x4770             BX       LR               ;; return
    194          }
    195          

   \                                 In section .text, align 4, keep-with-next
    196          static uint16_t spi_master_get_prescaler_spi2(spi_speed_t speed)
    197          {
    198          	switch(speed)
   \                     spi_master_get_prescaler_spi2: (+1)
   \   00000000   0x1E40             SUBS     R0,R0,#+1
   \   00000002   0x2805             CMP      R0,#+5
   \   00000004   0xD810             BHI.N    ??spi_master_get_prescaler_spi2_1
   \   00000006   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??spi_master_get_prescaler_spi2_0:
   \   0000000A   0x03 0x05          DC8      0x3,0x5,0x7,0x9
   \              0x07 0x09    
   \   0000000E   0x0B 0x0D          DC8      0xB,0xD
    199          	{
    200          	case SPI_25MHZ:
    201          		return SPI_BaudRatePrescaler_2;
    202          	case SPI_12MHZ:
    203          		return SPI_BaudRatePrescaler_4;
   \                     ??spi_master_get_prescaler_spi2_2: (+1)
   \   00000010   0x2008             MOVS     R0,#+8
   \   00000012   0x4770             BX       LR
    204          	case SPI_6MHZ:
    205          		return SPI_BaudRatePrescaler_8;
   \                     ??spi_master_get_prescaler_spi2_3: (+1)
   \   00000014   0x2010             MOVS     R0,#+16
   \   00000016   0x4770             BX       LR
    206          	case SPI_3MHZ:
    207          		return SPI_BaudRatePrescaler_16;
   \                     ??spi_master_get_prescaler_spi2_4: (+1)
   \   00000018   0x2018             MOVS     R0,#+24
   \   0000001A   0x4770             BX       LR
    208          	case SPI_1562KHZ:
    209          		return SPI_BaudRatePrescaler_32;
   \                     ??spi_master_get_prescaler_spi2_5: (+1)
   \   0000001C   0x2020             MOVS     R0,#+32
   \   0000001E   0x4770             BX       LR
    210          	case SPI_781KHZ:
    211          		return SPI_BaudRatePrescaler_64;
   \                     ??spi_master_get_prescaler_spi2_6: (+1)
   \   00000020   0x2028             MOVS     R0,#+40
   \   00000022   0x4770             BX       LR
    212          	case SPI_390KHZ:
    213          		return SPI_BaudRatePrescaler_128;
   \                     ??spi_master_get_prescaler_spi2_7: (+1)
   \   00000024   0x2030             MOVS     R0,#+48
   \   00000026   0x4770             BX       LR
    214          	}
    215          	return 0;
   \                     ??spi_master_get_prescaler_spi2_1: (+1)
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x4770             BX       LR               ;; return
    216          }
    217          

   \                                 In section .text, align 2, keep-with-next
    218          static uint16_t spi_master_get_prescaler(SPI_TypeDef* spi, spi_speed_t speed)
    219          {
    220          	// According to speed and spi num, we select which prescaler to apply
    221          	// NB: SPI1 on APB2(100MHz max), SPI2 on APB1(50MHz max)
    222          	if(spi == SENSORS_SPI)
   \                     spi_master_get_prescaler: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable9_3  ;; 0x40013000
   \   00000002   0x4290             CMP      R0,R2
   \   00000004   0xD101             BNE.N    ??spi_master_get_prescaler_0
    223          		return spi_master_get_prescaler_spi1(speed);
   \   00000006   0x4608             MOV      R0,R1
   \   00000008   0x....             B.N      spi_master_get_prescaler_spi1
    224          	else if(spi == SENSORS_SPI2)
   \                     ??spi_master_get_prescaler_0: (+1)
   \   0000000A   0x....             LDR.N    R2,??DataTable9_4  ;; 0x40003800
   \   0000000C   0x4290             CMP      R0,R2
   \   0000000E   0xD101             BNE.N    ??spi_master_get_prescaler_1
    225          		return spi_master_get_prescaler_spi2(speed);
   \   00000010   0x4608             MOV      R0,R1
   \   00000012   0x....             B.N      spi_master_get_prescaler_spi2
    226          	return 0;
   \                     ??spi_master_get_prescaler_1: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x4770             BX       LR               ;; return
    227          }
    228          
    229          /**
    230            * @brief  Basic management of the timeout situation.
    231            * @param  None.
    232            * @retval None.
    233            */

   \                                 In section .text, align 2, keep-with-next
    234          static uint32_t SPIx_TIMEOUT_UserCallback(char value)
    235          {
    236          	return value;
   \                     SPIx_TIMEOUT_UserCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    237          }
    238          
    239          /********************************* Public Prototypes **************************/
    240          

   \                                 In section .text, align 2, keep-with-next
    241          void spi_master_init(spi_num_t spinum, spi_speed_t speed)
    242          {
   \                     spi_master_init: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x460D             MOV      R5,R1
    243          	GPIO_InitTypeDef GPIO_InitStructure;
    244          	SPI_InitTypeDef  SPI_InitStructure;
    245          	SPI_TypeDef* spi;
    246          
    247          	spi = spi_master_get_instance(spinum);
   \   00000006   0x.... 0x....      BL       spi_master_get_instance
   \   0000000A   0x4604             MOV      R4,R0
    248          
    249          	if(spi == SENSORS_SPI)
   \   0000000C   0x....             LDR.N    R0,??DataTable9_3  ;; 0x40013000
   \   0000000E   0x4284             CMP      R4,R0
   \   00000010   0xD103             BNE.N    ??spi_master_init_0
    250          		spi_master_init_gpio_spi1(&GPIO_InitStructure);
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x.... 0x....      BL       spi_master_init_gpio_spi1
   \   00000018   0xE005             B.N      ??spi_master_init_1
    251          	else if(spi == SENSORS_SPI2)
   \                     ??spi_master_init_0: (+1)
   \   0000001A   0x....             LDR.N    R0,??DataTable9_4  ;; 0x40003800
   \   0000001C   0x4284             CMP      R4,R0
   \   0000001E   0xD102             BNE.N    ??spi_master_init_1
    252          		spi_master_init_gpio_spi2(&GPIO_InitStructure);
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x.... 0x....      BL       spi_master_init_gpio_spi2
    253          
    254          	/* Configure ChipSelect pin only if it is not configured previously--------------*/
    255          	GPIO_InitStructure.GPIO_Pin = spi_master_get_cs_pin(spi);
   \                     ??spi_master_init_1: (+1)
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       spi_master_get_cs_pin
   \   0000002C   0x9000             STR      R0,[SP, #+0]
    256          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xF88D 0x0004      STRB     R0,[SP, #+4]
    257          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xF88D 0x0005      STRB     R0,[SP, #+5]
    258          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
   \   0000003A   0xF88D 0x0006      STRB     R0,[SP, #+6]
    259          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0xF88D 0x0007      STRB     R0,[SP, #+7]
    260          	GPIO_Init(spi_master_get_cs_port(spi), &GPIO_InitStructure);
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       spi_master_get_cs_port
   \   0000004A   0x4669             MOV      R1,SP
   \   0000004C   0x.... 0x....      BL       GPIO_Init
    261          	/* Initialize the SPI peripheral : WARNING CLK MAX is 6,4 MHz */
    262          	SPI_StructInit(&SPI_InitStructure);
   \   00000050   0xA802             ADD      R0,SP,#+8
   \   00000052   0x.... 0x....      BL       SPI_StructInit
    263          	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
   \   00000056   0xF44F 0x7082      MOV      R0,#+260
   \   0000005A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    264          	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    265          	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
   \   00000064   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    266          	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
   \   00000068   0x2002             MOVS     R0,#+2
   \   0000006A   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    267          	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    268          	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0xF8AD 0x0016      STRH     R0,[SP, #+22]
    269          	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
   \   0000007A   0xF44F 0x7000      MOV      R0,#+512
   \   0000007E   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    270          	SPI_InitStructure.SPI_BaudRatePrescaler = spi_master_get_prescaler(spi, speed);
   \   00000082   0x4629             MOV      R1,R5
   \   00000084   0x4620             MOV      R0,R4
   \   00000086   0x.... 0x....      BL       spi_master_get_prescaler
   \   0000008A   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    271          	SPI_Init(spi, &SPI_InitStructure);
   \   0000008E   0xA902             ADD      R1,SP,#+8
   \   00000090   0x4620             MOV      R0,R4
   \   00000092   0x.... 0x....      BL       SPI_Init
    272          	/* Enable the SPI peripheral */
    273          	GPIO_SetBits(spi_master_get_cs_port(spi), spi_master_get_cs_pin(spi));
   \   00000096   0x4620             MOV      R0,R4
   \   00000098   0x.... 0x....      BL       spi_master_get_cs_pin
   \   0000009C   0x4605             MOV      R5,R0
   \   0000009E   0x4620             MOV      R0,R4
   \   000000A0   0x.... 0x....      BL       spi_master_get_cs_port
   \   000000A4   0x4629             MOV      R1,R5
   \   000000A6   0x.... 0x....      BL       GPIO_SetBits
    274          	SPI_Cmd(spi, ENABLE);  
   \   000000AA   0x2101             MOVS     R1,#+1
   \   000000AC   0x4620             MOV      R0,R4
   \   000000AE   0x.... 0x....      BL       SPI_Cmd
    275          }
   \   000000B2   0xB007             ADD      SP,SP,#+28
   \   000000B4   0xBD30             POP      {R4,R5,PC}       ;; return
    276          

   \                                 In section .text, align 2, keep-with-next
    277          void spi_master_deinit(spi_num_t spinum)
    278          {
   \                     spi_master_deinit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    279          	SPI_TypeDef* spi;
    280          
    281          	spi = spi_master_get_instance(spinum);
   \   00000002   0x.... 0x....      BL       spi_master_get_instance
    282          	if(spi == SENSORS_SPI) {
   \   00000006   0x....             LDR.N    R1,??DataTable9_3  ;; 0x40013000
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD103             BNE.N    ??spi_master_deinit_0
    283          		IsInitedSpi1 = 0;
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x....             LDR.N    R2,??DataTable9
   \   00000010   0x7011             STRB     R1,[R2, #+0]
   \   00000012   0xE005             B.N      ??spi_master_deinit_1
    284          	}
    285          	else if(spi == SENSORS_SPI2) {
   \                     ??spi_master_deinit_0: (+1)
   \   00000014   0x....             LDR.N    R1,??DataTable9_4  ;; 0x40003800
   \   00000016   0x4288             CMP      R0,R1
   \   00000018   0xD102             BNE.N    ??spi_master_deinit_1
    286          		IsInitedSpi2 = 0;
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x....             LDR.N    R2,??DataTable9
   \   0000001E   0x7051             STRB     R1,[R2, #+1]
    287          	}
    288          	SPI_Cmd(spi, DISABLE);
   \                     ??spi_master_deinit_1: (+1)
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0xE8BD 0x4004      POP      {R2,LR}
   \   00000026   0x.... 0x....      B.W      SPI_Cmd
    289          }
    290          

   \                                 In section .text, align 2, keep-with-next
    291          unsigned long spi_master_write_register(spi_num_t spinum, unsigned char register_addr,
    292          		unsigned short len, const unsigned char *value)
    293          {
   \                     spi_master_write_register: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x4688             MOV      R8,R1
   \   00000008   0x4614             MOV      R4,R2
   \   0000000A   0x461D             MOV      R5,R3
    294          	int i;
    295          	SPI_TypeDef* spi;
    296          
    297          	spi = spi_master_get_instance(spinum);
   \   0000000C   0x.... 0x....      BL       spi_master_get_instance
   \   00000010   0x4606             MOV      R6,R0
    298          
    299          	__IO uint32_t SPITimeout = SPIx_LONG_TIMEOUT;
   \   00000012   0x....             LDR.N    R0,??DataTable9_5  ;; 0x41eb0
   \   00000014   0x9000             STR      R0,[SP, #+0]
    300          
    301          	GPIO_ResetBits(spi_master_get_cs_port(spi), spi_master_get_cs_pin(spi));
   \   00000016   0x4630             MOV      R0,R6
   \   00000018   0x.... 0x....      BL       spi_master_get_cs_pin
   \   0000001C   0x4607             MOV      R7,R0
   \   0000001E   0x4630             MOV      R0,R6
   \   00000020   0x.... 0x....      BL       spi_master_get_cs_port
   \   00000024   0x4639             MOV      R1,R7
   \   00000026   0x.... 0x....      BL       GPIO_ResetBits
    302          
    303          	WAIT_FOR_FLAG (spi, SPI_I2S_FLAG_TXE, SPIx_FLAG_TIMEOUT, 0);
   \   0000002A   0xF44F 0x7761      MOV      R7,#+900
   \   0000002E   0x9700             STR      R7,[SP, #+0]
   \                     ??spi_master_write_register_0: (+1)
   \   00000030   0x2102             MOVS     R1,#+2
   \   00000032   0x4630             MOV      R0,R6
   \   00000034   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD108             BNE.N    ??spi_master_write_register_1
   \   0000003C   0x9800             LDR      R0,[SP, #+0]
   \   0000003E   0x1E41             SUBS     R1,R0,#+1
   \   00000040   0x9100             STR      R1,[SP, #+0]
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD1F4             BNE.N    ??spi_master_write_register_0
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xE8BD 0x41F6      POP      {R1,R2,R4-R8,LR}
   \   0000004C   0x....             B.N      SPIx_TIMEOUT_UserCallback
    304          	SPI_I2S_SendData(spi, register_addr);
   \                     ??spi_master_write_register_1: (+1)
   \   0000004E   0x4641             MOV      R1,R8
   \   00000050   0x4630             MOV      R0,R6
   \   00000052   0x.... 0x....      BL       SPI_I2S_SendData
    305          
    306          	WAIT_FOR_FLAG (spi, SPI_I2S_FLAG_RXNE, SPIx_FLAG_TIMEOUT, 1);
   \   00000056   0x9700             STR      R7,[SP, #+0]
   \                     ??spi_master_write_register_2: (+1)
   \   00000058   0x2101             MOVS     R1,#+1
   \   0000005A   0x4630             MOV      R0,R6
   \   0000005C   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD108             BNE.N    ??spi_master_write_register_3
   \   00000064   0x9800             LDR      R0,[SP, #+0]
   \   00000066   0x1E41             SUBS     R1,R0,#+1
   \   00000068   0x9100             STR      R1,[SP, #+0]
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD1F4             BNE.N    ??spi_master_write_register_2
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0xE8BD 0x41F6      POP      {R1,R2,R4-R8,LR}
   \   00000074   0x....             B.N      SPIx_TIMEOUT_UserCallback
    307          	SPI_I2S_ReceiveData(spi);
   \                     ??spi_master_write_register_3: (+1)
   \   00000076   0x4630             MOV      R0,R6
   \   00000078   0x.... 0x....      BL       SPI_I2S_ReceiveData
    308          
    309          	for (i = 0; i < len; i++) {
   \   0000007C   0xF04F 0x0800      MOV      R8,#+0
   \   00000080   0xE004             B.N      ??spi_master_write_register_4
    310          		WAIT_FOR_FLAG (spi, SPI_I2S_FLAG_TXE, SPIx_FLAG_TIMEOUT, 2); 
    311          		SPI_I2S_SendData(spi, value[i]);
    312          		WAIT_FOR_FLAG (spi, SPI_I2S_FLAG_RXNE, SPIx_FLAG_TIMEOUT, 3);
    313          		SPI_I2S_ReceiveData(spi);
   \                     ??spi_master_write_register_5: (+1)
   \   00000082   0x4630             MOV      R0,R6
   \   00000084   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000088   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??spi_master_write_register_4: (+1)
   \   0000008C   0x45A0             CMP      R8,R4
   \   0000008E   0xDA24             BGE.N    ??spi_master_write_register_6
   \   00000090   0x9700             STR      R7,[SP, #+0]
   \                     ??spi_master_write_register_7: (+1)
   \   00000092   0x2102             MOVS     R1,#+2
   \   00000094   0x4630             MOV      R0,R6
   \   00000096   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD108             BNE.N    ??spi_master_write_register_8
   \   0000009E   0x9800             LDR      R0,[SP, #+0]
   \   000000A0   0x1E41             SUBS     R1,R0,#+1
   \   000000A2   0x9100             STR      R1,[SP, #+0]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD1F4             BNE.N    ??spi_master_write_register_7
   \   000000A8   0x2002             MOVS     R0,#+2
   \   000000AA   0xE8BD 0x41F6      POP      {R1,R2,R4-R8,LR}
   \   000000AE   0x....             B.N      SPIx_TIMEOUT_UserCallback
   \                     ??spi_master_write_register_8: (+1)
   \   000000B0   0xF815 0x1008      LDRB     R1,[R5, R8]
   \   000000B4   0x4630             MOV      R0,R6
   \   000000B6   0x.... 0x....      BL       SPI_I2S_SendData
   \   000000BA   0x9700             STR      R7,[SP, #+0]
   \                     ??spi_master_write_register_9: (+1)
   \   000000BC   0x2101             MOVS     R1,#+1
   \   000000BE   0x4630             MOV      R0,R6
   \   000000C0   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000C4   0x2800             CMP      R0,#+0
   \   000000C6   0xD1DC             BNE.N    ??spi_master_write_register_5
   \   000000C8   0x9800             LDR      R0,[SP, #+0]
   \   000000CA   0x1E41             SUBS     R1,R0,#+1
   \   000000CC   0x9100             STR      R1,[SP, #+0]
   \   000000CE   0x2800             CMP      R0,#+0
   \   000000D0   0xD1F4             BNE.N    ??spi_master_write_register_9
   \   000000D2   0x2003             MOVS     R0,#+3
   \   000000D4   0xE8BD 0x41F6      POP      {R1,R2,R4-R8,LR}
   \   000000D8   0x....             B.N      SPIx_TIMEOUT_UserCallback
    314          	}
    315          
    316          	GPIO_SetBits(spi_master_get_cs_port(spi), spi_master_get_cs_pin(spi));
   \                     ??spi_master_write_register_6: (+1)
   \   000000DA   0x4630             MOV      R0,R6
   \   000000DC   0x.... 0x....      BL       spi_master_get_cs_pin
   \   000000E0   0x4604             MOV      R4,R0
   \   000000E2   0x4630             MOV      R0,R6
   \   000000E4   0x.... 0x....      BL       spi_master_get_cs_port
   \   000000E8   0x4621             MOV      R1,R4
   \   000000EA   0x.... 0x....      BL       GPIO_SetBits
    317          	return 0;
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    318          }
    319          

   \                                 In section .text, align 2, keep-with-next
    320          unsigned long spi_master_read_register(spi_num_t spinum, unsigned char register_addr,
    321          		unsigned short len, unsigned char *value)
    322          {
   \                     spi_master_read_register: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x460F             MOV      R7,R1
   \   00000008   0x4614             MOV      R4,R2
   \   0000000A   0x461D             MOV      R5,R3
    323          	int i;
    324          	SPI_TypeDef* spi;
    325          
    326          	spi = spi_master_get_instance(spinum);
   \   0000000C   0x.... 0x....      BL       spi_master_get_instance
   \   00000010   0x4606             MOV      R6,R0
    327          
    328          	__IO uint32_t  SPITimeout = SPIx_LONG_TIMEOUT;
   \   00000012   0x....             LDR.N    R0,??DataTable9_5  ;; 0x41eb0
   \   00000014   0x9000             STR      R0,[SP, #+0]
    329           
    330          	register_addr = READ_BIT_MASK | register_addr;
   \   00000016   0xF047 0x0880      ORR      R8,R7,#0x80
    331          
    332          	GPIO_ResetBits(spi_master_get_cs_port(spi), spi_master_get_cs_pin(spi)); 
   \   0000001A   0x4630             MOV      R0,R6
   \   0000001C   0x.... 0x....      BL       spi_master_get_cs_pin
   \   00000020   0x4607             MOV      R7,R0
   \   00000022   0x4630             MOV      R0,R6
   \   00000024   0x.... 0x....      BL       spi_master_get_cs_port
   \   00000028   0x4639             MOV      R1,R7
   \   0000002A   0x.... 0x....      BL       GPIO_ResetBits
    333          
    334          	WAIT_FOR_FLAG (spi, SPI_I2S_FLAG_TXE, SPIx_FLAG_TIMEOUT, 4); 
   \   0000002E   0xF44F 0x7761      MOV      R7,#+900
   \   00000032   0x9700             STR      R7,[SP, #+0]
   \                     ??spi_master_read_register_0: (+1)
   \   00000034   0x2102             MOVS     R1,#+2
   \   00000036   0x4630             MOV      R0,R6
   \   00000038   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD108             BNE.N    ??spi_master_read_register_1
   \   00000040   0x9800             LDR      R0,[SP, #+0]
   \   00000042   0x1E41             SUBS     R1,R0,#+1
   \   00000044   0x9100             STR      R1,[SP, #+0]
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD1F4             BNE.N    ??spi_master_read_register_0
   \   0000004A   0x2004             MOVS     R0,#+4
   \   0000004C   0xE8BD 0x41F6      POP      {R1,R2,R4-R8,LR}
   \   00000050   0x....             B.N      SPIx_TIMEOUT_UserCallback
    335          	SPI_I2S_SendData(spi, register_addr);
   \                     ??spi_master_read_register_1: (+1)
   \   00000052   0x4641             MOV      R1,R8
   \   00000054   0x4630             MOV      R0,R6
   \   00000056   0x.... 0x....      BL       SPI_I2S_SendData
    336          	WAIT_FOR_FLAG (spi, SPI_I2S_FLAG_RXNE, SPIx_FLAG_TIMEOUT, 5);
   \   0000005A   0x9700             STR      R7,[SP, #+0]
   \                     ??spi_master_read_register_2: (+1)
   \   0000005C   0x2101             MOVS     R1,#+1
   \   0000005E   0x4630             MOV      R0,R6
   \   00000060   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD108             BNE.N    ??spi_master_read_register_3
   \   00000068   0x9800             LDR      R0,[SP, #+0]
   \   0000006A   0x1E41             SUBS     R1,R0,#+1
   \   0000006C   0x9100             STR      R1,[SP, #+0]
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD1F4             BNE.N    ??spi_master_read_register_2
   \   00000072   0x2005             MOVS     R0,#+5
   \   00000074   0xE8BD 0x41F6      POP      {R1,R2,R4-R8,LR}
   \   00000078   0x....             B.N      SPIx_TIMEOUT_UserCallback
    337          	SPI_I2S_ReceiveData(spi); //Clear RXNE bit
   \                     ??spi_master_read_register_3: (+1)
   \   0000007A   0x4630             MOV      R0,R6
   \   0000007C   0x.... 0x....      BL       SPI_I2S_ReceiveData
    338          
    339          	for (i = 0; i < len; i++) {
   \   00000080   0xF04F 0x0800      MOV      R8,#+0
   \   00000084   0xE006             B.N      ??spi_master_read_register_4
    340          		WAIT_FOR_FLAG (spi, SPI_I2S_FLAG_TXE, SPIx_FLAG_TIMEOUT, 6); 
    341          		SPI_I2S_SendData(spi, 0x00); //Dummy byte to generate clock
    342          		WAIT_FOR_FLAG (spi, SPI_I2S_FLAG_RXNE, SPIx_FLAG_TIMEOUT, 7);
    343          		value[i] = SPI_I2S_ReceiveData(spi);
   \                     ??spi_master_read_register_5: (+1)
   \   00000086   0x4630             MOV      R0,R6
   \   00000088   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   0000008C   0xF805 0x0008      STRB     R0,[R5, R8]
   \   00000090   0xF108 0x0801      ADD      R8,R8,#+1
   \                     ??spi_master_read_register_4: (+1)
   \   00000094   0x45A0             CMP      R8,R4
   \   00000096   0xDA23             BGE.N    ??spi_master_read_register_6
   \   00000098   0x9700             STR      R7,[SP, #+0]
   \                     ??spi_master_read_register_7: (+1)
   \   0000009A   0x2102             MOVS     R1,#+2
   \   0000009C   0x4630             MOV      R0,R6
   \   0000009E   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD108             BNE.N    ??spi_master_read_register_8
   \   000000A6   0x9800             LDR      R0,[SP, #+0]
   \   000000A8   0x1E41             SUBS     R1,R0,#+1
   \   000000AA   0x9100             STR      R1,[SP, #+0]
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD1F4             BNE.N    ??spi_master_read_register_7
   \   000000B0   0x2006             MOVS     R0,#+6
   \   000000B2   0xE8BD 0x41F6      POP      {R1,R2,R4-R8,LR}
   \   000000B6   0x....             B.N      SPIx_TIMEOUT_UserCallback
   \                     ??spi_master_read_register_8: (+1)
   \   000000B8   0x2100             MOVS     R1,#+0
   \   000000BA   0x4630             MOV      R0,R6
   \   000000BC   0x.... 0x....      BL       SPI_I2S_SendData
   \   000000C0   0x9700             STR      R7,[SP, #+0]
   \                     ??spi_master_read_register_9: (+1)
   \   000000C2   0x2101             MOVS     R1,#+1
   \   000000C4   0x4630             MOV      R0,R6
   \   000000C6   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   000000CA   0x2800             CMP      R0,#+0
   \   000000CC   0xD1DB             BNE.N    ??spi_master_read_register_5
   \   000000CE   0x9800             LDR      R0,[SP, #+0]
   \   000000D0   0x1E41             SUBS     R1,R0,#+1
   \   000000D2   0x9100             STR      R1,[SP, #+0]
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xD1F4             BNE.N    ??spi_master_read_register_9
   \   000000D8   0x2007             MOVS     R0,#+7
   \   000000DA   0xE8BD 0x41F6      POP      {R1,R2,R4-R8,LR}
   \   000000DE   0x....             B.N      SPIx_TIMEOUT_UserCallback
    344          	}
    345          
    346          	GPIO_SetBits(spi_master_get_cs_port(spi), spi_master_get_cs_pin(spi));
   \                     ??spi_master_read_register_6: (+1)
   \   000000E0   0x4630             MOV      R0,R6
   \   000000E2   0x.... 0x....      BL       spi_master_get_cs_pin
   \   000000E6   0x4604             MOV      R4,R0
   \   000000E8   0x4630             MOV      R0,R6
   \   000000EA   0x.... 0x....      BL       spi_master_get_cs_port
   \   000000EE   0x4621             MOV      R1,R4
   \   000000F0   0x.... 0x....      BL       GPIO_SetBits
    347          	return 0;
   \   000000F4   0x2000             MOVS     R0,#+0
   \   000000F6   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    348          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     IsInitedSpi1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x40013000         DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x00041EB0         DC32     0x41eb0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SPIx_TIMEOUT_UserCallback
       8   spi_master_deinit
         0   -> SPI_Cmd
         8   -> spi_master_get_instance
       0   spi_master_get_cs_pin
       0   spi_master_get_cs_port
       0   spi_master_get_instance
       0   spi_master_get_prescaler
         0   -> spi_master_get_prescaler_spi1
         0   -> spi_master_get_prescaler_spi2
       0   spi_master_get_prescaler_spi1
       0   spi_master_get_prescaler_spi2
      40   spi_master_init
        40   -> GPIO_Init
        40   -> GPIO_SetBits
        40   -> SPI_Cmd
        40   -> SPI_Init
        40   -> SPI_StructInit
        40   -> spi_master_get_cs_pin
        40   -> spi_master_get_cs_port
        40   -> spi_master_get_instance
        40   -> spi_master_get_prescaler
        40   -> spi_master_init_gpio_spi1
        40   -> spi_master_init_gpio_spi2
      16   spi_master_init_gpio_spi1
        16   -> GPIO_Init
        16   -> GPIO_PinAFConfig
        16   -> RCC_AHB1PeriphClockCmd
        16   -> RCC_APB2PeriphClockCmd
      16   spi_master_init_gpio_spi2
        16   -> GPIO_Init
        16   -> GPIO_PinAFConfig
        16   -> RCC_AHB1PeriphClockCmd
        16   -> RCC_APB1PeriphClockCmd
      32   spi_master_read_register
        32   -> GPIO_ResetBits
        32   -> GPIO_SetBits
        32   -> SPI_I2S_GetFlagStatus
        32   -> SPI_I2S_ReceiveData
        32   -> SPI_I2S_SendData
         0   -> SPIx_TIMEOUT_UserCallback
        32   -> spi_master_get_cs_pin
        32   -> spi_master_get_cs_port
        32   -> spi_master_get_instance
      32   spi_master_write_register
        32   -> GPIO_ResetBits
        32   -> GPIO_SetBits
        32   -> SPI_I2S_GetFlagStatus
        32   -> SPI_I2S_ReceiveData
        32   -> SPI_I2S_SendData
         0   -> SPIx_TIMEOUT_UserCallback
        32   -> spi_master_get_cs_pin
        32   -> spi_master_get_cs_port
        32   -> spi_master_get_instance


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       2  IsInitedSpi1
          IsInitedSpi2
       2  SPIx_TIMEOUT_UserCallback
      42  spi_master_deinit
      26  spi_master_get_cs_pin
      30  spi_master_get_cs_port
      24  spi_master_get_instance
      24  spi_master_get_prescaler
      48  spi_master_get_prescaler_spi1
      44  spi_master_get_prescaler_spi2
     182  spi_master_init
      96  spi_master_init_gpio_spi1
      98  spi_master_init_gpio_spi2
     250  spi_master_read_register
     244  spi_master_write_register

 
     2 bytes in section .bss
 1 134 bytes in section .text
 
 1 134 bytes of CODE memory
     2 bytes of DATA memory

Errors: none
Warnings: none
