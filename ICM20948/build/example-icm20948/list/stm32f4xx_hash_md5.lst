###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.2.11706/W32 for ARM       22/Dec/2017  10:34:36
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\stm32f4x\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_hash_md5.c
#    Command line =  
#        C:\Users\prasa\Documents\1.0.0\sources\stm32f4x\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_hash_md5.c
#        -D IAR_COMPILER -D __inline=inline -D INV_MSG_ENABLE -D ASSERT -D
#        NUCLEO -D USE_STDPERIPH_DRIVER -D USE_HSE_BYPASS -D HSE_VALUE=8000000
#        -D STM32F411xE -lC
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list
#        --diag_suppress Pa050 -o
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 --silent --warnings_are_errors -e
#        --char_is_signed --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../board-hal\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Core\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Device\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/STM32F4xx_StdPeriph_Driver/inc\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/Images\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/DynamicProtocol\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list\stm32f4xx_hash_md5.lst
#    Object file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj\stm32f4xx_hash_md5.o
#
###############################################################################

C:\Users\prasa\Documents\1.0.0\sources\stm32f4x\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_hash_md5.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_hash_md5.c
      4            * @author  MCD Application Team
      5            * @version V1.6.1
      6            * @date    21-October-2015
      7            * @brief   This file provides high level functions to compute the HASH MD5 and
      8            *          HMAC MD5 Digest of an input message.
      9            *          It uses the stm32f4xx_hash.c/.h drivers to access the STM32F4xx HASH
     10            *          peripheral.
     11            *
     12          @verbatim
     13           ===================================================================
     14                            ##### How to use this driver #####
     15           ===================================================================
     16           [..]
     17             (#) Enable The HASH controller clock using 
     18                 RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE); function.
     19            
     20             (#) Calculate the HASH MD5 Digest using HASH_MD5() function.
     21            
     22             (#) Calculate the HMAC MD5 Digest using HMAC_MD5() function.
     23            
     24          @endverbatim
     25            *
     26            ******************************************************************************
     27            * @attention
     28            *
     29            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     30            *
     31            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     32            * You may not use this file except in compliance with the License.
     33            * You may obtain a copy of the License at:
     34            *
     35            *        http://www.st.com/software_license_agreement_liberty_v2
     36            *
     37            * Unless required by applicable law or agreed to in writing, software 
     38            * distributed under the License is distributed on an "AS IS" BASIS, 
     39            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     40            * See the License for the specific language governing permissions and
     41            * limitations under the License.
     42            *
     43            ******************************************************************************
     44            */
     45          
     46          /* Includes ------------------------------------------------------------------*/
     47          #include "stm32f4xx_hash.h"
     48          
     49          /** @addtogroup STM32F4xx_StdPeriph_Driver
     50            * @{
     51            */
     52          
     53          /** @defgroup HASH 
     54            * @brief HASH driver modules
     55            * @{
     56            */
     57          
     58          /* Private typedef -----------------------------------------------------------*/
     59          /* Private define ------------------------------------------------------------*/
     60          #define MD5BUSY_TIMEOUT    ((uint32_t) 0x00010000)
     61          
     62          /* Private macro -------------------------------------------------------------*/
     63          /* Private variables ---------------------------------------------------------*/
     64          /* Private function prototypes -----------------------------------------------*/
     65          /* Private functions ---------------------------------------------------------*/
     66          
     67          /** @defgroup HASH_Private_Functions
     68            * @{
     69            */ 
     70          
     71          /** @defgroup HASH_Group7 High Level MD5 functions
     72           *  @brief   High Level MD5 Hash and HMAC functions 
     73           *
     74          @verbatim   
     75           ===============================================================================
     76                        ##### High Level MD5 Hash and HMAC functions #####
     77           ===============================================================================
     78          
     79          
     80          @endverbatim
     81            * @{
     82            */
     83          
     84          /**
     85            * @brief  Compute the HASH MD5 digest.
     86            * @param  Input: pointer to the Input buffer to be treated.
     87            * @param  Ilen: length of the Input buffer.
     88            * @param  Output: the returned digest
     89            * @retval An ErrorStatus enumeration value:
     90            *          - SUCCESS: digest computation done
     91            *          - ERROR: digest computation failed
     92            */

   \                                 In section .text, align 2, keep-with-next
     93          ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
     94          {
   \                     HASH_MD5: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB08E             SUB      SP,SP,#+56
   \   00000006   0x4680             MOV      R8,R0
   \   00000008   0x460E             MOV      R6,R1
   \   0000000A   0x4614             MOV      R4,R2
     95            HASH_InitTypeDef MD5_HASH_InitStructure;
     96            HASH_MsgDigest MD5_MessageDigest;
     97            __IO uint16_t nbvalidbitsdata = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
     98            uint32_t i = 0;
   \   00000012   0x4607             MOV      R7,R0
     99            __IO uint32_t counter = 0;
   \   00000014   0x9000             STR      R0,[SP, #+0]
    100            uint32_t busystatus = 0;
    101            ErrorStatus status = SUCCESS;
   \   00000016   0x2501             MOVS     R5,#+1
    102            uint32_t inputaddr  = (uint32_t)Input;
    103            uint32_t outputaddr = (uint32_t)Output;
    104          
    105          
    106            /* Number of valid bits in last word of the Input data */
    107            nbvalidbitsdata = 8 * (Ilen % 4);
   \   00000018   0x00F0             LSLS     R0,R6,#+3
   \   0000001A   0xF000 0x0018      AND      R0,R0,#0x18
   \   0000001E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    108          
    109            /* HASH peripheral initialization */
    110            HASH_DeInit();
   \   00000022   0x.... 0x....      BL       HASH_DeInit
    111          
    112            /* HASH Configuration */
    113            MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
   \   00000026   0x2080             MOVS     R0,#+128
   \   00000028   0x9002             STR      R0,[SP, #+8]
    114            MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
   \   0000002A   0x4638             MOV      R0,R7
   \   0000002C   0x9003             STR      R0,[SP, #+12]
    115            MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
   \   0000002E   0x2020             MOVS     R0,#+32
   \   00000030   0x9004             STR      R0,[SP, #+16]
    116            HASH_Init(&MD5_HASH_InitStructure);
   \   00000032   0xA802             ADD      R0,SP,#+8
   \   00000034   0x.... 0x....      BL       HASH_Init
    117          
    118            /* Configure the number of valid bits in last word of the data */
    119            HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
   \   00000038   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000003C   0x.... 0x....      BL       HASH_SetLastWordValidBitsNbr
    120          
    121            /* Write the Input block in the IN FIFO */
    122            for(i=0; i<Ilen; i+=4)
   \   00000040   0xE006             B.N      ??HASH_MD5_0
    123            {
    124              HASH_DataIn(*(uint32_t*)inputaddr);
   \                     ??HASH_MD5_1: (+1)
   \   00000042   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000046   0x.... 0x....      BL       HASH_DataIn
    125              inputaddr+=4;
   \   0000004A   0xF108 0x0804      ADD      R8,R8,#+4
    126            }
   \   0000004E   0x1D3F             ADDS     R7,R7,#+4
   \                     ??HASH_MD5_0: (+1)
   \   00000050   0x42B7             CMP      R7,R6
   \   00000052   0xD3F6             BCC.N    ??HASH_MD5_1
    127          
    128            /* Start the HASH processor */
    129            HASH_StartDigest();
   \   00000054   0x.... 0x....      BL       HASH_StartDigest
    130          
    131            /* wait until the Busy flag is RESET */
    132            do
    133            {
    134              busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
   \                     ??HASH_MD5_2: (+1)
   \   00000058   0x2008             MOVS     R0,#+8
   \   0000005A   0x.... 0x....      BL       HASH_GetFlagStatus
    135              counter++;
   \   0000005E   0x9900             LDR      R1,[SP, #+0]
   \   00000060   0x1C49             ADDS     R1,R1,#+1
   \   00000062   0x9100             STR      R1,[SP, #+0]
    136            }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
   \   00000064   0x9900             LDR      R1,[SP, #+0]
   \   00000066   0xF5B1 0x3F80      CMP      R1,#+65536
   \   0000006A   0xD001             BEQ.N    ??HASH_MD5_3
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD1F3             BNE.N    ??HASH_MD5_2
    137          
    138            if (busystatus != RESET)
   \                     ??HASH_MD5_3: (+1)
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD001             BEQ.N    ??HASH_MD5_4
    139            {
    140               status = ERROR;
   \   00000074   0x2500             MOVS     R5,#+0
   \   00000076   0xE011             B.N      ??HASH_MD5_5
    141            }
    142            else
    143            {
    144              /* Read the message digest */
    145              HASH_GetDigest(&MD5_MessageDigest);
   \                     ??HASH_MD5_4: (+1)
   \   00000078   0xA806             ADD      R0,SP,#+24
   \   0000007A   0x.... 0x....      BL       HASH_GetDigest
    146              *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
   \   0000007E   0x9806             LDR      R0,[SP, #+24]
   \   00000080   0xBA00             REV      R0,R0
   \   00000082   0x6020             STR      R0,[R4, #+0]
    147              outputaddr+=4;
   \   00000084   0x1D20             ADDS     R0,R4,#+4
    148              *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
   \   00000086   0x9907             LDR      R1,[SP, #+28]
   \   00000088   0xBA09             REV      R1,R1
   \   0000008A   0x6001             STR      R1,[R0, #+0]
    149              outputaddr+=4;
   \   0000008C   0x1D04             ADDS     R4,R0,#+4
    150              *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
   \   0000008E   0x9808             LDR      R0,[SP, #+32]
   \   00000090   0xBA00             REV      R0,R0
   \   00000092   0x6020             STR      R0,[R4, #+0]
    151              outputaddr+=4;
    152              *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
   \   00000094   0x9809             LDR      R0,[SP, #+36]
   \   00000096   0xBA00             REV      R0,R0
   \   00000098   0x1D21             ADDS     R1,R4,#+4
   \   0000009A   0x6008             STR      R0,[R1, #+0]
    153            }
    154            return status; 
   \                     ??HASH_MD5_5: (+1)
   \   0000009C   0x4628             MOV      R0,R5
   \   0000009E   0xB00E             ADD      SP,SP,#+56
   \   000000A0   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    155          }
    156          
    157          /**
    158            * @brief  Compute the HMAC MD5 digest.
    159            * @param  Key: pointer to the Key used for HMAC.
    160            * @param  Keylen: length of the Key used for HMAC.
    161            * @param  Input: pointer to the Input buffer to be treated.
    162            * @param  Ilen: length of the Input buffer.
    163            * @param  Output: the returned digest  
    164            * @retval An ErrorStatus enumeration value:
    165            *          - SUCCESS: digest computation done
    166            *          - ERROR: digest computation failed
    167            */

   \                                 In section .text, align 2, keep-with-next
    168          ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
    169                               uint32_t Ilen, uint8_t Output[16])
    170          {
   \                     HMAC_MD5: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB08F             SUB      SP,SP,#+60
   \   00000006   0x4607             MOV      R7,R0
   \   00000008   0x4688             MOV      R8,R1
   \   0000000A   0x4699             MOV      R9,R3
    171            HASH_InitTypeDef MD5_HASH_InitStructure;
    172            HASH_MsgDigest MD5_MessageDigest;
    173            __IO uint16_t nbvalidbitsdata = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    174            __IO uint16_t nbvalidbitskey = 0;
   \   00000012   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    175            uint32_t i = 0;
   \   00000016   0x4682             MOV      R10,R0
    176            __IO uint32_t counter = 0;
   \   00000018   0x9000             STR      R0,[SP, #+0]
    177            uint32_t busystatus = 0;
    178            ErrorStatus status = SUCCESS;
   \   0000001A   0x2501             MOVS     R5,#+1
    179            uint32_t keyaddr    = (uint32_t)Key;
   \   0000001C   0x46BB             MOV      R11,R7
    180            uint32_t inputaddr  = (uint32_t)Input;
   \   0000001E   0x4614             MOV      R4,R2
    181            uint32_t outputaddr = (uint32_t)Output;
   \   00000020   0x9E18             LDR      R6,[SP, #+96]
    182          
    183            /* Number of valid bits in last word of the Input data */
    184            nbvalidbitsdata = 8 * (Ilen % 4);
   \   00000022   0xEA4F 0x00C9      LSL      R0,R9,#+3
   \   00000026   0xF000 0x0018      AND      R0,R0,#0x18
   \   0000002A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    185          
    186            /* Number of valid bits in last word of the Key */
    187            nbvalidbitskey = 8 * (Keylen % 4);
   \   0000002E   0xEA4F 0x00C8      LSL      R0,R8,#+3
   \   00000032   0xF000 0x0018      AND      R0,R0,#0x18
   \   00000036   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    188             
    189            /* HASH peripheral initialization */
    190            HASH_DeInit();
   \   0000003A   0x.... 0x....      BL       HASH_DeInit
    191          
    192            /* HASH Configuration */
    193            MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
   \   0000003E   0x2080             MOVS     R0,#+128
   \   00000040   0x9002             STR      R0,[SP, #+8]
    194            MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
   \   00000042   0x2040             MOVS     R0,#+64
   \   00000044   0x9003             STR      R0,[SP, #+12]
    195            MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
   \   00000046   0x2020             MOVS     R0,#+32
   \   00000048   0x9004             STR      R0,[SP, #+16]
    196            if(Keylen > 64)
   \   0000004A   0xF1B8 0x0F41      CMP      R8,#+65
   \   0000004E   0xD303             BCC.N    ??HMAC_MD5_0
    197            {
    198              /* HMAC long Key */
    199              MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
   \   00000050   0xF44F 0x3080      MOV      R0,#+65536
   \   00000054   0x9005             STR      R0,[SP, #+20]
   \   00000056   0xE001             B.N      ??HMAC_MD5_1
    200            }
    201            else
    202            {
    203              /* HMAC short Key */
    204              MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
   \                     ??HMAC_MD5_0: (+1)
   \   00000058   0x4650             MOV      R0,R10
   \   0000005A   0x9005             STR      R0,[SP, #+20]
    205            }
    206            HASH_Init(&MD5_HASH_InitStructure);
   \                     ??HMAC_MD5_1: (+1)
   \   0000005C   0xA802             ADD      R0,SP,#+8
   \   0000005E   0x.... 0x....      BL       HASH_Init
    207          
    208            /* Configure the number of valid bits in last word of the Key */
    209            HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
   \   00000062   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000066   0x.... 0x....      BL       HASH_SetLastWordValidBitsNbr
    210          
    211            /* Write the Key */
    212            for(i=0; i<Keylen; i+=4)
   \   0000006A   0xE007             B.N      ??HMAC_MD5_2
    213            {
    214              HASH_DataIn(*(uint32_t*)keyaddr);
   \                     ??HMAC_MD5_3: (+1)
   \   0000006C   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   00000070   0x.... 0x....      BL       HASH_DataIn
    215              keyaddr+=4;
   \   00000074   0xF10B 0x0B04      ADD      R11,R11,#+4
    216            }
   \   00000078   0xF10A 0x0A04      ADD      R10,R10,#+4
   \                     ??HMAC_MD5_2: (+1)
   \   0000007C   0x45C2             CMP      R10,R8
   \   0000007E   0xD3F5             BCC.N    ??HMAC_MD5_3
    217            
    218            /* Start the HASH processor */
    219            HASH_StartDigest();
   \   00000080   0x.... 0x....      BL       HASH_StartDigest
    220          
    221            /* wait until the Busy flag is RESET */
    222            do
    223            {
    224              busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
   \                     ??HMAC_MD5_4: (+1)
   \   00000084   0x2008             MOVS     R0,#+8
   \   00000086   0x.... 0x....      BL       HASH_GetFlagStatus
    225              counter++;
   \   0000008A   0x9900             LDR      R1,[SP, #+0]
   \   0000008C   0x1C49             ADDS     R1,R1,#+1
   \   0000008E   0x9100             STR      R1,[SP, #+0]
    226            }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
   \   00000090   0x9900             LDR      R1,[SP, #+0]
   \   00000092   0xF5B1 0x3F80      CMP      R1,#+65536
   \   00000096   0xD001             BEQ.N    ??HMAC_MD5_5
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD1F3             BNE.N    ??HMAC_MD5_4
    227          
    228            if (busystatus != RESET)
   \                     ??HMAC_MD5_5: (+1)
   \   0000009C   0x2800             CMP      R0,#+0
   \   0000009E   0xD001             BEQ.N    ??HMAC_MD5_6
    229            {
    230               status = ERROR;
   \   000000A0   0x2500             MOVS     R5,#+0
   \   000000A2   0xE05A             B.N      ??HMAC_MD5_7
    231            }
    232            else
    233            {
    234              /* Configure the number of valid bits in last word of the Input data */
    235              HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
   \                     ??HMAC_MD5_6: (+1)
   \   000000A4   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   000000A8   0x.... 0x....      BL       HASH_SetLastWordValidBitsNbr
    236          
    237              /* Write the Input block in the IN FIFO */
    238              for(i=0; i<Ilen; i+=4)
   \   000000AC   0xF04F 0x0A00      MOV      R10,#+0
   \   000000B0   0xE005             B.N      ??HMAC_MD5_8
    239              {
    240                HASH_DataIn(*(uint32_t*)inputaddr);
   \                     ??HMAC_MD5_9: (+1)
   \   000000B2   0x6820             LDR      R0,[R4, #+0]
   \   000000B4   0x.... 0x....      BL       HASH_DataIn
    241                inputaddr+=4;
   \   000000B8   0x1D24             ADDS     R4,R4,#+4
    242              }
   \   000000BA   0xF10A 0x0A04      ADD      R10,R10,#+4
   \                     ??HMAC_MD5_8: (+1)
   \   000000BE   0x45CA             CMP      R10,R9
   \   000000C0   0xD3F7             BCC.N    ??HMAC_MD5_9
    243          
    244              /* Start the HASH processor */
    245              HASH_StartDigest();
   \   000000C2   0x.... 0x....      BL       HASH_StartDigest
    246          
    247              /* wait until the Busy flag is RESET */
    248              counter =0;
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x9000             STR      R0,[SP, #+0]
    249              do
    250              {
    251                 busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
   \                     ??HMAC_MD5_10: (+1)
   \   000000CA   0x2008             MOVS     R0,#+8
   \   000000CC   0x.... 0x....      BL       HASH_GetFlagStatus
    252                 counter++;
   \   000000D0   0x9900             LDR      R1,[SP, #+0]
   \   000000D2   0x1C49             ADDS     R1,R1,#+1
   \   000000D4   0x9100             STR      R1,[SP, #+0]
    253              }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
   \   000000D6   0x9900             LDR      R1,[SP, #+0]
   \   000000D8   0xF5B1 0x3F80      CMP      R1,#+65536
   \   000000DC   0xD001             BEQ.N    ??HMAC_MD5_11
   \   000000DE   0x2800             CMP      R0,#+0
   \   000000E0   0xD1F3             BNE.N    ??HMAC_MD5_10
    254          
    255              if (busystatus != RESET)
   \                     ??HMAC_MD5_11: (+1)
   \   000000E2   0x2800             CMP      R0,#+0
   \   000000E4   0xD001             BEQ.N    ??HMAC_MD5_12
    256              {
    257                status = ERROR;
   \   000000E6   0x2500             MOVS     R5,#+0
   \   000000E8   0xE037             B.N      ??HMAC_MD5_7
    258              }
    259              else
    260              {  
    261                /* Configure the number of valid bits in last word of the Key */
    262                HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
   \                     ??HMAC_MD5_12: (+1)
   \   000000EA   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   000000EE   0x.... 0x....      BL       HASH_SetLastWordValidBitsNbr
    263          
    264                /* Write the Key */
    265                keyaddr = (uint32_t)Key;
   \   000000F2   0x46BB             MOV      R11,R7
    266                for(i=0; i<Keylen; i+=4)
   \   000000F4   0xF04F 0x0A00      MOV      R10,#+0
   \   000000F8   0xE007             B.N      ??HMAC_MD5_13
    267                {
    268                  HASH_DataIn(*(uint32_t*)keyaddr);
   \                     ??HMAC_MD5_14: (+1)
   \   000000FA   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   000000FE   0x.... 0x....      BL       HASH_DataIn
    269                  keyaddr+=4;
   \   00000102   0xF10B 0x0B04      ADD      R11,R11,#+4
    270                }
   \   00000106   0xF10A 0x0A04      ADD      R10,R10,#+4
   \                     ??HMAC_MD5_13: (+1)
   \   0000010A   0x45C2             CMP      R10,R8
   \   0000010C   0xD3F5             BCC.N    ??HMAC_MD5_14
    271            
    272                 /* Start the HASH processor */
    273                 HASH_StartDigest();
   \   0000010E   0x.... 0x....      BL       HASH_StartDigest
    274          
    275                 /* wait until the Busy flag is RESET */
    276                 counter =0;
   \   00000112   0x2000             MOVS     R0,#+0
   \   00000114   0x9000             STR      R0,[SP, #+0]
    277                 do
    278                 {
    279                    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
   \                     ??HMAC_MD5_15: (+1)
   \   00000116   0x2008             MOVS     R0,#+8
   \   00000118   0x.... 0x....      BL       HASH_GetFlagStatus
    280                    counter++;
   \   0000011C   0x9900             LDR      R1,[SP, #+0]
   \   0000011E   0x1C49             ADDS     R1,R1,#+1
   \   00000120   0x9100             STR      R1,[SP, #+0]
    281                }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
   \   00000122   0x9900             LDR      R1,[SP, #+0]
   \   00000124   0xF5B1 0x3F80      CMP      R1,#+65536
   \   00000128   0xD001             BEQ.N    ??HMAC_MD5_16
   \   0000012A   0x2800             CMP      R0,#+0
   \   0000012C   0xD1F3             BNE.N    ??HMAC_MD5_15
    282          
    283                if (busystatus != RESET)
   \                     ??HMAC_MD5_16: (+1)
   \   0000012E   0x2800             CMP      R0,#+0
   \   00000130   0xD001             BEQ.N    ??HMAC_MD5_17
    284                {
    285                   status = ERROR;
   \   00000132   0x2500             MOVS     R5,#+0
   \   00000134   0xE011             B.N      ??HMAC_MD5_7
    286                }
    287                else
    288                {
    289                   /* Read the message digest */
    290                   HASH_GetDigest(&MD5_MessageDigest);
   \                     ??HMAC_MD5_17: (+1)
   \   00000136   0xA806             ADD      R0,SP,#+24
   \   00000138   0x.... 0x....      BL       HASH_GetDigest
    291                   *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
   \   0000013C   0x9806             LDR      R0,[SP, #+24]
   \   0000013E   0xBA00             REV      R0,R0
   \   00000140   0x6030             STR      R0,[R6, #+0]
    292                   outputaddr+=4;
   \   00000142   0x1D30             ADDS     R0,R6,#+4
    293                   *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
   \   00000144   0x9907             LDR      R1,[SP, #+28]
   \   00000146   0xBA09             REV      R1,R1
   \   00000148   0x6001             STR      R1,[R0, #+0]
    294                   outputaddr+=4;
   \   0000014A   0x1D06             ADDS     R6,R0,#+4
    295                   *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
   \   0000014C   0x9808             LDR      R0,[SP, #+32]
   \   0000014E   0xBA00             REV      R0,R0
   \   00000150   0x6030             STR      R0,[R6, #+0]
    296                   outputaddr+=4;
    297                   *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
   \   00000152   0x9809             LDR      R0,[SP, #+36]
   \   00000154   0xBA00             REV      R0,R0
   \   00000156   0x1D31             ADDS     R1,R6,#+4
   \   00000158   0x6008             STR      R0,[R1, #+0]
    298                }
    299              }
    300            }
    301            return status;  
   \                     ??HMAC_MD5_7: (+1)
   \   0000015A   0x4628             MOV      R0,R5
   \   0000015C   0xB00F             ADD      SP,SP,#+60
   \   0000015E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    302          }
    303          /**
    304            * @}
    305            */ 
    306          
    307          /**
    308            * @}
    309            */ 
    310          
    311          /**
    312            * @}
    313            */ 
    314          
    315          /**
    316            * @}
    317            */ 
    318          
    319          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
    320          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      80   HASH_MD5
        80   -> HASH_DataIn
        80   -> HASH_DeInit
        80   -> HASH_GetDigest
        80   -> HASH_GetFlagStatus
        80   -> HASH_Init
        80   -> HASH_SetLastWordValidBitsNbr
        80   -> HASH_StartDigest
      96   HMAC_MD5
        96   -> HASH_DataIn
        96   -> HASH_DeInit
        96   -> HASH_GetDigest
        96   -> HASH_GetFlagStatus
        96   -> HASH_Init
        96   -> HASH_SetLastWordValidBitsNbr
        96   -> HASH_StartDigest


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     164  HASH_MD5
     354  HMAC_MD5

 
 518 bytes in section .text
 
 518 bytes of CODE memory

Errors: none
Warnings: none
