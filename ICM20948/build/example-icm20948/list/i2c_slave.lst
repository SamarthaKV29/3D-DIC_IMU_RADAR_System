###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.2.11706/W32 for ARM       22/Dec/2017  10:34:27
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\board-hal\i2c_slave.c
#    Command line =  
#        C:\Users\prasa\Documents\1.0.0\sources\board-hal\i2c_slave.c -D
#        IAR_COMPILER -D __inline=inline -D INV_MSG_ENABLE -D ASSERT -D NUCLEO
#        -D USE_STDPERIPH_DRIVER -D USE_HSE_BYPASS -D HSE_VALUE=8000000 -D
#        STM32F411xE -lC
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list
#        --diag_suppress Pa050 -o
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 --silent --warnings_are_errors -e
#        --char_is_signed --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../board-hal\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Core\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Device\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/STM32F4xx_StdPeriph_Driver/inc\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/Images\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/DynamicProtocol\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list\i2c_slave.lst
#    Object file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj\i2c_slave.o
#
###############################################################################

C:\Users\prasa\Documents\1.0.0\sources\board-hal\i2c_slave.c
      1          /*
      2           * ________________________________________________________________________________________________________
      3           * Copyright (c) 2016-2016 InvenSense Inc. All rights reserved.
      4           *
      5           * This software, related documentation and any modifications thereto (collectively “Software”) is subject
      6           * to InvenSense and its licensors' intellectual property rights under U.S. and international copyright
      7           * and other intellectual property rights laws.
      8           *
      9           * InvenSense and its licensors retain all intellectual property and proprietary rights in and to the Software
     10           * and any use, reproduction, disclosure or distribution of the Software without an express license agreement
     11           * from InvenSense is strictly prohibited.
     12           *
     13           * EXCEPT AS OTHERWISE PROVIDED IN A LICENSE AGREEMENT BETWEEN THE PARTIES, THE SOFTWARE IS
     14           * PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
     15           * TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
     16           * EXCEPT AS OTHERWISE PROVIDED IN A LICENSE AGREEMENT BETWEEN THE PARTIES, IN NO EVENT SHALL
     17           * INVENSENSE BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, OR ANY
     18           * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
     19           * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
     20           * OF THE SOFTWARE.
     21           * ________________________________________________________________________________________________________
     22           */
     23          #include <string.h>
     24          
     25          #include "stm32f4xx.h"
     26          #include "stm32f4xx_gpio.h" 
     27          #include "stm32f4xx_i2c.h" 
     28          #include "stm32f4xx_rcc.h"
     29          
     30          #include "i2c_master.h"
     31          #include "i2c_slave.h"
     32          
     33          #include "nvic_config.h"
     34          
     35          /********************************* Prototypes *********************************/
     36                                         
     37          /********************************* Globals ************************************/
     38          

   \                                 In section .bss, align 4
     39          static i2c_slave_data   i2c_data[NUM_I2C_BUFFERS];
   \                     i2c_data:
   \   00000000                      DS8 2112
     40          static uint8_t  i2c_cur_data = 0;
     41          static uint8_t  i2c_read_next = 0;
     42          static uint8_t IsInited = 0;
     43          
     44          static void (*I2C_interrupt_cb)(void) = (void *)0;              
     45          

   \                                 In section .text, align 2, keep-with-next
     46          unsigned long i2c_slave_read_register(unsigned char RegisterAddr, unsigned short RegisterLen, unsigned char *RegisterValue)
     47          {
   \                     i2c_slave_read_register: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4614             MOV      R4,R2
     48          	uint8_t packet_len = 0;
   \   00000006   0x2500             MOVS     R5,#+0
     49          
     50          	if (i2c_data[i2c_read_next].packet_available)
   \   00000008   0x....             LDR.N    R6,??DataTable5
   \   0000000A   0x7837             LDRB     R7,[R6, #+0]
   \   0000000C   0x....             LDR.N    R0,??DataTable5_1
   \   0000000E   0xEB07 0x1247      ADD      R2,R7,R7, LSL #+5
   \   00000012   0xEB00 0x0042      ADD      R0,R0,R2, LSL #+1
   \   00000016   0xF100 0x0840      ADD      R8,R0,#+64
   \   0000001A   0xF898 0x2001      LDRB     R2,[R8, #+1]
   \   0000001E   0x2A00             CMP      R2,#+0
   \   00000020   0xD018             BEQ.N    ??i2c_slave_read_register_0
     51          	{
     52          		packet_len = (RegisterLen < i2c_data[i2c_read_next].data_index) ? RegisterLen : i2c_data[i2c_read_next].data_index;
   \   00000022   0xF898 0x5000      LDRB     R5,[R8, #+0]
   \   00000026   0x460A             MOV      R2,R1
   \   00000028   0x462B             MOV      R3,R5
   \   0000002A   0x429A             CMP      R2,R3
   \   0000002C   0xD200             BCS.N    ??i2c_slave_read_register_1
   \   0000002E   0x460D             MOV      R5,R1
     53          		memcpy(&RegisterValue[1], i2c_data[i2c_read_next].data, packet_len);        
   \                     ??i2c_slave_read_register_1: (+1)
   \   00000030   0xB2ED             UXTB     R5,R5
   \   00000032   0x462A             MOV      R2,R5
   \   00000034   0x4601             MOV      R1,R0
   \   00000036   0x1C60             ADDS     R0,R4,#+1
   \   00000038   0x.... 0x....      BL       __aeabi_memcpy
     54          		i2c_data[i2c_read_next].data_index = 0;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xF888 0x0000      STRB     R0,[R8, #+0]
     55          		i2c_data[i2c_read_next].packet_available = 0;
   \   00000042   0xF888 0x0001      STRB     R0,[R8, #+1]
     56          		i2c_read_next = (++i2c_read_next == NUM_I2C_BUFFERS) ? 0 : i2c_read_next;
   \   00000046   0x1C78             ADDS     R0,R7,#+1
   \   00000048   0x7030             STRB     R0,[R6, #+0]
   \   0000004A   0xB2C0             UXTB     R0,R0
   \   0000004C   0x2820             CMP      R0,#+32
   \   0000004E   0xD101             BNE.N    ??i2c_slave_read_register_0
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x7030             STRB     R0,[R6, #+0]
     57          	}
     58          	RegisterValue[0] = packet_len;             // Because we return the number of bytes written in the first byte of the buffer.            
   \                     ??i2c_slave_read_register_0: (+1)
   \   00000054   0x7025             STRB     R5,[R4, #+0]
     59          	return 0;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
     60          }
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void i2c_slave_init()
     63          {
   \                     i2c_slave_init: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
     64          	GPIO_InitTypeDef GPIO_InitStructure;
     65          	I2C_InitTypeDef i2c_init;
     66          	NVIC_InitTypeDef NVIC_InitStructure, NVIC_InitStructure2;
     67          	uint8_t i;
     68          
     69          	if(IsInited != 0)
   \   00000004   0x....             LDR.N    R4,??DataTable5_2
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xF040 0x8085      BNE.W    ??i2c_slave_init_0
     70          		return;
     71          
     72          	for (i = 0; i < NUM_I2C_BUFFERS; i++)
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE009             B.N      ??i2c_slave_init_1
     73          	{
     74          		i2c_data[i].data_index = 0;
   \                     ??i2c_slave_init_2: (+1)
   \   00000012   0x....             LDR.N    R1,??DataTable5_1
   \   00000014   0xEB00 0x1240      ADD      R2,R0,R0, LSL #+5
   \   00000018   0xEB01 0x0142      ADD      R1,R1,R2, LSL #+1
   \   0000001C   0x3140             ADDS     R1,R1,#+64
   \   0000001E   0x2200             MOVS     R2,#+0
   \   00000020   0x700A             STRB     R2,[R1, #+0]
     75          		i2c_data[i].packet_available = 0;
   \   00000022   0x704A             STRB     R2,[R1, #+1]
     76          	}
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \                     ??i2c_slave_init_1: (+1)
   \   00000026   0x2820             CMP      R0,#+32
   \   00000028   0xDBF3             BLT.N    ??i2c_slave_init_2
     77          	/* Enable I2Cx clock */
     78          	RCC_APB1PeriphClockCmd(SENSORS_I2C_RCC_CLK, ENABLE);
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0xF44F 0x1000      MOV      R0,#+2097152
   \   00000030   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     79          
     80          	/* Enable I2C GPIO clock */
     81          	RCC_AHB1PeriphClockCmd(SENSORS_I2C_SCL_GPIO_CLK | SENSORS_I2C_SDA_GPIO_CLK, ENABLE);
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     82          
     83          	/* Configure I2Cx pin: SCL ----------------------------------------*/
     84          	GPIO_InitStructure.GPIO_Pin =  SENSORS_I2C_SCL_GPIO_PIN; 
   \   0000003C   0xF44F 0x7080      MOV      R0,#+256
   \   00000040   0x9002             STR      R0,[SP, #+8]
     85          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
   \   00000042   0x2002             MOVS     R0,#+2
   \   00000044   0xF88D 0x000C      STRB     R0,[SP, #+12]
     86          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0xF88D 0x000D      STRB     R0,[SP, #+13]
     87          	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
   \   0000004E   0xF88D 0x000E      STRB     R0,[SP, #+14]
     88          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xF88D 0x000F      STRB     R0,[SP, #+15]
     89          
     90          	/* Connect pins to Periph */
     91          	GPIO_PinAFConfig(SENSORS_I2C_SCL_GPIO_PORT, SENSORS_I2C_SCL_GPIO_PINSOURCE, SENSORS_I2C_AF_SCL);  
   \   00000058   0x....             LDR.N    R5,??DataTable5_3  ;; 0x40020400
   \   0000005A   0x2204             MOVS     R2,#+4
   \   0000005C   0x2108             MOVS     R1,#+8
   \   0000005E   0x4628             MOV      R0,R5
   \   00000060   0x.... 0x....      BL       GPIO_PinAFConfig
     92          	GPIO_Init(SENSORS_I2C_SCL_GPIO_PORT, &GPIO_InitStructure);
   \   00000064   0xA902             ADD      R1,SP,#+8
   \   00000066   0x4628             MOV      R0,R5
   \   00000068   0x.... 0x....      BL       GPIO_Init
     93          
     94          	/* Configure I2Cx pin: SDA ----------------------------------------*/
     95          	GPIO_InitStructure.GPIO_Pin = SENSORS_I2C_SDA_GPIO_PIN; 
   \   0000006C   0xF44F 0x7000      MOV      R0,#+512
   \   00000070   0x9002             STR      R0,[SP, #+8]
     96          
     97          	/* Connect pins to Periph */
     98          	GPIO_PinAFConfig(SENSORS_I2C_SDA_GPIO_PORT, SENSORS_I2C_SDA_GPIO_PINSOURCE, SENSORS_I2C_AF_SDA);  
   \   00000072   0x2204             MOVS     R2,#+4
   \   00000074   0x2109             MOVS     R1,#+9
   \   00000076   0x4628             MOV      R0,R5
   \   00000078   0x.... 0x....      BL       GPIO_PinAFConfig
     99          	GPIO_Init(SENSORS_I2C_SDA_GPIO_PORT, &GPIO_InitStructure);  
   \   0000007C   0xA902             ADD      R1,SP,#+8
   \   0000007E   0x4628             MOV      R0,R5
   \   00000080   0x.... 0x....      BL       GPIO_Init
    100          
    101          	I2C_DeInit(SENSORS_I2C);
   \   00000084   0x....             LDR.N    R5,??DataTable5_4  ;; 0x40005400
   \   00000086   0x4628             MOV      R0,R5
   \   00000088   0x.... 0x....      BL       I2C_DeInit
    102          	i2c_init.I2C_Mode = I2C_Mode_I2C;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    103          	i2c_init.I2C_DutyCycle = I2C_DutyCycle_2;
   \   00000092   0xF64B 0x70FF      MOVW     R0,#+49151
   \   00000096   0xF8AD 0x0016      STRH     R0,[SP, #+22]
    104          	i2c_init.I2C_OwnAddress1 = (I2C_SLAVE_ADDRESS << 1);
   \   0000009A   0x2076             MOVS     R0,#+118
   \   0000009C   0xF8AD 0x0018      STRH     R0,[SP, #+24]
    105          	i2c_init.I2C_Ack = I2C_Ack_Enable;
   \   000000A0   0xF44F 0x6080      MOV      R0,#+1024
   \   000000A4   0xF8AD 0x001A      STRH     R0,[SP, #+26]
    106          	i2c_init.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
   \   000000A8   0xF44F 0x4080      MOV      R0,#+16384
   \   000000AC   0xF8AD 0x001C      STRH     R0,[SP, #+28]
    107          	i2c_init.I2C_ClockSpeed = I2C_SPEED;
   \   000000B0   0x....             LDR.N    R0,??DataTable5_5  ;; 0x61a80
   \   000000B2   0x9004             STR      R0,[SP, #+16]
    108          	I2C_Init(SENSORS_I2C, &i2c_init);
   \   000000B4   0xA904             ADD      R1,SP,#+16
   \   000000B6   0x4628             MOV      R0,R5
   \   000000B8   0x.... 0x....      BL       I2C_Init
    109          	I2C_StretchClockCmd(SENSORS_I2C, DISABLE);
   \   000000BC   0x2100             MOVS     R1,#+0
   \   000000BE   0x4628             MOV      R0,R5
   \   000000C0   0x.... 0x....      BL       I2C_StretchClockCmd
    110          
    111          	NVIC_InitStructure.NVIC_IRQChannel = I2C1_EV_IRQn;
   \   000000C4   0x201F             MOVS     R0,#+31
   \   000000C6   0xF88D 0x0004      STRB     R0,[SP, #+4]
    112          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = NVIC_PRIORITY_I2C_SLAVE;
   \   000000CA   0x2005             MOVS     R0,#+5
   \   000000CC   0xF88D 0x0005      STRB     R0,[SP, #+5]
    113          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0xF88D 0x0006      STRB     R0,[SP, #+6]
    114          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   000000D6   0x2001             MOVS     R0,#+1
   \   000000D8   0xF88D 0x0007      STRB     R0,[SP, #+7]
    115          	NVIC_Init(&NVIC_InitStructure);
   \   000000DC   0xA801             ADD      R0,SP,#+4
   \   000000DE   0x.... 0x....      BL       NVIC_Init
    116          
    117          	NVIC_InitStructure2.NVIC_IRQChannel = I2C1_ER_IRQn;
   \   000000E2   0x2020             MOVS     R0,#+32
   \   000000E4   0xF88D 0x0000      STRB     R0,[SP, #+0]
    118          	NVIC_InitStructure2.NVIC_IRQChannelPreemptionPriority = NVIC_PRIORITY_I2C_SLAVE;
   \   000000E8   0x2005             MOVS     R0,#+5
   \   000000EA   0xF88D 0x0001      STRB     R0,[SP, #+1]
    119          	NVIC_InitStructure2.NVIC_IRQChannelSubPriority = 0;
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0xF88D 0x0002      STRB     R0,[SP, #+2]
    120          	NVIC_InitStructure2.NVIC_IRQChannelCmd = ENABLE;
   \   000000F4   0x2001             MOVS     R0,#+1
   \   000000F6   0xF88D 0x0003      STRB     R0,[SP, #+3]
    121          	NVIC_Init(&NVIC_InitStructure2);   
   \   000000FA   0x4668             MOV      R0,SP
   \   000000FC   0x.... 0x....      BL       NVIC_Init
    122          
    123          	I2C_ITConfig(SENSORS_I2C, I2C_IT_EVT | I2C_IT_ERR | I2C_IT_BUF, ENABLE);
   \   00000100   0x2201             MOVS     R2,#+1
   \   00000102   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000106   0x4628             MOV      R0,R5
   \   00000108   0x.... 0x....      BL       I2C_ITConfig
    124          	I2C_Cmd(SENSORS_I2C, ENABLE);
   \   0000010C   0x2101             MOVS     R1,#+1
   \   0000010E   0x4628             MOV      R0,R5
   \   00000110   0x.... 0x....      BL       I2C_Cmd
    125          
    126          	IsInited = 1;
   \   00000114   0x2001             MOVS     R0,#+1
   \   00000116   0x7020             STRB     R0,[R4, #+0]
    127          }
   \                     ??i2c_slave_init_0: (+1)
   \   00000118   0xB009             ADD      SP,SP,#+36
   \   0000011A   0xBD30             POP      {R4,R5,PC}       ;; return
    128          
    129          

   \                                 In section .text, align 2, keep-with-next
    130          void i2c_slave_deinit(void)
    131          {
   \                     i2c_slave_deinit: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    132          	/* Disable the I2C peripheral */
    133          	I2C_Cmd(SENSORS_I2C, DISABLE);  
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x....             LDR.N    R0,??DataTable5_4  ;; 0x40005400
   \   00000006   0x.... 0x....      BL       I2C_Cmd
    134          	IsInited = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x....             LDR.N    R1,??DataTable5_2
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    135          }
   \   00000010   0xBD01             POP      {R0,PC}          ;; return
    136          

   \                                 In section .text, align 2, keep-with-next
    137          void I2C1_ER_IRQHandler(void)
    138          {
   \                     I2C1_ER_IRQHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    139          	volatile uint32_t SR1Register, SR2Register;
    140          	/* Read the I2C1 status register */
    141          	SR1Register = SENSORS_I2C->SR1;
   \   00000004   0x....             LDR.N    R4,??DataTable5_4  ;; 0x40005400
   \   00000006   0x8AA0             LDRH     R0,[R4, #+20]
   \   00000008   0x9000             STR      R0,[SP, #+0]
    142          
    143          	/* If AF or BERR, send STOP*/
    144          	if(SR1Register & 0x0500)
   \   0000000A   0x9800             LDR      R0,[SP, #+0]
   \   0000000C   0xF410 0x6FA0      TST      R0,#0x500
   \   00000010   0xD003             BEQ.N    ??I2C1_ER_IRQHandler_0
    145          		I2C_GenerateSTOP(SENSORS_I2C,ENABLE);//program the Stop
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       I2C_GenerateSTOP
    146          	/* If AF, BERR or ARLO, abandon the current job and send a start to commence new */
    147          	if(SR1Register & 0x0700) 
   \                     ??I2C1_ER_IRQHandler_0: (+1)
   \   0000001A   0x9800             LDR      R0,[SP, #+0]
   \   0000001C   0xF410 0x6FE0      TST      R0,#0x700
   \   00000020   0xD001             BEQ.N    ??I2C1_ER_IRQHandler_1
    148          		SR2Register = SENSORS_I2C->SR2;//read second status register to clear ADDR if it is set (note that BTF will not be set after a NACK)
   \   00000022   0x8B20             LDRH     R0,[R4, #+24]
   \   00000024   0x9000             STR      R0,[SP, #+0]
    149          	SENSORS_I2C->SR1 &=~0x0F00;		//reset all the error bits to clear the interrupt
   \                     ??I2C1_ER_IRQHandler_1: (+1)
   \   00000026   0x8AA0             LDRH     R0,[R4, #+20]
   \   00000028   0xF24F 0x01FF      MOVW     R1,#+61695
   \   0000002C   0x4008             ANDS     R0,R1,R0
   \   0000002E   0x82A0             STRH     R0,[R4, #+20]
    150          }
   \   00000030   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    151          

   \                                 In section .text, align 2, keep-with-next
    152          void i2c_slave_irq_init(void (*interrupt_cb)(void))
    153          {
    154          	I2C_interrupt_cb = interrupt_cb;
   \                     i2c_slave_irq_init: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable5_6
   \   00000002   0x6048             STR      R0,[R1, #+4]
    155          }
   \   00000004   0x4770             BX       LR               ;; return
    156          

   \                                 In section .text, align 2, keep-with-next
    157          void I2C1_EV_IRQHandler(void)
    158          {
   \                     I2C1_EV_IRQHandler: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
    159          	static int receiving_i2c_data = 0;
    160          
    161          	switch(I2C_GetLastEvent(I2C1))
   \   00000006   0x....             LDR.N    R4,??DataTable5_4  ;; 0x40005400
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       I2C_GetLastEvent
   \   0000000E   0x3810             SUBS     R0,R0,#+16
   \   00000010   0xD039             BEQ.N    ??I2C1_EV_IRQHandler_0
   \   00000012   0xF44F 0x717C      MOV      R1,#+1008
   \   00000016   0x1A40             SUBS     R0,R0,R1
   \   00000018   0xD075             BEQ.N    ??I2C1_EV_IRQHandler_1
   \   0000001A   0x....             LDR.N    R1,??DataTable5_7  ;; 0x1fc02
   \   0000001C   0x1A40             SUBS     R0,R0,R1
   \   0000001E   0xD007             BEQ.N    ??I2C1_EV_IRQHandler_2
   \   00000020   0x383E             SUBS     R0,R0,#+62
   \   00000022   0xD016             BEQ.N    ??I2C1_EV_IRQHandler_3
   \   00000024   0x....             LDR.N    R1,??DataTable5_8  ;; 0x40042
   \   00000026   0x1A40             SUBS     R0,R0,R1
   \   00000028   0xD05C             BEQ.N    ??I2C1_EV_IRQHandler_4
   \   0000002A   0x1E80             SUBS     R0,R0,#+2
   \   0000002C   0xD062             BEQ.N    ??I2C1_EV_IRQHandler_5
   \   0000002E   0xE073             B.N      ??I2C1_EV_IRQHandler_6
    162          	{
    163          	case I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED :
    164          		I2C_ClearFlag(SENSORS_I2C,I2C_FLAG_ADDR);
   \                     ??I2C1_EV_IRQHandler_2: (+1)
   \   00000030   0x....             LDR.N    R1,??DataTable5_9  ;; 0x10000002
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       I2C_ClearFlag
    165          		receiving_i2c_data = 1;                                 // We're receiving data.
   \   00000038   0x....             LDR.N    R5,??DataTable5_6
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x60A8             STR      R0,[R5, #+8]
    166          		i2c_data[i2c_cur_data].data_index = 0;                  // Make sure we start with the index equal to 0. This cleans up some spurious data from Geneva
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x....             LDR.N    R1,??DataTable5_1
   \   00000042   0x782A             LDRB     R2,[R5, #+0]
   \   00000044   0xEB02 0x1342      ADD      R3,R2,R2, LSL #+5
   \   00000048   0xEB01 0x0143      ADD      R1,R1,R3, LSL #+1
   \   0000004C   0xF881 0x0040      STRB     R0,[R1, #+64]
    167          		break;
   \   00000050   0xE062             B.N      ??I2C1_EV_IRQHandler_6
    168          	case I2C_EVENT_SLAVE_BYTE_RECEIVED:
    169          		if (i2c_data[i2c_cur_data].data_index < MAX_I2C_SLAVE_BUF)
   \                     ??I2C1_EV_IRQHandler_3: (+1)
   \   00000052   0x2642             MOVS     R6,#+66
   \   00000054   0x....             LDR.N    R7,??DataTable5_1
   \   00000056   0x....             LDR.N    R5,??DataTable5_6
   \   00000058   0x7828             LDRB     R0,[R5, #+0]
   \   0000005A   0xFB16 0xF000      SMULBB   R0,R6,R0
   \   0000005E   0x4438             ADD      R0,R7,R0
   \   00000060   0xF890 0x1040      LDRB     R1,[R0, #+64]
   \   00000064   0x4688             MOV      R8,R1
   \   00000066   0xF1B8 0x0F40      CMP      R8,#+64
   \   0000006A   0xDA55             BGE.N    ??I2C1_EV_IRQHandler_6
    170          		  i2c_data[i2c_cur_data].data[i2c_data[i2c_cur_data].data_index++] = I2C_ReceiveData(SENSORS_I2C);
   \   0000006C   0x1C49             ADDS     R1,R1,#+1
   \   0000006E   0xF880 0x1040      STRB     R1,[R0, #+64]
   \   00000072   0x4620             MOV      R0,R4
   \   00000074   0x.... 0x....      BL       I2C_ReceiveData
   \   00000078   0x7829             LDRB     R1,[R5, #+0]
   \   0000007A   0xFB16 0xF101      SMULBB   R1,R6,R1
   \   0000007E   0x4439             ADD      R1,R7,R1
   \   00000080   0xF801 0x0008      STRB     R0,[R1, R8]
   \   00000084   0xE048             B.N      ??I2C1_EV_IRQHandler_6
    171          		break;
    172          	case I2C_EVENT_SLAVE_STOP_DETECTED:
    173          		if(I2C_GetFlagStatus(SENSORS_I2C,I2C_FLAG_ADDR) == SET)
   \                     ??I2C1_EV_IRQHandler_0: (+1)
   \   00000086   0x....             LDR.N    R5,??DataTable5_9  ;; 0x10000002
   \   00000088   0x4629             MOV      R1,R5
   \   0000008A   0x4620             MOV      R0,R4
   \   0000008C   0x.... 0x....      BL       I2C_GetFlagStatus
   \   00000090   0x2801             CMP      R0,#+1
   \   00000092   0xD103             BNE.N    ??I2C1_EV_IRQHandler_7
    174          			I2C_ClearFlag(SENSORS_I2C,I2C_FLAG_ADDR);
   \   00000094   0x4629             MOV      R1,R5
   \   00000096   0x4620             MOV      R0,R4
   \   00000098   0x.... 0x....      BL       I2C_ClearFlag
    175          		if(I2C_GetFlagStatus(SENSORS_I2C,I2C_FLAG_STOPF) == SET)
   \                     ??I2C1_EV_IRQHandler_7: (+1)
   \   0000009C   0x....             LDR.N    R5,??DataTable5_10  ;; 0x10000010
   \   0000009E   0x4629             MOV      R1,R5
   \   000000A0   0x4620             MOV      R0,R4
   \   000000A2   0x.... 0x....      BL       I2C_GetFlagStatus
   \   000000A6   0x2801             CMP      R0,#+1
   \   000000A8   0xD103             BNE.N    ??I2C1_EV_IRQHandler_8
    176          			I2C_ClearFlag(SENSORS_I2C,I2C_FLAG_STOPF);
   \   000000AA   0x4629             MOV      R1,R5
   \   000000AC   0x4620             MOV      R0,R4
   \   000000AE   0x.... 0x....      BL       I2C_ClearFlag
    177          		if (receiving_i2c_data)                                 // If the stop was generated after receiving data
   \                     ??I2C1_EV_IRQHandler_8: (+1)
   \   000000B2   0x....             LDR.N    R5,??DataTable5_6
   \   000000B4   0x68A8             LDR      R0,[R5, #+8]
   \   000000B6   0x2800             CMP      R0,#+0
   \   000000B8   0xD02E             BEQ.N    ??I2C1_EV_IRQHandler_6
    178          		{
    179          			i2c_data[i2c_cur_data].packet_available = 1;
   \   000000BA   0x7828             LDRB     R0,[R5, #+0]
   \   000000BC   0x2101             MOVS     R1,#+1
   \   000000BE   0x....             LDR.N    R2,??DataTable5_1
   \   000000C0   0xEB00 0x1340      ADD      R3,R0,R0, LSL #+5
   \   000000C4   0xEB02 0x0243      ADD      R2,R2,R3, LSL #+1
   \   000000C8   0xF882 0x1041      STRB     R1,[R2, #+65]
    180          			i2c_cur_data = (++i2c_cur_data == NUM_I2C_BUFFERS) ? 0 : i2c_cur_data;
   \   000000CC   0x1C40             ADDS     R0,R0,#+1
   \   000000CE   0x7028             STRB     R0,[R5, #+0]
   \   000000D0   0xB2C0             UXTB     R0,R0
   \   000000D2   0x2820             CMP      R0,#+32
   \   000000D4   0xD101             BNE.N    ??I2C1_EV_IRQHandler_9
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x7028             STRB     R0,[R5, #+0]
    181          			if (I2C_interrupt_cb)
   \                     ??I2C1_EV_IRQHandler_9: (+1)
   \   000000DA   0x6868             LDR      R0,[R5, #+4]
   \   000000DC   0x0001             MOVS     R1,R0
   \   000000DE   0xD01B             BEQ.N    ??I2C1_EV_IRQHandler_6
    182          				I2C_interrupt_cb();
   \   000000E0   0x4780             BLX      R0
   \   000000E2   0xE019             B.N      ??I2C1_EV_IRQHandler_6
    183          		}
    184          		break;
    185          	case I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED:
    186          		I2C_ClearFlag(SENSORS_I2C,I2C_FLAG_ADDR);
   \                     ??I2C1_EV_IRQHandler_4: (+1)
   \   000000E4   0x....             LDR.N    R1,??DataTable5_9  ;; 0x10000002
   \   000000E6   0x4620             MOV      R0,R4
   \   000000E8   0x.... 0x....      BL       I2C_ClearFlag
    187          		receiving_i2c_data = 0;                                 // We're transmitting data, i.e. not receiving.
   \   000000EC   0x2000             MOVS     R0,#+0
   \   000000EE   0x....             LDR.N    R1,??DataTable5_6
   \   000000F0   0x6088             STR      R0,[R1, #+8]
    188          		break;
   \   000000F2   0xE011             B.N      ??I2C1_EV_IRQHandler_6
    189          	case I2C_EVENT_SLAVE_BYTE_TRANSMITTED:              // This is not normally a transmitter, but because of the I2C HW bug
    190          		I2C_SendData(SENSORS_I2C,0x00);                        // in Geneva, the master read after it writes, and so this slave
   \                     ??I2C1_EV_IRQHandler_5: (+1)
   \   000000F4   0x2100             MOVS     R1,#+0
   \   000000F6   0x4620             MOV      R0,R4
   \   000000F8   0x.... 0x....      BL       I2C_SendData
    191          		I2C_GenerateSTOP(SENSORS_I2C, ENABLE);
   \   000000FC   0x2101             MOVS     R1,#+1
   \   000000FE   0x4620             MOV      R0,R4
   \   00000100   0x.... 0x....      BL       I2C_GenerateSTOP
    192          		break;                                          // has to handle read requests by sending dummy data.
   \   00000104   0xE008             B.N      ??I2C1_EV_IRQHandler_6
    193          	case I2C_EVENT_SLAVE_ACK_FAILURE:
    194          		SENSORS_I2C->SR1 &= 0x00FF;
   \                     ??I2C1_EV_IRQHandler_1: (+1)
   \   00000106   0x8AA0             LDRH     R0,[R4, #+20]
   \   00000108   0xF000 0x00FF      AND      R0,R0,#0xFF
   \   0000010C   0x82A0             STRH     R0,[R4, #+20]
    195          		break;
   \   0000010E   0xE003             B.N      ??I2C1_EV_IRQHandler_6
    196          	default:
    197          		break;
    198          	}
    199          
    200          	while ((SENSORS_I2C->SR1 & I2C_SR1_ADDR) == I2C_SR1_ADDR)
    201          	{
    202          		volatile uint32_t temp;
    203          
    204          		temp=SENSORS_I2C->SR1;
   \                     ??I2C1_EV_IRQHandler_10: (+1)
   \   00000110   0x8AA0             LDRH     R0,[R4, #+20]
   \   00000112   0x9000             STR      R0,[SP, #+0]
    205          		temp=SENSORS_I2C->SR2;
   \   00000114   0x8B20             LDRH     R0,[R4, #+24]
   \   00000116   0x9000             STR      R0,[SP, #+0]
    206          	}
   \                     ??I2C1_EV_IRQHandler_6: (+1)
   \   00000118   0x8AA0             LDRH     R0,[R4, #+20]
   \   0000011A   0x0780             LSLS     R0,R0,#+30
   \   0000011C   0xD4F8             BMI.N    ??I2C1_EV_IRQHandler_10
    207          	while ((SENSORS_I2C->SR1&I2C_SR1_STOPF) == I2C_SR1_STOPF)
   \                     ??I2C1_EV_IRQHandler_11: (+1)
   \   0000011E   0x8AA0             LDRH     R0,[R4, #+20]
   \   00000120   0x06C0             LSLS     R0,R0,#+27
   \   00000122   0xD506             BPL.N    ??I2C1_EV_IRQHandler_12
    208          	{
    209          		volatile uint32_t temp;
    210          
    211          		temp=SENSORS_I2C->SR1;
   \   00000124   0x8AA0             LDRH     R0,[R4, #+20]
   \   00000126   0x9000             STR      R0,[SP, #+0]
    212          		SENSORS_I2C->CR1 |= 0x1;
   \   00000128   0x8820             LDRH     R0,[R4, #+0]
   \   0000012A   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000012E   0x8020             STRH     R0,[R4, #+0]
   \   00000130   0xE7F5             B.N      ??I2C1_EV_IRQHandler_11
    213          	}
    214          	I2C_ClearITPendingBit(SENSORS_I2C,I2C_IT_SMBALERT | I2C_IT_TIMEOUT | I2C_IT_PECERR | I2C_IT_OVR |
    215          			I2C_IT_AF | I2C_IT_ARLO | I2C_IT_BERR);
   \                     ??I2C1_EV_IRQHandler_12: (+1)
   \   00000132   0x....             LDR.N    R1,??DataTable5_11  ;; 0x100df00
   \   00000134   0x4620             MOV      R0,R4
   \   00000136   0xE8BD 0x41FC      POP      {R2-R8,LR}
   \   0000013A   0x.... 0x....      B.W      I2C_ClearITPendingBit
    216          }

   \                                 In section .bss, align 4
   \                     i2c_cur_data:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
   \   00000004                      DS8 4
   \   00000008                      DS8 4

   \                                 In section .bss, align 1
   \                     i2c_read_next:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     IsInited:
   \   00000000                      DS8 1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     i2c_read_next

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x........         DC32     i2c_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     IsInited

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x40020400         DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x40005400         DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x00061A80         DC32     0x61a80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     i2c_cur_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x0001FC02         DC32     0x1fc02

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x00040042         DC32     0x40042

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x10000002         DC32     0x10000002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x10000010         DC32     0x10000010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x0100DF00         DC32     0x100df00

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   I2C1_ER_IRQHandler
        16   -> I2C_GenerateSTOP
      32   I2C1_EV_IRQHandler
        32   -- Indirect call
        32   -> I2C_ClearFlag
         0   -> I2C_ClearITPendingBit
        32   -> I2C_GenerateSTOP
        32   -> I2C_GetFlagStatus
        32   -> I2C_GetLastEvent
        32   -> I2C_ReceiveData
        32   -> I2C_SendData
       8   i2c_slave_deinit
         8   -> I2C_Cmd
      48   i2c_slave_init
        48   -> GPIO_Init
        48   -> GPIO_PinAFConfig
        48   -> I2C_Cmd
        48   -> I2C_DeInit
        48   -> I2C_ITConfig
        48   -> I2C_Init
        48   -> I2C_StretchClockCmd
        48   -> NVIC_Init
        48   -> RCC_AHB1PeriphClockCmd
        48   -> RCC_APB1PeriphClockCmd
       0   i2c_slave_irq_init
      24   i2c_slave_read_register
        24   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      50  I2C1_ER_IRQHandler
     318  I2C1_EV_IRQHandler
       1  IsInited
      12  i2c_cur_data
          I2C_interrupt_cb
          receiving_i2c_data
    2112  i2c_data
       1  i2c_read_next
      18  i2c_slave_deinit
     284  i2c_slave_init
       6  i2c_slave_irq_init
      92  i2c_slave_read_register

 
 2 126 bytes in section .bss
   816 bytes in section .text
 
   816 bytes of CODE memory
 2 126 bytes of DATA memory

Errors: none
Warnings: none
