###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.2.11706/W32 for ARM       22/Dec/2017  10:34:37
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\stm32f4x\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_iwdg.c
#    Command line =  
#        C:\Users\prasa\Documents\1.0.0\sources\stm32f4x\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_iwdg.c
#        -D IAR_COMPILER -D __inline=inline -D INV_MSG_ENABLE -D ASSERT -D
#        NUCLEO -D USE_STDPERIPH_DRIVER -D USE_HSE_BYPASS -D HSE_VALUE=8000000
#        -D STM32F411xE -lC
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list
#        --diag_suppress Pa050 -o
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 --silent --warnings_are_errors -e
#        --char_is_signed --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../board-hal\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Core\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Device\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/STM32F4xx_StdPeriph_Driver/inc\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/Images\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/DynamicProtocol\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list\stm32f4xx_iwdg.lst
#    Object file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj\stm32f4xx_iwdg.o
#
###############################################################################

C:\Users\prasa\Documents\1.0.0\sources\stm32f4x\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_iwdg.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_iwdg.c
      4            * @author  MCD Application Team
      5            * @version V1.6.1
      6            * @date    21-October-2015
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the Independent watchdog (IWDG) peripheral:           
      9            *           + Prescaler and Counter configuration
     10            *           + IWDG activation
     11            *           + Flag management
     12            *
     13              @verbatim    
     14           ===============================================================================
     15                                    ##### IWDG features #####
     16           ===============================================================================
     17              [..]  
     18                The IWDG can be started by either software or hardware (configurable
     19                through option byte).
     20                        
     21                The IWDG is clocked by its own dedicated low-speed clock (LSI) and
     22                thus stays active even if the main clock fails.
     23                Once the IWDG is started, the LSI is forced ON and cannot be disabled
     24                (LSI cannot be disabled too), and the counter starts counting down from 
     25                the reset value of 0xFFF. When it reaches the end of count value (0x000)
     26                a system reset is generated.
     27                The IWDG counter should be reloaded at regular intervals to prevent
     28                an MCU reset.
     29                                       
     30                The IWDG is implemented in the VDD voltage domain that is still functional
     31                in STOP and STANDBY mode (IWDG reset can wake-up from STANDBY).          
     32                        
     33                IWDGRST flag in RCC_CSR register can be used to inform when a IWDG
     34                reset occurs.
     35                        
     36                Min-max timeout value @32KHz (LSI): ~125us / ~32.7s
     37                The IWDG timeout may vary due to LSI frequency dispersion. STM32F4xx
     38                devices provide the capability to measure the LSI frequency (LSI clock
     39                connected internally to TIM5 CH4 input capture). The measured value
     40                can be used to have an IWDG timeout with an acceptable accuracy. 
     41                For more information, please refer to the STM32F4xx Reference manual
     42                      
     43                               ##### How to use this driver #####
     44           ===============================================================================
     45              [..]
     46                (#) Enable write access to IWDG_PR and IWDG_RLR registers using
     47                    IWDG_WriteAccessCmd(IWDG_WriteAccess_Enable) function
     48                           
     49                (#) Configure the IWDG prescaler using IWDG_SetPrescaler() function
     50                        
     51                (#) Configure the IWDG counter value using IWDG_SetReload() function.
     52                    This value will be loaded in the IWDG counter each time the counter
     53                    is reloaded, then the IWDG will start counting down from this value.
     54                        
     55                (#) Start the IWDG using IWDG_Enable() function, when the IWDG is used
     56                    in software mode (no need to enable the LSI, it will be enabled
     57                    by hardware)
     58                         
     59                (#) Then the application program must reload the IWDG counter at regular
     60                    intervals during normal operation to prevent an MCU reset, using
     61                    IWDG_ReloadCounter() function.      
     62                      
     63              @endverbatim    
     64            ******************************************************************************
     65            * @attention
     66            *
     67            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     68            *
     69            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     70            * You may not use this file except in compliance with the License.
     71            * You may obtain a copy of the License at:
     72            *
     73            *        http://www.st.com/software_license_agreement_liberty_v2
     74            *
     75            * Unless required by applicable law or agreed to in writing, software 
     76            * distributed under the License is distributed on an "AS IS" BASIS, 
     77            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     78            * See the License for the specific language governing permissions and
     79            * limitations under the License.
     80            *
     81            ******************************************************************************
     82            */
     83          
     84          /* Includes ------------------------------------------------------------------*/
     85          #include "stm32f4xx_iwdg.h"
     86          
     87          /** @addtogroup STM32F4xx_StdPeriph_Driver
     88            * @{
     89            */
     90          
     91          /** @defgroup IWDG 
     92            * @brief IWDG driver modules
     93            * @{
     94            */ 
     95          
     96          /* Private typedef -----------------------------------------------------------*/
     97          /* Private define ------------------------------------------------------------*/
     98          
     99          /* KR register bit mask */
    100          #define KR_KEY_RELOAD    ((uint16_t)0xAAAA)
    101          #define KR_KEY_ENABLE    ((uint16_t)0xCCCC)
    102          
    103          /* Private macro -------------------------------------------------------------*/
    104          /* Private variables ---------------------------------------------------------*/
    105          /* Private function prototypes -----------------------------------------------*/
    106          /* Private functions ---------------------------------------------------------*/
    107          
    108          /** @defgroup IWDG_Private_Functions
    109            * @{
    110            */
    111          
    112          /** @defgroup IWDG_Group1 Prescaler and Counter configuration functions
    113           *  @brief   Prescaler and Counter configuration functions
    114           *
    115          @verbatim   
    116           ===============================================================================
    117                        ##### Prescaler and Counter configuration functions #####
    118           ===============================================================================  
    119          
    120          @endverbatim
    121            * @{
    122            */
    123          
    124          /**
    125            * @brief  Enables or disables write access to IWDG_PR and IWDG_RLR registers.
    126            * @param  IWDG_WriteAccess: new state of write access to IWDG_PR and IWDG_RLR registers.
    127            *          This parameter can be one of the following values:
    128            *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
    129            *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
    130            * @retval None
    131            */

   \                                 In section .text, align 2, keep-with-next
    132          void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
    133          {
    134            /* Check the parameters */
    135            assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
    136            IWDG->KR = IWDG_WriteAccess;
   \                     IWDG_WriteAccessCmd: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable5  ;; 0x40003000
   \   00000002   0x6008             STR      R0,[R1, #+0]
    137          }
   \   00000004   0x4770             BX       LR               ;; return
    138          
    139          /**
    140            * @brief  Sets IWDG Prescaler value.
    141            * @param  IWDG_Prescaler: specifies the IWDG Prescaler value.
    142            *          This parameter can be one of the following values:
    143            *            @arg IWDG_Prescaler_4: IWDG prescaler set to 4
    144            *            @arg IWDG_Prescaler_8: IWDG prescaler set to 8
    145            *            @arg IWDG_Prescaler_16: IWDG prescaler set to 16
    146            *            @arg IWDG_Prescaler_32: IWDG prescaler set to 32
    147            *            @arg IWDG_Prescaler_64: IWDG prescaler set to 64
    148            *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
    149            *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
    150            * @retval None
    151            */

   \                                 In section .text, align 2, keep-with-next
    152          void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
    153          {
    154            /* Check the parameters */
    155            assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
    156            IWDG->PR = IWDG_Prescaler;
   \                     IWDG_SetPrescaler: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable5_1  ;; 0x40003004
   \   00000002   0x6008             STR      R0,[R1, #+0]
    157          }
   \   00000004   0x4770             BX       LR               ;; return
    158          
    159          /**
    160            * @brief  Sets IWDG Reload value.
    161            * @param  Reload: specifies the IWDG Reload value.
    162            *          This parameter must be a number between 0 and 0x0FFF.
    163            * @retval None
    164            */

   \                                 In section .text, align 2, keep-with-next
    165          void IWDG_SetReload(uint16_t Reload)
    166          {
    167            /* Check the parameters */
    168            assert_param(IS_IWDG_RELOAD(Reload));
    169            IWDG->RLR = Reload;
   \                     IWDG_SetReload: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable5_2  ;; 0x40003008
   \   00000002   0x6008             STR      R0,[R1, #+0]
    170          }
   \   00000004   0x4770             BX       LR               ;; return
    171          
    172          /**
    173            * @brief  Reloads IWDG counter with value defined in the reload register
    174            *         (write access to IWDG_PR and IWDG_RLR registers disabled).
    175            * @param  None
    176            * @retval None
    177            */

   \                                 In section .text, align 2, keep-with-next
    178          void IWDG_ReloadCounter(void)
    179          {
    180            IWDG->KR = KR_KEY_RELOAD;
   \                     IWDG_ReloadCounter: (+1)
   \   00000000   0xF64A 0x20AA      MOVW     R0,#+43690
   \   00000004   0x....             LDR.N    R1,??DataTable5  ;; 0x40003000
   \   00000006   0x6008             STR      R0,[R1, #+0]
    181          }
   \   00000008   0x4770             BX       LR               ;; return
    182          
    183          /**
    184            * @}
    185            */
    186          
    187          /** @defgroup IWDG_Group2 IWDG activation function
    188           *  @brief   IWDG activation function 
    189           *
    190          @verbatim   
    191           ===============================================================================
    192                              ##### IWDG activation function #####
    193           ===============================================================================  
    194          
    195          @endverbatim
    196            * @{
    197            */
    198          
    199          /**
    200            * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
    201            * @param  None
    202            * @retval None
    203            */

   \                                 In section .text, align 2, keep-with-next
    204          void IWDG_Enable(void)
    205          {
    206            IWDG->KR = KR_KEY_ENABLE;
   \                     IWDG_Enable: (+1)
   \   00000000   0xF64C 0x40CC      MOVW     R0,#+52428
   \   00000004   0x....             LDR.N    R1,??DataTable5  ;; 0x40003000
   \   00000006   0x6008             STR      R0,[R1, #+0]
    207          }
   \   00000008   0x4770             BX       LR               ;; return
    208          
    209          /**
    210            * @}
    211            */
    212          
    213          /** @defgroup IWDG_Group3 Flag management function 
    214           *  @brief  Flag management function  
    215           *
    216          @verbatim   
    217           ===============================================================================
    218                              ##### Flag management function #####
    219           ===============================================================================  
    220          
    221          @endverbatim
    222            * @{
    223            */
    224          
    225          /**
    226            * @brief  Checks whether the specified IWDG flag is set or not.
    227            * @param  IWDG_FLAG: specifies the flag to check.
    228            *          This parameter can be one of the following values:
    229            *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
    230            *            @arg IWDG_FLAG_RVU: Reload Value Update on going
    231            * @retval The new state of IWDG_FLAG (SET or RESET).
    232            */

   \                                 In section .text, align 2, keep-with-next
    233          FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
    234          {
    235            FlagStatus bitstatus = RESET;
   \                     IWDG_GetFlagStatus: (+1)
   \   00000000   0x2100             MOVS     R1,#+0
    236            /* Check the parameters */
    237            assert_param(IS_IWDG_FLAG(IWDG_FLAG));
    238            if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
   \   00000002   0x....             LDR.N    R2,??DataTable5_3  ;; 0x4000300c
   \   00000004   0x6812             LDR      R2,[R2, #+0]
   \   00000006   0x4202             TST      R2,R0
   \   00000008   0xD000             BEQ.N    ??IWDG_GetFlagStatus_0
    239            {
    240              bitstatus = SET;
   \   0000000A   0x2101             MOVS     R1,#+1
    241            }
    242            else
    243            {
    244              bitstatus = RESET;
    245            }
    246            /* Return the flag status */
    247            return bitstatus;
   \                     ??IWDG_GetFlagStatus_0: (+1)
   \   0000000C   0x4608             MOV      R0,R1
   \   0000000E   0x4770             BX       LR               ;; return
    248          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x40003000         DC32     0x40003000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x40003004         DC32     0x40003004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x40003008         DC32     0x40003008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x4000300C         DC32     0x4000300c
    249          
    250          /**
    251            * @}
    252            */
    253          
    254          /**
    255            * @}
    256            */
    257          
    258          /**
    259            * @}
    260            */
    261          
    262          /**
    263            * @}
    264            */
    265          
    266          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   IWDG_Enable
       0   IWDG_GetFlagStatus
       0   IWDG_ReloadCounter
       0   IWDG_SetPrescaler
       0   IWDG_SetReload
       0   IWDG_WriteAccessCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
      10  IWDG_Enable
      16  IWDG_GetFlagStatus
      10  IWDG_ReloadCounter
       6  IWDG_SetPrescaler
       6  IWDG_SetReload
       6  IWDG_WriteAccessCmd

 
 70 bytes in section .text
 
 70 bytes of CODE memory

Errors: none
Warnings: none
