###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.2.11706/W32 for ARM       22/Dec/2017  10:34:24
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\board-hal\dbg_gpio.c
#    Command line =  
#        C:\Users\prasa\Documents\1.0.0\sources\board-hal\dbg_gpio.c -D
#        IAR_COMPILER -D __inline=inline -D INV_MSG_ENABLE -D ASSERT -D NUCLEO
#        -D USE_STDPERIPH_DRIVER -D USE_HSE_BYPASS -D HSE_VALUE=8000000 -D
#        STM32F411xE -lC
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list
#        --diag_suppress Pa050 -o
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 --silent --warnings_are_errors -e
#        --char_is_signed --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../board-hal\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Core\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Device\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/STM32F4xx_StdPeriph_Driver/inc\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/Images\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/DynamicProtocol\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list\dbg_gpio.lst
#    Object file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj\dbg_gpio.o
#
###############################################################################

C:\Users\prasa\Documents\1.0.0\sources\board-hal\dbg_gpio.c
      1          /*
      2           * ________________________________________________________________________________________________________
      3           * Copyright (c) 2016-2016 InvenSense Inc. All rights reserved.
      4           *
      5           * This software, related documentation and any modifications thereto (collectively “Software”) is subject
      6           * to InvenSense and its licensors' intellectual property rights under U.S. and international copyright
      7           * and other intellectual property rights laws.
      8           *
      9           * InvenSense and its licensors retain all intellectual property and proprietary rights in and to the Software
     10           * and any use, reproduction, disclosure or distribution of the Software without an express license agreement
     11           * from InvenSense is strictly prohibited.
     12           *
     13           * EXCEPT AS OTHERWISE PROVIDED IN A LICENSE AGREEMENT BETWEEN THE PARTIES, THE SOFTWARE IS
     14           * PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
     15           * TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
     16           * EXCEPT AS OTHERWISE PROVIDED IN A LICENSE AGREEMENT BETWEEN THE PARTIES, IN NO EVENT SHALL
     17           * INVENSENSE BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, OR ANY
     18           * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
     19           * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
     20           * OF THE SOFTWARE.
     21           * ________________________________________________________________________________________________________
     22           */
     23          
     24          #include "dbg_gpio.h"
     25          
     26          #include "stm32f4xx_gpio.h"
     27          

   \                                 In section .text, align 4, keep-with-next
     28          static const uint16_t mapping[DBG_GPIO_MAX] = { GPIO_Pin_5, GPIO_Pin_6, GPIO_Pin_8 };
   \                     mapping:
   \   00000000   0x0020 0x0040      DC16 32, 64, 256
   \              0x0100       
   \   00000006   0x00 0x00          DC8 0, 0
     29          

   \                                 In section .text, align 2, keep-with-next
     30          static void do_init_gpio_out(int pin)
     31          {
   \                     do_init_gpio_out: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     32          	GPIO_InitTypeDef  GPIO_InitStructure;
     33          
     34          	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2004             MOVS     R0,#+4
   \   00000008   0x.... 0x....      BL       RCC_AHB1PeriphClockCmd
     35          
     36          	GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_100MHz;
   \   0000000C   0x2003             MOVS     R0,#+3
   \   0000000E   0xF88D 0x0005      STRB     R0,[SP, #+5]
     37          	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xF88D 0x0004      STRB     R0,[SP, #+4]
     38          	GPIO_InitStructure.GPIO_OType 	= GPIO_OType_PP;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
     39          	GPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
     40          	GPIO_InitStructure.GPIO_Pin     = pin;
   \   0000001E   0x9400             STR      R4,[SP, #+0]
     41          
     42          	GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x....             LDR.N    R0,??DataTable4  ;; 0x40020800
   \   00000024   0x.... 0x....      BL       GPIO_Init
     43          }
   \   00000028   0xBD13             POP      {R0,R1,R4,PC}    ;; return
     44          

   \                                 In section .text, align 2, keep-with-next
     45          static void do_set_gpio(int pin)
     46          {
     47          	GPIOC->BSRRL = pin;
   \                     do_set_gpio: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_1  ;; 0x40020818
   \   00000002   0x8008             STRH     R0,[R1, #+0]
     48          }
   \   00000004   0x4770             BX       LR               ;; return
     49          

   \                                 In section .text, align 2, keep-with-next
     50          static void do_reset_gpio(int pin)
     51          {
     52          	GPIOC->BSRRH = pin;
   \                     do_reset_gpio: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_2  ;; 0x4002081a
   \   00000002   0x8008             STRH     R0,[R1, #+0]
     53          }
   \   00000004   0x4770             BX       LR               ;; return
     54          

   \                                 In section .text, align 2, keep-with-next
     55          static void do_toggle_gpio(int pin)
     56          {
     57          	GPIOC->ODR ^= pin;
   \                     do_toggle_gpio: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_3  ;; 0x40020814
   \   00000002   0x680A             LDR      R2,[R1, #+0]
   \   00000004   0x4050             EORS     R0,R0,R2
   \   00000006   0x6008             STR      R0,[R1, #+0]
     58          }
   \   00000008   0x4770             BX       LR               ;; return
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void dbg_gpio_init_out(int gpio_num)
     61          {
     62          	if(gpio_num < DBG_GPIO_MAX) {
   \                     dbg_gpio_init_out: (+1)
   \   00000000   0x2803             CMP      R0,#+3
   \   00000002   0xDA04             BGE.N    ??dbg_gpio_init_out_0
     63          		do_init_gpio_out(mapping[gpio_num]);
   \   00000004   0x.... 0x....      ADR.W    R1,mapping
   \   00000008   0xF831 0x0010      LDRH     R0,[R1, R0, LSL #+1]
   \   0000000C   0x....             B.N      do_init_gpio_out
     64          	}
     65          }
   \                     ??dbg_gpio_init_out_0: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
     66          

   \                                 In section .text, align 2, keep-with-next
     67          void dbg_gpio_set(int gpio_num)
     68          {
     69          	if(gpio_num < DBG_GPIO_MAX) {
   \                     dbg_gpio_set: (+1)
   \   00000000   0x2803             CMP      R0,#+3
   \   00000002   0xDA04             BGE.N    ??dbg_gpio_set_0
     70          		do_set_gpio(mapping[gpio_num]);
   \   00000004   0x.... 0x....      ADR.W    R1,mapping
   \   00000008   0xF831 0x0010      LDRH     R0,[R1, R0, LSL #+1]
   \   0000000C   0x....             B.N      do_set_gpio
     71          	}
     72          }
   \                     ??dbg_gpio_set_0: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void dbg_gpio_clear(int gpio_num)
     75          {
     76          	if(gpio_num < DBG_GPIO_MAX) {
   \                     dbg_gpio_clear: (+1)
   \   00000000   0x2803             CMP      R0,#+3
   \   00000002   0xDA04             BGE.N    ??dbg_gpio_clear_0
     77          		do_reset_gpio(mapping[gpio_num]);
   \   00000004   0x.... 0x....      ADR.W    R1,mapping
   \   00000008   0xF831 0x0010      LDRH     R0,[R1, R0, LSL #+1]
   \   0000000C   0x....             B.N      do_reset_gpio
     78          	}
     79          }
   \                     ??dbg_gpio_clear_0: (+1)
   \   0000000E   0x4770             BX       LR               ;; return
     80          

   \                                 In section .text, align 2, keep-with-next
     81          void dbg_gpio_toggle(int gpio_num)
     82          {
     83          	if(gpio_num < DBG_GPIO_MAX) {
   \                     dbg_gpio_toggle: (+1)
   \   00000000   0x2803             CMP      R0,#+3
   \   00000002   0xDA04             BGE.N    ??dbg_gpio_toggle_0
     84          		do_toggle_gpio(mapping[gpio_num]);
   \   00000004   0x.... 0x....      ADR.W    R1,mapping
   \   00000008   0xF831 0x0010      LDRH     R0,[R1, R0, LSL #+1]
   \   0000000C   0x....             B.N      do_toggle_gpio
     85          	}
     86          }
   \                     ??dbg_gpio_toggle_0: (+1)
   \   0000000E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40020800         DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40020818         DC32     0x40020818

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x4002081A         DC32     0x4002081a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x40020814         DC32     0x40020814

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   dbg_gpio_clear
         0   -> do_reset_gpio
       0   dbg_gpio_init_out
         0   -> do_init_gpio_out
       0   dbg_gpio_set
         0   -> do_set_gpio
       0   dbg_gpio_toggle
         0   -> do_toggle_gpio
      16   do_init_gpio_out
        16   -> GPIO_Init
        16   -> RCC_AHB1PeriphClockCmd
       0   do_reset_gpio
       0   do_set_gpio
       0   do_toggle_gpio


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
      16  dbg_gpio_clear
      16  dbg_gpio_init_out
      16  dbg_gpio_set
      16  dbg_gpio_toggle
      42  do_init_gpio_out
       6  do_reset_gpio
       6  do_set_gpio
      10  do_toggle_gpio
       8  mapping

 
 152 bytes in section .text
 
 152 bytes of CODE memory

Errors: none
Warnings: none
