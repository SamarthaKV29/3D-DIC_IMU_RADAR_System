###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.2.11706/W32 for ARM       22/Dec/2017  10:34:30
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\Invn\Devices\Drivers\Icm20948\Icm20948Setup.c
#    Command line =  
#        C:\Users\prasa\Documents\1.0.0\sources\Invn\Devices\Drivers\Icm20948\Icm20948Setup.c
#        -D IAR_COMPILER -D __inline=inline -D INV_MSG_ENABLE -D ASSERT -D
#        NUCLEO -D USE_STDPERIPH_DRIVER -D USE_HSE_BYPASS -D HSE_VALUE=8000000
#        -D STM32F411xE -lC
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list
#        --diag_suppress Pa050 -o
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 --silent --warnings_are_errors -e
#        --char_is_signed --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../board-hal\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Core\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Device\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/STM32F4xx_StdPeriph_Driver/inc\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/Images\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/DynamicProtocol\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list\Icm20948Setup.lst
#    Object file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj\Icm20948Setup.o
#
###############################################################################

C:\Users\prasa\Documents\1.0.0\sources\Invn\Devices\Drivers\Icm20948\Icm20948Setup.c
      1          /** ________________________________________________________________________________________________________
      2           * Copyright (c) 2015-2015 InvenSense Inc. All rights reserved.
      3           *
      4           * This software, related documentation and any modifications thereto (collectively “Software”) is subject
      5           * to InvenSense and its licensors' intellectual property rights under U.S. and international copyright
      6           * and other intellectual property rights laws.
      7           *
      8           * InvenSense and its licensors retain all intellectual property and proprietary rights in and to the Software
      9           * and any use, reproduction, disclosure or distribution of the Software without an express license agreement
     10           * from InvenSense is strictly prohibited.
     11           *
     12           * EXCEPT AS OTHERWISE PROVIDED IN A LICENSE AGREEMENT BETWEEN THE PARTIES, THE SOFTWARE IS
     13           * PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
     14           * TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
     15           * EXCEPT AS OTHERWISE PROVIDED IN A LICENSE AGREEMENT BETWEEN THE PARTIES, IN NO EVENT SHALL
     16           * INVENSENSE BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, OR ANY
     17           * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
     18           * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
     19           * OF THE SOFTWARE.
     20           * ________________________________________________________________________________________________________
     21           */
     22          #include "Invn/Devices/SensorTypes.h"
     23          
     24          #include "Icm20948Setup.h"
     25          #include "Icm20948.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp int inv_icm20948_read_reg_one(struct inv_icm20948 *, uint8_t, uint8_t *)
   \                     inv_icm20948_read_reg_one: (+1)
   \   00000000   0x2301             MOVS     R3,#+1
   \   00000002   0x.... 0x....      B.W      inv_icm20948_read_reg
     26          #include "Icm20948Defs.h"
     27          #include "Icm20948DataBaseDriver.h"
     28          #include "Icm20948DataBaseControl.h"
     29          #include "Icm20948MPUFifoControl.h"
     30          #include "Icm20948Augmented.h"
     31          #include "Icm20948LoadFirmware.h"
     32          #include "Icm20948Dmp3Driver.h"
     33          
     34          #include "Invn/EmbUtils/DataConverter.h"
     35          #include "Invn/EmbUtils/Message.h"
     36          
     37          #include <assert.h>
     38          
     39          /** @brief Set of flags for BAC state */
     40          #define BAC_DRIVE   0x01
     41          #define BAC_WALK    0x02
     42          #define BAC_RUN     0x04
     43          #define BAC_BIKE    0x08
     44          #define BAC_TILT    0x10
     45          #define BAC_STILL   0x20
     46          
     47          /** @brief Conversion from DMP units to float format for compass scale */
     48          #define DMP_UNIT_TO_FLOAT_COMPASS_CONVERSION      (1/(float)(1UL<<16))
     49          //! Convert the \a value from QN value to float. \ingroup invn_macro 
     50          #define INVN_FXP_TO_FLT(value, shift)	( (float)  (int32_t)(value) / (float)(1ULL << (shift)) ) 

   \                                 In section .text, align 4, keep-with-next
     51          static uint8_t sensor_type_2_android_sensor(enum inv_icm20948_sensor sensor)
     52          {
     53          	switch(sensor) {
   \                     sensor_type_2_android_sensor: (+1)
   \   00000000   0x2813             CMP      R0,#+19
   \   00000002   0xD833             BHI.N    ??sensor_type_2_android_sensor_1
   \   00000004   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??sensor_type_2_android_sensor_0:
   \   00000008   0x0A 0x0C          DC8      0xA,0xC,0xE,0x10
   \              0x0E 0x10    
   \   0000000C   0x12 0x14          DC8      0x12,0x14,0x16,0x18
   \              0x16 0x18    
   \   00000010   0x1A 0x1C          DC8      0x1A,0x1C,0x1E,0x20
   \              0x1E 0x20    
   \   00000014   0x22 0x24          DC8      0x22,0x24,0x26,0x28
   \              0x26 0x28    
   \   00000018   0x2A 0x2C          DC8      0x2A,0x2C,0x2E,0x30
   \              0x2E 0x30    
     54          	case INV_ICM20948_SENSOR_ACCELEROMETER:                 return ANDROID_SENSOR_ACCELEROMETER;
   \                     ??sensor_type_2_android_sensor_2: (+1)
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x4770             BX       LR
     55          	case INV_ICM20948_SENSOR_GYROSCOPE:                     return ANDROID_SENSOR_GYROSCOPE;
   \                     ??sensor_type_2_android_sensor_3: (+1)
   \   00000020   0x2004             MOVS     R0,#+4
   \   00000022   0x4770             BX       LR
     56          	case INV_ICM20948_SENSOR_RAW_ACCELEROMETER:             return ANDROID_SENSOR_RAW_ACCELEROMETER;
   \                     ??sensor_type_2_android_sensor_4: (+1)
   \   00000024   0x202A             MOVS     R0,#+42
   \   00000026   0x4770             BX       LR
     57          	case INV_ICM20948_SENSOR_RAW_GYROSCOPE:                 return ANDROID_SENSOR_RAW_GYROSCOPE;
   \                     ??sensor_type_2_android_sensor_5: (+1)
   \   00000028   0x202B             MOVS     R0,#+43
   \   0000002A   0x4770             BX       LR
     58          	case INV_ICM20948_SENSOR_MAGNETIC_FIELD_UNCALIBRATED:   return ANDROID_SENSOR_MAGNETIC_FIELD_UNCALIBRATED;
   \                     ??sensor_type_2_android_sensor_6: (+1)
   \   0000002C   0x200E             MOVS     R0,#+14
   \   0000002E   0x4770             BX       LR
     59          	case INV_ICM20948_SENSOR_GYROSCOPE_UNCALIBRATED:        return ANDROID_SENSOR_GYROSCOPE_UNCALIBRATED;
   \                     ??sensor_type_2_android_sensor_7: (+1)
   \   00000030   0x2010             MOVS     R0,#+16
   \   00000032   0x4770             BX       LR
     60          	case INV_ICM20948_SENSOR_ACTIVITY_CLASSIFICATON:        return ANDROID_SENSOR_ACTIVITY_CLASSIFICATON;
   \                     ??sensor_type_2_android_sensor_8: (+1)
   \   00000034   0x202F             MOVS     R0,#+47
   \   00000036   0x4770             BX       LR
     61          	case INV_ICM20948_SENSOR_STEP_DETECTOR:                 return ANDROID_SENSOR_STEP_DETECTOR;
   \                     ??sensor_type_2_android_sensor_9: (+1)
   \   00000038   0x2012             MOVS     R0,#+18
   \   0000003A   0x4770             BX       LR
     62          	case INV_ICM20948_SENSOR_STEP_COUNTER:                  return ANDROID_SENSOR_STEP_COUNTER;
   \                     ??sensor_type_2_android_sensor_10: (+1)
   \   0000003C   0x2013             MOVS     R0,#+19
   \   0000003E   0x4770             BX       LR
     63          	case INV_ICM20948_SENSOR_GAME_ROTATION_VECTOR:          return ANDROID_SENSOR_GAME_ROTATION_VECTOR;
   \                     ??sensor_type_2_android_sensor_11: (+1)
   \   00000040   0x200F             MOVS     R0,#+15
   \   00000042   0x4770             BX       LR
     64          	case INV_ICM20948_SENSOR_ROTATION_VECTOR:               return ANDROID_SENSOR_ROTATION_VECTOR;
   \                     ??sensor_type_2_android_sensor_12: (+1)
   \   00000044   0x200B             MOVS     R0,#+11
   \   00000046   0x4770             BX       LR
     65          	case INV_ICM20948_SENSOR_GEOMAGNETIC_ROTATION_VECTOR:   return ANDROID_SENSOR_GEOMAGNETIC_ROTATION_VECTOR;
   \                     ??sensor_type_2_android_sensor_13: (+1)
   \   00000048   0x2014             MOVS     R0,#+20
   \   0000004A   0x4770             BX       LR
     66          	case INV_ICM20948_SENSOR_GEOMAGNETIC_FIELD:             return ANDROID_SENSOR_GEOMAGNETIC_FIELD;
   \                     ??sensor_type_2_android_sensor_14: (+1)
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0x4770             BX       LR
     67          	case INV_ICM20948_SENSOR_WAKEUP_SIGNIFICANT_MOTION:     return ANDROID_SENSOR_WAKEUP_SIGNIFICANT_MOTION;
   \                     ??sensor_type_2_android_sensor_15: (+1)
   \   00000050   0x2011             MOVS     R0,#+17
   \   00000052   0x4770             BX       LR
     68          	case INV_ICM20948_SENSOR_FLIP_PICKUP:                   return ANDROID_SENSOR_FLIP_PICKUP;
   \                     ??sensor_type_2_android_sensor_16: (+1)
   \   00000054   0x202E             MOVS     R0,#+46
   \   00000056   0x4770             BX       LR
     69          	case INV_ICM20948_SENSOR_WAKEUP_TILT_DETECTOR:          return ANDROID_SENSOR_WAKEUP_TILT_DETECTOR;
   \                     ??sensor_type_2_android_sensor_17: (+1)
   \   00000058   0x2029             MOVS     R0,#+41
   \   0000005A   0x4770             BX       LR
     70          	case INV_ICM20948_SENSOR_GRAVITY:                       return ANDROID_SENSOR_GRAVITY;
   \                     ??sensor_type_2_android_sensor_18: (+1)
   \   0000005C   0x2009             MOVS     R0,#+9
   \   0000005E   0x4770             BX       LR
     71          	case INV_ICM20948_SENSOR_LINEAR_ACCELERATION:           return ANDROID_SENSOR_LINEAR_ACCELERATION;
   \                     ??sensor_type_2_android_sensor_19: (+1)
   \   00000060   0x200A             MOVS     R0,#+10
   \   00000062   0x4770             BX       LR
     72          	case INV_ICM20948_SENSOR_ORIENTATION:                   return ANDROID_SENSOR_ORIENTATION;
   \                     ??sensor_type_2_android_sensor_20: (+1)
   \   00000064   0x2003             MOVS     R0,#+3
   \   00000066   0x4770             BX       LR
     73          	case INV_ICM20948_SENSOR_B2S:                           return ANDROID_SENSOR_B2S;
   \                     ??sensor_type_2_android_sensor_21: (+1)
   \   00000068   0x202D             MOVS     R0,#+45
   \   0000006A   0x4770             BX       LR
     74          	default:                                                return ANDROID_SENSOR_NUM_MAX;
   \                     ??sensor_type_2_android_sensor_1: (+1)
   \   0000006C   0x202C             MOVS     R0,#+44
   \   0000006E   0x4770             BX       LR               ;; return
     75          	}
     76          }
     77          

   \                                 In section .text, align 4, keep-with-next
     78          enum inv_icm20948_sensor inv_icm20948_sensor_android_2_sensor_type(int sensor)
     79          {
     80          	switch(sensor) {
   \                     inv_icm20948_sensor_android_2_sensor_type: (+1)
   \   00000000   0x1E40             SUBS     R0,R0,#+1
   \   00000002   0x282E             CMP      R0,#+46
   \   00000004   0xD841             BHI.N    ??inv_icm20948_sensor_android_2_sensor_type_1
   \   00000006   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??inv_icm20948_sensor_android_2_sensor_type_0:
   \   0000000A   0x18 0x30          DC8      0x18,0x30,0x3C,0x1A
   \              0x3C 0x1A    
   \   0000000E   0x40 0x40          DC8      0x40,0x40,0x40,0x40
   \              0x40 0x40    
   \   00000012   0x38 0x3A          DC8      0x38,0x3A,0x2C,0x40
   \              0x2C 0x40    
   \   00000016   0x40 0x20          DC8      0x40,0x20,0x2A,0x22
   \              0x2A 0x22    
   \   0000001A   0x32 0x26          DC8      0x32,0x26,0x28,0x2E
   \              0x28 0x2E    
   \   0000001E   0x40 0x40          DC8      0x40,0x40,0x40,0x40
   \              0x40 0x40    
   \   00000022   0x40 0x40          DC8      0x40,0x40,0x40,0x40
   \              0x40 0x40    
   \   00000026   0x40 0x40          DC8      0x40,0x40,0x40,0x40
   \              0x40 0x40    
   \   0000002A   0x40 0x40          DC8      0x40,0x40,0x40,0x40
   \              0x40 0x40    
   \   0000002E   0x40 0x40          DC8      0x40,0x40,0x40,0x40
   \              0x40 0x40    
   \   00000032   0x36 0x1C          DC8      0x36,0x1C,0x1E,0x40
   \              0x1E 0x40    
   \   00000036   0x3E 0x34          DC8      0x3E,0x34,0x24,0x0
   \              0x24 0x00    
     81          	case ANDROID_SENSOR_ACCELEROMETER:                    return INV_ICM20948_SENSOR_ACCELEROMETER;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_2: (+1)
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x4770             BX       LR
     82          	case ANDROID_SENSOR_GYROSCOPE:                        return INV_ICM20948_SENSOR_GYROSCOPE;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_3: (+1)
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x4770             BX       LR
     83          	case ANDROID_SENSOR_RAW_ACCELEROMETER:                return INV_ICM20948_SENSOR_RAW_ACCELEROMETER;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_4: (+1)
   \   00000042   0x2002             MOVS     R0,#+2
   \   00000044   0x4770             BX       LR
     84          	case ANDROID_SENSOR_RAW_GYROSCOPE:                    return INV_ICM20948_SENSOR_RAW_GYROSCOPE;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_5: (+1)
   \   00000046   0x2003             MOVS     R0,#+3
   \   00000048   0x4770             BX       LR
     85          	case ANDROID_SENSOR_MAGNETIC_FIELD_UNCALIBRATED:      return INV_ICM20948_SENSOR_MAGNETIC_FIELD_UNCALIBRATED;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_6: (+1)
   \   0000004A   0x2004             MOVS     R0,#+4
   \   0000004C   0x4770             BX       LR
     86          	case ANDROID_SENSOR_GYROSCOPE_UNCALIBRATED:           return INV_ICM20948_SENSOR_GYROSCOPE_UNCALIBRATED;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_7: (+1)
   \   0000004E   0x2005             MOVS     R0,#+5
   \   00000050   0x4770             BX       LR
     87          	case ANDROID_SENSOR_ACTIVITY_CLASSIFICATON:           return INV_ICM20948_SENSOR_ACTIVITY_CLASSIFICATON;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_8: (+1)
   \   00000052   0x2006             MOVS     R0,#+6
   \   00000054   0x4770             BX       LR
     88          	case ANDROID_SENSOR_STEP_DETECTOR:                    return INV_ICM20948_SENSOR_STEP_DETECTOR;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_9: (+1)
   \   00000056   0x2007             MOVS     R0,#+7
   \   00000058   0x4770             BX       LR
     89          	case ANDROID_SENSOR_STEP_COUNTER:                     return INV_ICM20948_SENSOR_STEP_COUNTER;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_10: (+1)
   \   0000005A   0x2008             MOVS     R0,#+8
   \   0000005C   0x4770             BX       LR
     90          	case ANDROID_SENSOR_GAME_ROTATION_VECTOR:             return INV_ICM20948_SENSOR_GAME_ROTATION_VECTOR;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_11: (+1)
   \   0000005E   0x2009             MOVS     R0,#+9
   \   00000060   0x4770             BX       LR
     91          	case ANDROID_SENSOR_ROTATION_VECTOR:                  return INV_ICM20948_SENSOR_ROTATION_VECTOR;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_12: (+1)
   \   00000062   0x200A             MOVS     R0,#+10
   \   00000064   0x4770             BX       LR
     92          	case ANDROID_SENSOR_GEOMAGNETIC_ROTATION_VECTOR:      return INV_ICM20948_SENSOR_GEOMAGNETIC_ROTATION_VECTOR;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_13: (+1)
   \   00000066   0x200B             MOVS     R0,#+11
   \   00000068   0x4770             BX       LR
     93          	case ANDROID_SENSOR_GEOMAGNETIC_FIELD:                return INV_ICM20948_SENSOR_GEOMAGNETIC_FIELD;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_14: (+1)
   \   0000006A   0x200C             MOVS     R0,#+12
   \   0000006C   0x4770             BX       LR
     94          	case ANDROID_SENSOR_WAKEUP_SIGNIFICANT_MOTION:        return INV_ICM20948_SENSOR_WAKEUP_SIGNIFICANT_MOTION;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_15: (+1)
   \   0000006E   0x200D             MOVS     R0,#+13
   \   00000070   0x4770             BX       LR
     95          	case ANDROID_SENSOR_FLIP_PICKUP:                      return INV_ICM20948_SENSOR_FLIP_PICKUP;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_16: (+1)
   \   00000072   0x200E             MOVS     R0,#+14
   \   00000074   0x4770             BX       LR
     96          	case ANDROID_SENSOR_WAKEUP_TILT_DETECTOR:             return INV_ICM20948_SENSOR_WAKEUP_TILT_DETECTOR;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_17: (+1)
   \   00000076   0x200F             MOVS     R0,#+15
   \   00000078   0x4770             BX       LR
     97          	case ANDROID_SENSOR_GRAVITY:                          return INV_ICM20948_SENSOR_GRAVITY;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_18: (+1)
   \   0000007A   0x2010             MOVS     R0,#+16
   \   0000007C   0x4770             BX       LR
     98          	case ANDROID_SENSOR_LINEAR_ACCELERATION:              return INV_ICM20948_SENSOR_LINEAR_ACCELERATION;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_19: (+1)
   \   0000007E   0x2011             MOVS     R0,#+17
   \   00000080   0x4770             BX       LR
     99          	case ANDROID_SENSOR_ORIENTATION:                      return INV_ICM20948_SENSOR_ORIENTATION;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_20: (+1)
   \   00000082   0x2012             MOVS     R0,#+18
   \   00000084   0x4770             BX       LR
    100          	case ANDROID_SENSOR_B2S:                              return INV_ICM20948_SENSOR_B2S;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_21: (+1)
   \   00000086   0x2013             MOVS     R0,#+19
   \   00000088   0x4770             BX       LR
    101          	default:                                              return INV_ICM20948_SENSOR_MAX;
   \                     ??inv_icm20948_sensor_android_2_sensor_type_1: (+1)
   \   0000008A   0x2014             MOVS     R0,#+20
   \   0000008C   0x4770             BX       LR               ;; return
    102          	}
    103          }
    104          

   \                                 In section .text, align 2, keep-with-next
    105          static int skip_sensor(struct inv_icm20948 * s, unsigned char androidSensor)
    106          {
   \                     skip_sensor: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4608             MOV      R0,R1
    107          	enum inv_icm20948_sensor icm20948_sensor_id = inv_icm20948_sensor_android_2_sensor_type(androidSensor);
   \   00000006   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   0000000A   0x4601             MOV      R1,R0
    108          	uint8_t skip_sample = s->skip_sample[icm20948_sensor_id];
   \   0000000C   0x1860             ADDS     R0,R4,R1
   \   0000000E   0xF890 0x22AC      LDRB     R2,[R0, #+684]
   \   00000012   0x0010             MOVS     R0,R2
    109          	
    110          	if (s->skip_sample[icm20948_sensor_id])
   \   00000014   0xD003             BEQ.N    ??skip_sensor_0
    111          		s->skip_sample[icm20948_sensor_id]--;
   \   00000016   0x1E52             SUBS     R2,R2,#+1
   \   00000018   0x4421             ADD      R1,R4,R1
   \   0000001A   0xF881 0x22AC      STRB     R2,[R1, #+684]
    112          
    113          	return skip_sample;
   \                     ??skip_sensor_0: (+1)
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    114          }
    115          
    116          /* Identification related functions */

   \                                 In section .text, align 2, keep-with-next
    117          int inv_icm20948_get_whoami(struct inv_icm20948 * s, uint8_t * whoami)
    118          {
    119          	return inv_icm20948_read_reg_one(s, REG_WHO_AM_I, whoami);
   \                     inv_icm20948_get_whoami: (+1)
   \   00000000   0x460A             MOV      R2,R1
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x....             B.N      inv_icm20948_read_reg_one
    120          }
    121          

   \                                 In section .text, align 4, keep-with-next
    122          void inv_icm20948_init_matrix(struct inv_icm20948 * s)
    123          {
   \                     inv_icm20948_init_matrix: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    124          	// initialize chip to body
    125          	s->s_quat_chip_to_body[0] = (1L<<30);
   \   00000004   0xF104 0x00A8      ADD      R0,R4,#+168
   \   00000008   0xF04F 0x4580      MOV      R5,#+1073741824
   \   0000000C   0x6005             STR      R5,[R0, #+0]
    126          	s->s_quat_chip_to_body[1] = 0;
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x6041             STR      R1,[R0, #+4]
    127          	s->s_quat_chip_to_body[2] = 0;
   \   00000012   0x6081             STR      R1,[R0, #+8]
    128          	s->s_quat_chip_to_body[3] = 0;
   \   00000014   0x60C1             STR      R1,[R0, #+12]
    129          	//initialize mounting matrix
    130          	memset(s->mounting_matrix, 0, sizeof(s->mounting_matrix));
   \   00000016   0xF44F 0x701D      MOV      R0,#+628
   \   0000001A   0x1826             ADDS     R6,R4,R0
   \   0000001C   0x460A             MOV      R2,R1
   \   0000001E   0x2109             MOVS     R1,#+9
   \   00000020   0x4630             MOV      R0,R6
   \   00000022   0x.... 0x....      BL       __aeabi_memset4
    131          	s->mounting_matrix[0] = 1;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x7030             STRB     R0,[R6, #+0]
    132          	s->mounting_matrix[4] = 1;
   \   0000002A   0x7130             STRB     R0,[R6, #+4]
    133          	s->mounting_matrix[8] = 1;
   \   0000002C   0x7230             STRB     R0,[R6, #+8]
    134          	//initialize soft iron matrix
    135          	s->soft_iron_matrix[0] = (1L<<30);
   \   0000002E   0x6175             STR      R5,[R6, #+20]
    136          	s->soft_iron_matrix[4] = (1L<<30);
   \   00000030   0x6275             STR      R5,[R6, #+36]
    137          	s->soft_iron_matrix[8] = (1L<<30);
   \   00000032   0x6375             STR      R5,[R6, #+52]
    138          
    139          	inv_icm20948_set_chip_to_body_axis_quaternion(s, s->mounting_matrix, 0.0);
   \   00000034   0xED9F 0x....      VLDR.W   S0,??DataTable8  ;; 0x0
   \   00000038   0x4631             MOV      R1,R6
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000040   0x.... 0x....      B.W      inv_icm20948_set_chip_to_body_axis_quaternion
    140          }
    141          

   \                                 In section .text, align 2, keep-with-next
    142          int inv_icm20948_init_structure(struct inv_icm20948 * s)
    143          {
   \                     inv_icm20948_init_structure: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    144          	int i;
    145          	inv_icm20948_base_control_init(s);
   \   00000004   0x.... 0x....      BL       inv_icm20948_base_control_init
    146          	inv_icm20948_transport_init(s);
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       inv_icm20948_transport_init
    147          	inv_icm20948_augmented_init(s);
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       inv_icm20948_augmented_init
    148          	//Init state
    149          	s->set_accuracy = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xF8A4 0x04F2      STRH     R0,[R4, #+1266]
    150          	s->new_accuracy = 0;
   \   0000001A   0xF8C4 0x04F4      STR      R0,[R4, #+1268]
    151          	for(i = 0; i < GENERAL_SENSORS_MAX; i ++)
   \   0000001E   0x4605             MOV      R5,R0
   \   00000020   0xE009             B.N      ??inv_icm20948_init_structure_0
    152          		s->timestamp[inv_icm20948_sensor_android_2_sensor_type(i)] = 0;
   \                     ??inv_icm20948_init_structure_1: (+1)
   \   00000022   0x4628             MOV      R0,R5
   \   00000024   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   00000028   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0x4613             MOV      R3,R2
   \   00000030   0xE9C0 0x23B2      STRD     R2,R3,[R0, #+712]
   \   00000034   0x1C6D             ADDS     R5,R5,#+1
   \                     ??inv_icm20948_init_structure_0: (+1)
   \   00000036   0x2D33             CMP      R5,#+51
   \   00000038   0xDBF3             BLT.N    ??inv_icm20948_init_structure_1
    153          		
    154          	return 0;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    155          }
    156          

   \                                 In section .text, align 2, keep-with-next
    157          int inv_icm20948_initialize(struct inv_icm20948 * s, const uint8_t *dmp3_image, uint32_t dmp3_image_size)
    158          {
   \                     inv_icm20948_initialize: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    159          	if(s->serif.is_spi) {
   \   00000002   0x6943             LDR      R3,[R0, #+20]
   \   00000004   0x2B00             CMP      R3,#+0
   \   00000006   0x4613             MOV      R3,R2
   \   00000008   0x460A             MOV      R2,R1
   \   0000000A   0xD006             BEQ.N    ??inv_icm20948_initialize_0
    160          		/* Hardware initialization */
    161          		// No image to be loaded from flash, no pointer to pass.
    162          		if (inv_icm20948_initialize_lower_driver(s, SERIAL_INTERFACE_SPI, dmp3_image, dmp3_image_size)) {
   \   0000000C   0x2102             MOVS     R1,#+2
   \   0000000E   0x.... 0x....      BL       inv_icm20948_initialize_lower_driver
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD106             BNE.N    ??inv_icm20948_initialize_1
    163          			return -1;
    164          		}
    165          	}
    166          	else {
    167          		/* Hardware initialization */
    168          		// No image to be loaded from flash, no pointer to pass.
    169          		if (inv_icm20948_initialize_lower_driver(s, SERIAL_INTERFACE_I2C, dmp3_image, dmp3_image_size)) {
    170          			return -1;
    171          		}
    172          	}
    173          	return 0;
   \                     ??inv_icm20948_initialize_2: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD02             POP      {R1,PC}          ;; return
   \                     ??inv_icm20948_initialize_0: (+1)
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x.... 0x....      BL       inv_icm20948_initialize_lower_driver
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD0F8             BEQ.N    ??inv_icm20948_initialize_2
   \                     ??inv_icm20948_initialize_1: (+1)
   \   00000024   0xF04F 0x30FF      MOV      R0,#-1
   \   00000028   0xBD02             POP      {R1,PC}
    174          }
    175          

   \                                 In section .text, align 2, keep-with-next
    176          int inv_icm20948_init_scale(struct inv_icm20948 * s)
    177          {
   \                     inv_icm20948_init_scale: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    178          	/* Force accelero fullscale to 4g and gyr to 200dps */
    179          	inv_icm20948_set_accel_fullscale(s, MPU_FS_4G);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x.... 0x....      BL       inv_icm20948_set_accel_fullscale
    180          	inv_icm20948_set_gyro_fullscale(s, MPU_FS_2000dps);
   \   0000000A   0x2103             MOVS     R1,#+3
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       inv_icm20948_set_gyro_fullscale
    181          
    182          	return 0;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
    183          }
    184          

   \                                 In section .text, align 2, keep-with-next
    185          int inv_icm20948_set_fsr(struct inv_icm20948 * s, enum inv_icm20948_sensor sensor, const void * fsr)
    186          {
   \                     inv_icm20948_set_fsr: (+1)
   \   00000000   0xB418             PUSH     {R3,R4}
   \   00000002   0x4603             MOV      R3,R0
    187          	int result = 0;
   \   00000004   0x2000             MOVS     R0,#+0
    188          	int * castedvalue = (int*) fsr;
    189          	if((sensor == INV_ICM20948_SENSOR_RAW_ACCELEROMETER) ||
    190          	   (sensor == INV_ICM20948_SENSOR_ACCELEROMETER)){
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x2C02             CMP      R4,#+2
   \   0000000A   0xD001             BEQ.N    ??inv_icm20948_set_fsr_0
   \   0000000C   0x2900             CMP      R1,#+0
   \   0000000E   0xD113             BNE.N    ??inv_icm20948_set_fsr_1
    191          		enum mpu_accel_fs afsr;
    192          		if(*castedvalue == 2)
   \                     ??inv_icm20948_set_fsr_0: (+1)
   \   00000010   0x6810             LDR      R0,[R2, #+0]
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD101             BNE.N    ??inv_icm20948_set_fsr_2
    193          			afsr = MPU_FS_2G;
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xE00A             B.N      ??inv_icm20948_set_fsr_3
    194          		else if(*castedvalue == 4)
   \                     ??inv_icm20948_set_fsr_2: (+1)
   \   0000001A   0x2804             CMP      R0,#+4
   \   0000001C   0xD101             BNE.N    ??inv_icm20948_set_fsr_4
    195          			afsr = MPU_FS_4G;
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0xE006             B.N      ??inv_icm20948_set_fsr_3
    196          		else if(*castedvalue == 8)
   \                     ??inv_icm20948_set_fsr_4: (+1)
   \   00000022   0x2808             CMP      R0,#+8
   \   00000024   0xD101             BNE.N    ??inv_icm20948_set_fsr_5
    197          			afsr = MPU_FS_8G;
   \   00000026   0x2102             MOVS     R1,#+2
   \   00000028   0xE002             B.N      ??inv_icm20948_set_fsr_3
    198          		else if(*castedvalue == 16)
   \                     ??inv_icm20948_set_fsr_5: (+1)
   \   0000002A   0x2810             CMP      R0,#+16
   \   0000002C   0xD123             BNE.N    ??inv_icm20948_set_fsr_6
    199          			afsr = MPU_FS_16G;
   \   0000002E   0x2103             MOVS     R1,#+3
    200          		else 
    201          			return -1;
    202          		result |= inv_icm20948_set_accel_fullscale(s, afsr);
   \                     ??inv_icm20948_set_fsr_3: (+1)
   \   00000030   0x4618             MOV      R0,R3
   \   00000032   0xBC14             POP      {R2,R4}
   \   00000034   0x.... 0x....      B.W      inv_icm20948_set_accel_fullscale
    203          	}
    204          	else if((sensor == INV_ICM20948_SENSOR_GYROSCOPE) ||
    205          			(sensor == INV_ICM20948_SENSOR_RAW_GYROSCOPE) ||
    206          			(sensor == INV_ICM20948_SENSOR_GYROSCOPE_UNCALIBRATED)) {
   \                     ??inv_icm20948_set_fsr_1: (+1)
   \   00000038   0x2C01             CMP      R4,#+1
   \   0000003A   0xD003             BEQ.N    ??inv_icm20948_set_fsr_7
   \   0000003C   0x2C03             CMP      R4,#+3
   \   0000003E   0xD001             BEQ.N    ??inv_icm20948_set_fsr_7
   \   00000040   0x2C05             CMP      R4,#+5
   \   00000042   0xD107             BNE.N    ??inv_icm20948_set_fsr_8
    207          		enum mpu_gyro_fs gfsr;
    208          		if(*castedvalue == 250)
   \                     ??inv_icm20948_set_fsr_7: (+1)
   \   00000044   0x6810             LDR      R0,[R2, #+0]
   \   00000046   0x28FA             CMP      R0,#+250
   \   00000048   0xD106             BNE.N    ??inv_icm20948_set_fsr_9
    209          			gfsr = MPU_FS_250dps;
   \   0000004A   0x2100             MOVS     R1,#+0
    210          		else if(*castedvalue == 500)
    211          			gfsr = MPU_FS_500dps;
    212          		else if(*castedvalue == 1000)
    213          		 	gfsr = MPU_FS_1000dps;
    214          		else if(*castedvalue == 2000)
    215          		 	gfsr = MPU_FS_2000dps;
    216          		else 
    217          			return -1;
    218          		result |= inv_icm20948_set_gyro_fullscale(s, gfsr);
   \                     ??inv_icm20948_set_fsr_10: (+1)
   \   0000004C   0x4618             MOV      R0,R3
   \   0000004E   0xBC14             POP      {R2,R4}
   \   00000050   0x.... 0x....      B.W      inv_icm20948_set_gyro_fullscale
    219          	}
    220          	return result;
   \                     ??inv_icm20948_set_fsr_8: (+1)
   \   00000054   0xBC12             POP      {R1,R4}
   \   00000056   0x4770             BX       LR               ;; return
   \                     ??inv_icm20948_set_fsr_9: (+1)
   \   00000058   0xF5B0 0x7FFA      CMP      R0,#+500
   \   0000005C   0xD101             BNE.N    ??inv_icm20948_set_fsr_11
   \   0000005E   0x2101             MOVS     R1,#+1
   \   00000060   0xE7F4             B.N      ??inv_icm20948_set_fsr_10
   \                     ??inv_icm20948_set_fsr_11: (+1)
   \   00000062   0xF5B0 0x7F7A      CMP      R0,#+1000
   \   00000066   0xD101             BNE.N    ??inv_icm20948_set_fsr_12
   \   00000068   0x2102             MOVS     R1,#+2
   \   0000006A   0xE7EF             B.N      ??inv_icm20948_set_fsr_10
   \                     ??inv_icm20948_set_fsr_12: (+1)
   \   0000006C   0xF5B0 0x6FFA      CMP      R0,#+2000
   \   00000070   0xD101             BNE.N    ??inv_icm20948_set_fsr_6
   \   00000072   0x2103             MOVS     R1,#+3
   \   00000074   0xE7EA             B.N      ??inv_icm20948_set_fsr_10
   \                     ??inv_icm20948_set_fsr_6: (+1)
   \   00000076   0xF04F 0x30FF      MOV      R0,#-1
   \   0000007A   0xE7EB             B.N      ??inv_icm20948_set_fsr_8
    221          }
    222          

   \                                 In section .text, align 2, keep-with-next
    223          int inv_icm20948_get_fsr(struct inv_icm20948 * s, enum inv_icm20948_sensor sensor, const void * fsr)
    224          {
   \                     inv_icm20948_get_fsr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4614             MOV      R4,R2
    225          	
    226          	if((sensor == INV_ICM20948_SENSOR_RAW_ACCELEROMETER) ||
    227          	   (sensor == INV_ICM20948_SENSOR_ACCELEROMETER)){
   \   00000004   0x460A             MOV      R2,R1
   \   00000006   0x2A02             CMP      R2,#+2
   \   00000008   0xD001             BEQ.N    ??inv_icm20948_get_fsr_0
   \   0000000A   0x2900             CMP      R1,#+0
   \   0000000C   0xD116             BNE.N    ??inv_icm20948_get_fsr_1
    228          		unsigned char * castedvalue = (unsigned char*) fsr;
    229          		int afsr = inv_icm20948_get_accel_fullscale(s);
   \                     ??inv_icm20948_get_fsr_0: (+1)
   \   0000000E   0x.... 0x....      BL       inv_icm20948_get_accel_fullscale
    230          		if(afsr == MPU_FS_2G)
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD102             BNE.N    ??inv_icm20948_get_fsr_2
    231          			* castedvalue = 2;
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x7020             STRB     R0,[R4, #+0]
   \   0000001A   0xE00D             B.N      ??inv_icm20948_get_fsr_3
    232          		else if(afsr == MPU_FS_4G)
   \                     ??inv_icm20948_get_fsr_2: (+1)
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD102             BNE.N    ??inv_icm20948_get_fsr_4
    233          			* castedvalue = 4;
   \   00000020   0x2004             MOVS     R0,#+4
   \   00000022   0x7020             STRB     R0,[R4, #+0]
   \   00000024   0xE008             B.N      ??inv_icm20948_get_fsr_3
    234          		else if(afsr == MPU_FS_8G)
   \                     ??inv_icm20948_get_fsr_4: (+1)
   \   00000026   0x2802             CMP      R0,#+2
   \   00000028   0xD102             BNE.N    ??inv_icm20948_get_fsr_5
    235          			* castedvalue = 8;
   \   0000002A   0x2008             MOVS     R0,#+8
   \   0000002C   0x7020             STRB     R0,[R4, #+0]
   \   0000002E   0xE003             B.N      ??inv_icm20948_get_fsr_3
    236          		else if(afsr == MPU_FS_16G)
   \                     ??inv_icm20948_get_fsr_5: (+1)
   \   00000030   0x2803             CMP      R0,#+3
   \   00000032   0xD123             BNE.N    ??inv_icm20948_get_fsr_6
    237          			* castedvalue = 16;
   \   00000034   0x2010             MOVS     R0,#+16
   \   00000036   0x7020             STRB     R0,[R4, #+0]
    238          		else 
    239          			return -1;
    240          		
    241          		return 1;
   \                     ??inv_icm20948_get_fsr_3: (+1)
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xBD10             POP      {R4,PC}
    242          	}
    243          	else if((sensor == INV_ICM20948_SENSOR_GYROSCOPE) ||
    244          			(sensor == INV_ICM20948_SENSOR_RAW_GYROSCOPE) ||
    245          			(sensor == INV_ICM20948_SENSOR_GYROSCOPE_UNCALIBRATED)) {
   \                     ??inv_icm20948_get_fsr_1: (+1)
   \   0000003C   0x2A01             CMP      R2,#+1
   \   0000003E   0xD003             BEQ.N    ??inv_icm20948_get_fsr_7
   \   00000040   0x2A03             CMP      R2,#+3
   \   00000042   0xD001             BEQ.N    ??inv_icm20948_get_fsr_7
   \   00000044   0x2A05             CMP      R2,#+5
   \   00000046   0xD11C             BNE.N    ??inv_icm20948_get_fsr_8
    246          		unsigned short * castedvalue = (unsigned short*) fsr;
    247          		int gfsr = inv_icm20948_get_gyro_fullscale(s);
   \                     ??inv_icm20948_get_fsr_7: (+1)
   \   00000048   0x.... 0x....      BL       inv_icm20948_get_gyro_fullscale
    248          		if(gfsr == MPU_FS_250dps)
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xD103             BNE.N    ??inv_icm20948_get_fsr_9
    249          			* castedvalue = 250;
   \   00000050   0x20FA             MOVS     R0,#+250
   \   00000052   0x8020             STRH     R0,[R4, #+0]
    250          		else if(gfsr == MPU_FS_500dps)
    251          			* castedvalue = 500;
    252          		else if(gfsr == MPU_FS_1000dps)
    253          		 	* castedvalue = 1000;
    254          		else if(gfsr == MPU_FS_2000dps)
    255          		 	* castedvalue = 2000;
    256          		else 
    257          			return -1;
    258          		
    259          		return 2;
   \                     ??inv_icm20948_get_fsr_10: (+1)
   \   00000054   0x2002             MOVS     R0,#+2
   \   00000056   0xBD10             POP      {R4,PC}
   \                     ??inv_icm20948_get_fsr_9: (+1)
   \   00000058   0x2801             CMP      R0,#+1
   \   0000005A   0xD103             BNE.N    ??inv_icm20948_get_fsr_11
   \   0000005C   0xF44F 0x70FA      MOV      R0,#+500
   \   00000060   0x8020             STRH     R0,[R4, #+0]
   \   00000062   0xE7F7             B.N      ??inv_icm20948_get_fsr_10
   \                     ??inv_icm20948_get_fsr_11: (+1)
   \   00000064   0x2802             CMP      R0,#+2
   \   00000066   0xD103             BNE.N    ??inv_icm20948_get_fsr_12
   \   00000068   0xF44F 0x707A      MOV      R0,#+1000
   \   0000006C   0x8020             STRH     R0,[R4, #+0]
   \   0000006E   0xE7F1             B.N      ??inv_icm20948_get_fsr_10
   \                     ??inv_icm20948_get_fsr_12: (+1)
   \   00000070   0x2803             CMP      R0,#+3
   \   00000072   0xD103             BNE.N    ??inv_icm20948_get_fsr_6
   \   00000074   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000078   0x8020             STRH     R0,[R4, #+0]
   \   0000007A   0xE7EB             B.N      ??inv_icm20948_get_fsr_10
   \                     ??inv_icm20948_get_fsr_6: (+1)
   \   0000007C   0xF04F 0x30FF      MOV      R0,#-1
   \   00000080   0xBD10             POP      {R4,PC}
    260          	}
    261          	
    262          	return 0;
   \                     ??inv_icm20948_get_fsr_8: (+1)
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xBD10             POP      {R4,PC}          ;; return
    263          }
    264          

   \                                 In section .text, align 2, keep-with-next
    265          int inv_icm20948_set_bias(struct inv_icm20948 * s, enum inv_icm20948_sensor sensor, const void * bias)
    266          {
   \                     inv_icm20948_set_bias: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4610             MOV      R0,R2
    267          	int bias_q16[3];
    268          	int bias_in[3];
    269          	int rc = 0;
    270          	short shift;
    271          	switch(sensor) {
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD008             BEQ.N    ??inv_icm20948_set_bias_0
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xD01B             BEQ.N    ??inv_icm20948_set_bias_1
   \   00000010   0x2904             CMP      R1,#+4
   \   00000012   0xD033             BEQ.N    ??inv_icm20948_set_bias_2
   \   00000014   0x2905             CMP      R1,#+5
   \   00000016   0xD017             BEQ.N    ??inv_icm20948_set_bias_1
   \   00000018   0x290C             CMP      R1,#+12
   \   0000001A   0xD02F             BEQ.N    ??inv_icm20948_set_bias_2
   \   0000001C   0xE038             B.N      ??inv_icm20948_set_bias_3
    272          		case INV_ICM20948_SENSOR_ACCELEROMETER :
    273          			memcpy(bias_q16, bias, sizeof(bias_q16));
   \                     ??inv_icm20948_set_bias_0: (+1)
   \   0000001E   0x220C             MOVS     R2,#+12
   \   00000020   0x4601             MOV      R1,R0
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x.... 0x....      BL       __aeabi_memcpy
    274          			//convert from q16 to q25
    275          			bias_in[0] = bias_q16[0] << (25 - 16);
   \   00000028   0x9800             LDR      R0,[SP, #+0]
   \   0000002A   0x0240             LSLS     R0,R0,#+9
   \   0000002C   0x9003             STR      R0,[SP, #+12]
    276          			bias_in[1] = bias_q16[1] << (25 - 16);
   \   0000002E   0xA803             ADD      R0,SP,#+12
   \   00000030   0x4669             MOV      R1,SP
   \   00000032   0x684A             LDR      R2,[R1, #+4]
   \   00000034   0x0252             LSLS     R2,R2,#+9
   \   00000036   0x6042             STR      R2,[R0, #+4]
    277          			bias_in[2] = bias_q16[2] << (25 - 16);
   \   00000038   0x6889             LDR      R1,[R1, #+8]
   \   0000003A   0x0249             LSLS     R1,R1,#+9
   \   0000003C   0x6081             STR      R1,[R0, #+8]
    278          			rc |= inv_icm20948_ctrl_set_acc_bias(s, bias_in);
   \   0000003E   0xA903             ADD      R1,SP,#+12
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       inv_icm20948_ctrl_set_acc_bias
    279          			break;
   \   00000046   0xE025             B.N      ??inv_icm20948_set_bias_4
    280          		case INV_ICM20948_SENSOR_GYROSCOPE_UNCALIBRATED:
    281          		case INV_ICM20948_SENSOR_GYROSCOPE:
    282          			memcpy(bias_q16, bias, sizeof(bias_q16));
   \                     ??inv_icm20948_set_bias_1: (+1)
   \   00000048   0x220C             MOVS     R2,#+12
   \   0000004A   0x4601             MOV      R1,R0
   \   0000004C   0x4668             MOV      R0,SP
   \   0000004E   0x.... 0x....      BL       __aeabi_memcpy
    283          			//convert from q16 to :
    284          			//Q19 => 2000dps
    285          			//Q20 => 1000dps
    286          			//Q21 => 500dps
    287          			//Q22 => 250dps
    288          			shift = ((20 + (MPU_FS_1000dps - inv_icm20948_get_gyro_fullscale(s))) - 16);
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       inv_icm20948_get_gyro_fullscale
   \   00000058   0xF1C0 0x0206      RSB      R2,R0,#+6
    289          			bias_in[0] = bias_q16[0] << shift;
   \   0000005C   0x9800             LDR      R0,[SP, #+0]
   \   0000005E   0x4090             LSLS     R0,R0,R2
   \   00000060   0x9003             STR      R0,[SP, #+12]
    290          			bias_in[1] = bias_q16[1] << shift;
   \   00000062   0xA803             ADD      R0,SP,#+12
   \   00000064   0x4669             MOV      R1,SP
   \   00000066   0x684B             LDR      R3,[R1, #+4]
   \   00000068   0x4093             LSLS     R3,R3,R2
   \   0000006A   0x6043             STR      R3,[R0, #+4]
    291          			bias_in[2] = bias_q16[2] << shift;
   \   0000006C   0x6889             LDR      R1,[R1, #+8]
   \   0000006E   0x4091             LSLS     R1,R1,R2
   \   00000070   0x6081             STR      R1,[R0, #+8]
    292          			
    293          			rc |= inv_icm20948_ctrl_set_gyr_bias(s, bias_in);
   \   00000072   0xA903             ADD      R1,SP,#+12
   \   00000074   0x4620             MOV      R0,R4
   \   00000076   0x.... 0x....      BL       inv_icm20948_ctrl_set_gyr_bias
    294          			break;
   \   0000007A   0xE00B             B.N      ??inv_icm20948_set_bias_4
    295          		case INV_ICM20948_SENSOR_MAGNETIC_FIELD_UNCALIBRATED:
    296          		case INV_ICM20948_SENSOR_GEOMAGNETIC_FIELD:
    297          			memcpy(bias_q16, bias, sizeof(bias_q16));
   \                     ??inv_icm20948_set_bias_2: (+1)
   \   0000007C   0x220C             MOVS     R2,#+12
   \   0000007E   0x4601             MOV      R1,R0
   \   00000080   0x4668             MOV      R0,SP
   \   00000082   0x.... 0x....      BL       __aeabi_memcpy
    298          			// bias is already in q16
    299          			rc |= inv_icm20948_ctrl_set_mag_bias(s, bias_q16);
   \   00000086   0x4669             MOV      R1,SP
   \   00000088   0x4620             MOV      R0,R4
   \   0000008A   0x.... 0x....      BL       inv_icm20948_ctrl_set_mag_bias
    300          			break;
   \   0000008E   0xE001             B.N      ??inv_icm20948_set_bias_4
    301          		default :
    302          			rc = -1;
   \                     ??inv_icm20948_set_bias_3: (+1)
   \   00000090   0xF04F 0x30FF      MOV      R0,#-1
    303          			break;
    304          	}
    305          	return (rc == 0) ? 1 : rc;
   \                     ??inv_icm20948_set_bias_4: (+1)
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD100             BNE.N    ??inv_icm20948_set_bias_5
   \   00000098   0x2001             MOVS     R0,#+1
   \                     ??inv_icm20948_set_bias_5: (+1)
   \   0000009A   0xB006             ADD      SP,SP,#+24
   \   0000009C   0xBD10             POP      {R4,PC}          ;; return
    306          }
    307          

   \                                 In section .text, align 2, keep-with-next
    308          int inv_icm20948_get_bias(struct inv_icm20948 * s, enum inv_icm20948_sensor sensor, void * bias)
    309          {
   \                     inv_icm20948_get_bias: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0x4614             MOV      R4,R2
    310          	int bias_qx[3];
    311          	int bias_out[3];
    312          	int rc = 0;
    313          	short shift;
    314          	switch(sensor) {
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD008             BEQ.N    ??inv_icm20948_get_bias_0
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xD01B             BEQ.N    ??inv_icm20948_get_bias_1
   \   00000010   0x2904             CMP      R1,#+4
   \   00000012   0xD033             BEQ.N    ??inv_icm20948_get_bias_2
   \   00000014   0x2905             CMP      R1,#+5
   \   00000016   0xD017             BEQ.N    ??inv_icm20948_get_bias_1
   \   00000018   0x290C             CMP      R1,#+12
   \   0000001A   0xD02F             BEQ.N    ??inv_icm20948_get_bias_2
   \   0000001C   0xE038             B.N      ??inv_icm20948_get_bias_3
    315          		case INV_ICM20948_SENSOR_ACCELEROMETER :
    316          			rc |= inv_icm20948_ctrl_get_acc_bias(s, bias_qx);
   \                     ??inv_icm20948_get_bias_0: (+1)
   \   0000001E   0x4669             MOV      R1,SP
   \   00000020   0x.... 0x....      BL       inv_icm20948_ctrl_get_acc_bias
   \   00000024   0x4605             MOV      R5,R0
    317          			//convert from q25 to q16 
    318          			bias_out[0] = bias_qx[0] >> (25 - 16);
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0x1240             ASRS     R0,R0,#+9
   \   0000002A   0x9003             STR      R0,[SP, #+12]
    319          			bias_out[1] = bias_qx[1] >> (25 - 16);
   \   0000002C   0xA803             ADD      R0,SP,#+12
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x684A             LDR      R2,[R1, #+4]
   \   00000032   0x1252             ASRS     R2,R2,#+9
   \   00000034   0x6042             STR      R2,[R0, #+4]
    320          			bias_out[2] = bias_qx[2] >> (25 - 16);
   \   00000036   0x6889             LDR      R1,[R1, #+8]
   \   00000038   0x1249             ASRS     R1,R1,#+9
   \   0000003A   0x6081             STR      R1,[R0, #+8]
    321          			memcpy(bias, bias_out, sizeof(bias_out));
   \   0000003C   0x220C             MOVS     R2,#+12
   \   0000003E   0xA903             ADD      R1,SP,#+12
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       __aeabi_memcpy
    322          			break;
   \   00000046   0xE025             B.N      ??inv_icm20948_get_bias_4
    323          		case INV_ICM20948_SENSOR_GYROSCOPE_UNCALIBRATED:
    324          		case INV_ICM20948_SENSOR_GYROSCOPE:
    325          			rc |= inv_icm20948_ctrl_get_gyr_bias(s, bias_qx);
   \                     ??inv_icm20948_get_bias_1: (+1)
   \   00000048   0x4669             MOV      R1,SP
   \   0000004A   0x.... 0x....      BL       inv_icm20948_ctrl_get_gyr_bias
   \   0000004E   0x4605             MOV      R5,R0
    326          			//convert from qn to q16:
    327          			//Q19 => 2000dps
    328          			//Q20 => 1000dps
    329          			//Q21 => 500dps
    330          			//Q22 => 250dps
    331          			shift = ((20 + (MPU_FS_1000dps - inv_icm20948_get_gyro_fullscale(s))) - 16);
   \   00000050   0x4630             MOV      R0,R6
   \   00000052   0x.... 0x....      BL       inv_icm20948_get_gyro_fullscale
   \   00000056   0xF1C0 0x0206      RSB      R2,R0,#+6
    332          			bias_out[0] = bias_qx[0] >> shift;
   \   0000005A   0x9800             LDR      R0,[SP, #+0]
   \   0000005C   0x4110             ASRS     R0,R0,R2
   \   0000005E   0x9003             STR      R0,[SP, #+12]
    333          			bias_out[1] = bias_qx[1] >> shift;
   \   00000060   0xA803             ADD      R0,SP,#+12
   \   00000062   0x4669             MOV      R1,SP
   \   00000064   0x684B             LDR      R3,[R1, #+4]
   \   00000066   0x4113             ASRS     R3,R3,R2
   \   00000068   0x6043             STR      R3,[R0, #+4]
    334          			bias_out[2] = bias_qx[2] >> shift;
   \   0000006A   0x6889             LDR      R1,[R1, #+8]
   \   0000006C   0x4111             ASRS     R1,R1,R2
   \   0000006E   0x6081             STR      R1,[R0, #+8]
    335          
    336          			memcpy(bias, bias_out, sizeof(bias_out));
   \   00000070   0x220C             MOVS     R2,#+12
   \   00000072   0xA903             ADD      R1,SP,#+12
   \   00000074   0x4620             MOV      R0,R4
   \   00000076   0x.... 0x....      BL       __aeabi_memcpy
    337          			break;
   \   0000007A   0xE00B             B.N      ??inv_icm20948_get_bias_4
    338          		case INV_ICM20948_SENSOR_MAGNETIC_FIELD_UNCALIBRATED:
    339          		case INV_ICM20948_SENSOR_GEOMAGNETIC_FIELD:
    340          			rc |= inv_icm20948_ctrl_get_mag_bias(s, bias_qx);
   \                     ??inv_icm20948_get_bias_2: (+1)
   \   0000007C   0x4669             MOV      R1,SP
   \   0000007E   0x.... 0x....      BL       inv_icm20948_ctrl_get_mag_bias
   \   00000082   0x4605             MOV      R5,R0
    341          			// bias is already in q16
    342          			memcpy(bias, bias_qx, sizeof(bias_qx));
   \   00000084   0x220C             MOVS     R2,#+12
   \   00000086   0x4669             MOV      R1,SP
   \   00000088   0x4620             MOV      R0,R4
   \   0000008A   0x.... 0x....      BL       __aeabi_memcpy
    343          			break;
   \   0000008E   0xE001             B.N      ??inv_icm20948_get_bias_4
    344          		default:
    345          			rc = -1;
   \                     ??inv_icm20948_get_bias_3: (+1)
   \   00000090   0xF04F 0x35FF      MOV      R5,#-1
    346          			break;
    347          	}
    348          	return (rc == 0) ? 3*sizeof(float) : rc;
   \                     ??inv_icm20948_get_bias_4: (+1)
   \   00000094   0x2D00             CMP      R5,#+0
   \   00000096   0xD100             BNE.N    ??inv_icm20948_get_bias_5
   \   00000098   0x250C             MOVS     R5,#+12
   \                     ??inv_icm20948_get_bias_5: (+1)
   \   0000009A   0x4628             MOV      R0,R5
   \   0000009C   0xB006             ADD      SP,SP,#+24
   \   0000009E   0xBD70             POP      {R4-R6,PC}       ;; return
    349          }
    350          

   \                                 In section .text, align 2, keep-with-next
    351          int inv_icm20948_set_lowpower_or_highperformance(struct inv_icm20948 * s, uint8_t lowpower_or_highperformance)
    352          {
    353          	s->go_back_lp_when_odr_low = 0;
   \                     inv_icm20948_set_lowpower_or_highperformance: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0xF880 0x2244      STRB     R2,[R0, #+580]
    354          	if(lowpower_or_highperformance)
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD001             BEQ.N    ??inv_icm20948_set_lowpower_or_highperformance_0
    355          		return inv_icm20948_enter_low_noise_mode(s);
   \   0000000A   0x.... 0x....      B.W      inv_icm20948_enter_low_noise_mode
    356          	else
    357          		return inv_icm20948_enter_duty_cycle_mode(s);
   \                     ??inv_icm20948_set_lowpower_or_highperformance_0: (+1)
   \   0000000E   0x.... 0x....      B.W      inv_icm20948_enter_duty_cycle_mode
    358          }
    359          
    360          

   \                                 In section .text, align 2, keep-with-next
    361          int inv_icm20948_get_lowpower_or_highperformance(struct inv_icm20948 * s, uint8_t * lowpower_or_highperformance)
    362          {
    363          	(void)s;
    364          	*lowpower_or_highperformance = CHIP_LOW_NOISE_ICM20948;
   \                     inv_icm20948_get_lowpower_or_highperformance: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x7008             STRB     R0,[R1, #+0]
    365          	return 1;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x4770             BX       LR               ;; return
    366          }
    367          

   \                                 In section .text, align 2, keep-with-next
    368          static void DmpDriver_convertion(signed char transformedtochar[9],
    369                                           const int32_t MatrixInQ30[9])
    370          {
    371          	// To convert Q30 to signed char value
    372          	uint8_t iter;
    373          	for (iter = 0; iter < 9; ++iter)
   \                     DmpDriver_convertion: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0xE004             B.N      ??DmpDriver_convertion_0
    374          		transformedtochar[iter] = MatrixInQ30[iter] >> 30;
   \                     ??DmpDriver_convertion_1: (+1)
   \   00000004   0xF851 0x3022      LDR      R3,[R1, R2, LSL #+2]
   \   00000008   0x179B             ASRS     R3,R3,#+30
   \   0000000A   0x5483             STRB     R3,[R0, R2]
   \   0000000C   0x1C52             ADDS     R2,R2,#+1
   \                     ??DmpDriver_convertion_0: (+1)
   \   0000000E   0x2A09             CMP      R2,#+9
   \   00000010   0xDBF8             BLT.N    ??DmpDriver_convertion_1
    375          }
   \   00000012   0x4770             BX       LR               ;; return
    376          

   \                                 In section .text, align 4, keep-with-next
    377          int inv_icm20948_set_matrix(struct inv_icm20948 * s, const float matrix[9], enum inv_icm20948_sensor sensor)
    378          {
   \                     inv_icm20948_set_matrix: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB092             SUB      SP,SP,#+72
   \   00000004   0x4604             MOV      R4,R0
    379          	int32_t mounting_mq30[9];
    380          	int32_t compass_mq30[9];
    381          	int result = 0;
   \   00000006   0x2000             MOVS     R0,#+0
    382          	int i;
    383          
    384          	if ((sensor == INV_ICM20948_SENSOR_GEOMAGNETIC_FIELD)||
    385          		(sensor == INV_ICM20948_SENSOR_MAGNETIC_FIELD_UNCALIBRATED)){
   \   00000008   0x4613             MOV      R3,R2
   \   0000000A   0x2B0C             CMP      R3,#+12
   \   0000000C   0xD00E             BEQ.N    ??inv_icm20948_set_matrix_0
   \   0000000E   0x2B04             CMP      R3,#+4
   \   00000010   0xD11C             BNE.N    ??inv_icm20948_set_matrix_1
    386          		for(i = 0; i < 9; ++i)
   \   00000012   0xE00B             B.N      ??inv_icm20948_set_matrix_0
    387          			compass_mq30[i] = (int32_t)(matrix[i] * (1 << 30));
   \                     ??inv_icm20948_set_matrix_2: (+1)
   \   00000014   0xEB01 0x0280      ADD      R2,R1,R0, LSL #+2
   \   00000018   0xED92 0x0A00      VLDR     S0,[R2, #0]
   \   0000001C   0xEEBE 0x0AC1      VCVT.S32.F32 S0,S0,#+30
   \   00000020   0x466A             MOV      R2,SP
   \   00000022   0xEB02 0x0280      ADD      R2,R2,R0, LSL #+2
   \   00000026   0xED82 0x0A00      VSTR     S0,[R2, #0]
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \                     ??inv_icm20948_set_matrix_0: (+1)
   \   0000002C   0x2809             CMP      R0,#+9
   \   0000002E   0xDBF1             BLT.N    ??inv_icm20948_set_matrix_2
    388          		// Convert compass mounting matrix in char
    389          		DmpDriver_convertion(s->mounting_matrix_secondary_compass, compass_mq30);
   \   00000030   0xF204 0x257D      ADDW     R5,R4,#+637
   \   00000034   0x4669             MOV      R1,SP
   \   00000036   0x4628             MOV      R0,R5
   \   00000038   0x.... 0x....      BL       DmpDriver_convertion
    390          		//Notify new matrix to mag calculation with accgyr mountingmatrix
    391          		result |= inv_icm20948_compass_dmp_cal(s, s->mounting_matrix, s->mounting_matrix_secondary_compass);
   \   0000003C   0x462A             MOV      R2,R5
   \   0000003E   0xF44F 0x701D      MOV      R0,#+628
   \   00000042   0x1821             ADDS     R1,R4,R0
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       inv_icm20948_compass_dmp_cal
   \   0000004A   0xE031             B.N      ??inv_icm20948_set_matrix_3
    392          	} else if ((sensor == INV_ICM20948_SENSOR_RAW_ACCELEROMETER) || 
    393          		(sensor == INV_ICM20948_SENSOR_ACCELEROMETER) || 
    394          		(sensor == INV_ICM20948_SENSOR_RAW_GYROSCOPE) ||
    395          		(sensor == INV_ICM20948_SENSOR_GYROSCOPE) ||
    396          		(sensor == INV_ICM20948_SENSOR_GYROSCOPE_UNCALIBRATED)) {
   \                     ??inv_icm20948_set_matrix_1: (+1)
   \   0000004C   0x2B02             CMP      R3,#+2
   \   0000004E   0xD014             BEQ.N    ??inv_icm20948_set_matrix_4
   \   00000050   0x2A00             CMP      R2,#+0
   \   00000052   0xD012             BEQ.N    ??inv_icm20948_set_matrix_4
   \   00000054   0x2B03             CMP      R3,#+3
   \   00000056   0xD010             BEQ.N    ??inv_icm20948_set_matrix_4
   \   00000058   0x2B01             CMP      R3,#+1
   \   0000005A   0xD00E             BEQ.N    ??inv_icm20948_set_matrix_4
   \   0000005C   0x2B05             CMP      R3,#+5
   \   0000005E   0xD127             BNE.N    ??inv_icm20948_set_matrix_3
    397          		for(i = 0; i < 9; ++i)
   \   00000060   0xE00B             B.N      ??inv_icm20948_set_matrix_4
    398          			mounting_mq30[i] = (int32_t)(matrix[i] * (1 << 30));
   \                     ??inv_icm20948_set_matrix_5: (+1)
   \   00000062   0xEB01 0x0280      ADD      R2,R1,R0, LSL #+2
   \   00000066   0xED92 0x0A00      VLDR     S0,[R2, #0]
   \   0000006A   0xEEBE 0x0AC1      VCVT.S32.F32 S0,S0,#+30
   \   0000006E   0xAA09             ADD      R2,SP,#+36
   \   00000070   0xEB02 0x0280      ADD      R2,R2,R0, LSL #+2
   \   00000074   0xED82 0x0A00      VSTR     S0,[R2, #0]
   \   00000078   0x1C40             ADDS     R0,R0,#+1
   \                     ??inv_icm20948_set_matrix_4: (+1)
   \   0000007A   0x2809             CMP      R0,#+9
   \   0000007C   0xDBF1             BLT.N    ??inv_icm20948_set_matrix_5
    399          		// Convert mounting matrix in char
    400          		DmpDriver_convertion(s->mounting_matrix, mounting_mq30);
   \   0000007E   0xF44F 0x701D      MOV      R0,#+628
   \   00000082   0x1825             ADDS     R5,R4,R0
   \   00000084   0xA909             ADD      R1,SP,#+36
   \   00000086   0x4628             MOV      R0,R5
   \   00000088   0x.... 0x....      BL       DmpDriver_convertion
    401          		/*Apply new matrix */
    402          		inv_icm20948_set_chip_to_body_axis_quaternion(s, s->mounting_matrix, 0.0);
   \   0000008C   0xED9F 0x....      VLDR.W   S0,??DataTable10  ;; 0x0
   \   00000090   0x4629             MOV      R1,R5
   \   00000092   0x4620             MOV      R0,R4
   \   00000094   0x.... 0x....      BL       inv_icm20948_set_chip_to_body_axis_quaternion
    403          		//Update Dmp B2S according to new mmatrix in q30
    404          		result |= dmp_icm20948_set_B2S_matrix(s, (int*)mounting_mq30);
   \   00000098   0xA909             ADD      R1,SP,#+36
   \   0000009A   0x4620             MOV      R0,R4
   \   0000009C   0x.... 0x....      BL       dmp_icm20948_set_B2S_matrix
   \   000000A0   0x4606             MOV      R6,R0
    405          		//Notify new matrix to mag calculation with accgyr mountingmatrix
    406          		result |= inv_icm20948_compass_dmp_cal(s, s->mounting_matrix, s->mounting_matrix_secondary_compass);
   \   000000A2   0xF204 0x227D      ADDW     R2,R4,#+637
   \   000000A6   0x4629             MOV      R1,R5
   \   000000A8   0x4620             MOV      R0,R4
   \   000000AA   0x.... 0x....      BL       inv_icm20948_compass_dmp_cal
   \   000000AE   0x4330             ORRS     R0,R0,R6
    407          	}
    408          
    409          	return result;
   \                     ??inv_icm20948_set_matrix_3: (+1)
   \   000000B0   0xB012             ADD      SP,SP,#+72
   \   000000B2   0xBD70             POP      {R4-R6,PC}       ;; return
    410          }
    411          

   \                                 In section .text, align 2, keep-with-next
    412          int inv_icm20948_initialize_auxiliary(struct inv_icm20948 * s)
    413          {
   \                     inv_icm20948_initialize_auxiliary: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    414          	if (inv_icm20948_set_slave_compass_id(s, s->secondary_state.compass_slave_id) )
   \   00000002   0xF8D0 0x1088      LDR      R1,[R0, #+136]
   \   00000006   0x.... 0x....      BL       inv_icm20948_set_slave_compass_id
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD002             BEQ.N    ??inv_icm20948_initialize_auxiliary_0
    415          		return -1;
   \   0000000E   0xF04F 0x30FF      MOV      R0,#-1
   \   00000012   0xBD02             POP      {R1,PC}
    416          	return 0;
   \                     ??inv_icm20948_initialize_auxiliary_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
    417          }
    418          

   \                                 In section .text, align 2, keep-with-next
    419          int inv_icm20948_soft_reset(struct inv_icm20948 * s)
    420          {
   \                     inv_icm20948_soft_reset: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    421          	//soft reset like
    422          	int rc = inv_icm20948_write_single_mems_reg(s, REG_PWR_MGMT_1, BIT_H_RESET);
   \   00000002   0x2280             MOVS     R2,#+128
   \   00000004   0x2106             MOVS     R1,#+6
   \   00000006   0x.... 0x....      BL       inv_icm20948_write_single_mems_reg
   \   0000000A   0x4604             MOV      R4,R0
    423          	// max start-up time is 100 msec
    424          	inv_icm20948_sleep_us(100000);
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable11_1  ;; 0x186a0
   \   00000010   0x.... 0x....      BL       inv_icm20948_sleep_us
    425          	return rc;
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0xBD10             POP      {R4,PC}          ;; return
    426          }
    427          

   \                                 In section .text, align 2, keep-with-next
    428          int inv_icm20948_enable_sensor(struct inv_icm20948 * s, enum inv_icm20948_sensor sensor, inv_bool_t state)
    429          {
   \                     inv_icm20948_enable_sensor: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    430          	uint8_t androidSensor = sensor_type_2_android_sensor(sensor);
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       sensor_type_2_android_sensor
    431          
    432          	if(0!=inv_icm20948_ctrl_enable_sensor(s, androidSensor, state))
   \   0000000E   0x4631             MOV      R1,R6
   \   00000010   0x460A             MOV      R2,R1
   \   00000012   0xB2D2             UXTB     R2,R2
   \   00000014   0x4601             MOV      R1,R0
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       inv_icm20948_ctrl_enable_sensor
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD002             BEQ.N    ??inv_icm20948_enable_sensor_0
    433          		return -1;
   \   00000020   0xF04F 0x30FF      MOV      R0,#-1
   \   00000024   0xBD70             POP      {R4-R6,PC}
    434          
    435          	//In case we disable a sensor, we reset his timestamp
    436          	if(state == 0)
   \                     ??inv_icm20948_enable_sensor_0: (+1)
   \   00000026   0x2E00             CMP      R6,#+0
   \   00000028   0xD105             BNE.N    ??inv_icm20948_enable_sensor_1
    437          		s->timestamp[sensor] = 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x4601             MOV      R1,R0
   \   0000002E   0xEB04 0x02C5      ADD      R2,R4,R5, LSL #+3
   \   00000032   0xE9C2 0x01B2      STRD     R0,R1,[R2, #+712]
    438          
    439          	return 0;
   \                     ??inv_icm20948_enable_sensor_1: (+1)
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xBD70             POP      {R4-R6,PC}       ;; return
    440          }
    441          

   \                                 In section .text, align 2, keep-with-next
    442          int inv_icm20948_set_sensor_period(struct inv_icm20948 * s, enum inv_icm20948_sensor sensor, uint32_t period)
    443          {
   \                     inv_icm20948_set_sensor_period: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    444          	uint8_t androidSensor = sensor_type_2_android_sensor(sensor);
   \   00000008   0x4628             MOV      R0,R5
   \   0000000A   0x.... 0x....      BL       sensor_type_2_android_sensor
    445          
    446          	if(0!=inv_icm20948_set_odr(s, androidSensor, period))
   \   0000000E   0x4632             MOV      R2,R6
   \   00000010   0xB292             UXTH     R2,R2
   \   00000012   0x4601             MOV      R1,R0
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       inv_icm20948_set_odr
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD002             BEQ.N    ??inv_icm20948_set_sensor_period_0
    447          		return -1;
   \   0000001E   0xF04F 0x30FF      MOV      R0,#-1
   \   00000022   0xBD70             POP      {R4-R6,PC}
    448          	
    449          	// reset timestamp value and save current odr
    450          	s->timestamp[sensor] = 0;
   \                     ??inv_icm20948_set_sensor_period_0: (+1)
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x4601             MOV      R1,R0
   \   00000028   0xEB04 0x02C5      ADD      R2,R4,R5, LSL #+3
   \   0000002C   0xE9C2 0x01B2      STRD     R0,R1,[R2, #+712]
    451          	s->sensorlist[sensor].odr_us = period * 1000;
   \   00000030   0xF44F 0x707A      MOV      R0,#+1000
   \   00000034   0x4370             MULS     R0,R0,R6
   \   00000036   0xEB04 0x1205      ADD      R2,R4,R5, LSL #+4
   \   0000003A   0xE9C2 0x01E4      STRD     R0,R1,[R2, #+912]
    452          	return 0; 
   \   0000003E   0x4608             MOV      R0,R1
   \   00000040   0xBD70             POP      {R4-R6,PC}       ;; return
    453          }
    454          

   \                                 In section .text, align 2, keep-with-next
    455          int inv_icm20948_enable_batch_timeout(struct inv_icm20948 * s, unsigned short batchTimeoutMs)
    456          {
   \                     inv_icm20948_enable_batch_timeout: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    457          	int rc;
    458          	/* Configure batch timeout */
    459          	if (inv_icm20948_ctrl_set_batch_timeout_ms(s, batchTimeoutMs) == 0) {
   \   00000004   0x.... 0x....      BL       inv_icm20948_ctrl_set_batch_timeout_ms
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD107             BNE.N    ??inv_icm20948_enable_batch_timeout_0
    460          		/* If configuration was succesful then we enable it */
    461          		if((rc = inv_icm20948_ctrl_enable_batch(s, 1)) != 0)
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       inv_icm20948_ctrl_enable_batch
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD100             BNE.N    ??inv_icm20948_enable_batch_timeout_1
    462          			return rc;
    463          	} else {         
    464          		/* Else we disable it */
    465          		if((rc = inv_icm20948_ctrl_enable_batch(s, 0)) != 0)
    466          			return rc;                     
    467          	}
    468          	return 0;
   \                     ??inv_icm20948_enable_batch_timeout_2: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
   \                     ??inv_icm20948_enable_batch_timeout_1: (+1)
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
   \                     ??inv_icm20948_enable_batch_timeout_0: (+1)
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       inv_icm20948_ctrl_enable_batch
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD0F7             BEQ.N    ??inv_icm20948_enable_batch_timeout_2
   \   00000028   0xBD10             POP      {R4,PC}
    469          }
    470          

   \                                 In section .text, align 2, keep-with-next
    471          int inv_icm20948_load(struct inv_icm20948 * s, const uint8_t * image, unsigned short size)
    472          {
    473          	return inv_icm20948_firmware_load(s, image, size, DMP_LOAD_START);
   \                     inv_icm20948_load: (+1)
   \   00000000   0x2390             MOVS     R3,#+144
   \   00000002   0x.... 0x....      B.W      inv_icm20948_firmware_load
    474          }
    475          
    476          /** @brief Returns 1 if the sensor id is a streamed sensor and not an event-based sensor */

   \                                 In section .text, align 2, keep-with-next
    477          static int inv_icm20948_is_streamed_sensor(uint8_t id)
    478          {
    479          	switch(id)
   \                     inv_icm20948_is_streamed_sensor: (+1)
   \   00000000   0x3811             SUBS     R0,R0,#+17
   \   00000002   0x2802             CMP      R0,#+2
   \   00000004   0xD904             BLS.N    ??inv_icm20948_is_streamed_sensor_0
   \   00000006   0x3818             SUBS     R0,R0,#+24
   \   00000008   0xD002             BEQ.N    ??inv_icm20948_is_streamed_sensor_0
   \   0000000A   0x1F00             SUBS     R0,R0,#+4
   \   0000000C   0x2802             CMP      R0,#+2
   \   0000000E   0xD801             BHI.N    ??inv_icm20948_is_streamed_sensor_1
    480          	{
    481          	case ANDROID_SENSOR_WAKEUP_TILT_DETECTOR :
    482          	case ANDROID_SENSOR_ACTIVITY_CLASSIFICATON :
    483          	case ANDROID_SENSOR_FLIP_PICKUP :
    484          	case ANDROID_SENSOR_B2S :
    485          	case ANDROID_SENSOR_STEP_COUNTER:
    486          	case ANDROID_SENSOR_WAKEUP_SIGNIFICANT_MOTION :
    487          	case ANDROID_SENSOR_STEP_DETECTOR :
    488          			return 0;
   \                     ??inv_icm20948_is_streamed_sensor_0: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x4770             BX       LR
    489          	default :
    490          			return 1;
   \                     ??inv_icm20948_is_streamed_sensor_1: (+1)
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x4770             BX       LR               ;; return
    491          	}
    492          }
    493          
    494          /** @brief Preprocess all timestamps so that they either contain very last time at which MEMS IRQ was fired 
    495           * or last time sent for the sensor + ODR */

   \                                 In section .text, align 2, keep-with-next
    496          static uint8_t inv_icm20948_updateTs(struct inv_icm20948 * s, int * data_left_in_fifo, 
    497          	unsigned short * total_sample_cnt, uint64_t * lastIrqTimeUs)
    498          {
   \                     inv_icm20948_updateTs: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB09D             SUB      SP,SP,#+116
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460E             MOV      R6,R1
   \   0000000A   0x4615             MOV      R5,R2
   \   0000000C   0x469B             MOV      R11,R3
    499          	/** @brief Very last time in us at which IRQ was fired since flushing FIFO process was started */
    500          	unsigned short sample_cnt_array[GENERAL_SENSORS_MAX] = {0};
   \   0000000E   0xA802             ADD      R0,SP,#+8
   \   00000010   0x2168             MOVS     R1,#+104
   \   00000012   0x.... 0x....      BL       __aeabi_memclr4
    501          	uint8_t i;
    502          	
    503          	if (inv_icm20948_fifo_swmirror(s, data_left_in_fifo, total_sample_cnt, sample_cnt_array)) {
   \   00000016   0xAB02             ADD      R3,SP,#+8
   \   00000018   0x462A             MOV      R2,R5
   \   0000001A   0x4631             MOV      R1,R6
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       inv_icm20948_fifo_swmirror
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD014             BEQ.N    ??inv_icm20948_updateTs_0
    504          		for(i = 0; i< GENERAL_SENSORS_MAX; i++) {
   \   00000026   0x2500             MOVS     R5,#+0
   \   00000028   0xE00E             B.N      ??inv_icm20948_updateTs_1
    505          			if (inv_icm20948_is_streamed_sensor(i)) {
   \                     ??inv_icm20948_updateTs_2: (+1)
   \   0000002A   0x4628             MOV      R0,R5
   \   0000002C   0x.... 0x....      BL       inv_icm20948_is_streamed_sensor
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD008             BEQ.N    ??inv_icm20948_updateTs_3
    506          				s->timestamp[inv_icm20948_sensor_android_2_sensor_type(i)] = *lastIrqTimeUs;
   \   00000034   0x4628             MOV      R0,R5
   \   00000036   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   0000003A   0xE9DB 0x2300      LDRD     R2,R3,[R11, #+0]
   \   0000003E   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \   00000042   0xE9C0 0x23B2      STRD     R2,R3,[R0, #+712]
    507          			}
    508          		}
   \                     ??inv_icm20948_updateTs_3: (+1)
   \   00000046   0x1C6D             ADDS     R5,R5,#+1
   \                     ??inv_icm20948_updateTs_1: (+1)
   \   00000048   0x2D33             CMP      R5,#+51
   \   0000004A   0xDBEE             BLT.N    ??inv_icm20948_updateTs_2
    509          		return -1;
   \   0000004C   0x20FF             MOVS     R0,#+255
   \   0000004E   0xE0B5             B.N      ??inv_icm20948_updateTs_4
    510          	}
    511          	// we parse all senosr according to android type
    512          	for (i = 0; i < GENERAL_SENSORS_MAX; i++) {
   \                     ??inv_icm20948_updateTs_0: (+1)
   \   00000050   0x2500             MOVS     R5,#+0
   \   00000052   0xE009             B.N      ??inv_icm20948_updateTs_5
    513          		if (inv_icm20948_is_streamed_sensor(i)) {
    514          			if (sample_cnt_array[i]) {
    515          				/** Number of samples present in MEMS FIFO last time we mirrored it */
    516          				unsigned short fifo_sample_cnt = sample_cnt_array[i];
    517          
    518          				/** In case of first batch we have less than the expected number of samples in the batch */
    519          				/** To avoid a bad timestamping we recompute the startup time based on the theorical ODR and the number of samples */
    520          				if (s->sFirstBatch[inv_icm20948_sensor_android_2_sensor_type(i)]) {
    521          					s->timestamp[inv_icm20948_sensor_android_2_sensor_type(i)] += *lastIrqTimeUs-s->timestamp[inv_icm20948_sensor_android_2_sensor_type(i)] 
    522          																	- fifo_sample_cnt*s->sensorlist[inv_icm20948_sensor_android_2_sensor_type(i)].odr_us;
    523          					s->sFirstBatch[inv_icm20948_sensor_android_2_sensor_type(i)] = 0;
    524          				}
    525          
    526          				/** In case it's the first time timestamp is set we create a factice one,
    527          				In other cases, update timestamp for all streamed sensors depending on number of samples available in FIFO
    528          				first time to be printed is t1+(t2-t1)/N
    529          				- t1 is last time we sent data
    530          				- t2 is when IRQ was fired so that we pop the FIFO
    531          				- N is number of samples */
    532          				
    533          				if(s->timestamp[inv_icm20948_sensor_android_2_sensor_type(i)] == 0) {
    534          					s->timestamp[inv_icm20948_sensor_android_2_sensor_type(i)] = *lastIrqTimeUs;
    535          					s->timestamp[inv_icm20948_sensor_android_2_sensor_type(i)] -= s->sensorlist[inv_icm20948_sensor_android_2_sensor_type(i)].odr_us*(fifo_sample_cnt);
    536          					s->sensorlist[inv_icm20948_sensor_android_2_sensor_type(i)].odr_applied_us = s->sensorlist[inv_icm20948_sensor_android_2_sensor_type(i)].odr_us;
    537          				}
    538          				else {
    539          					s->sensorlist[inv_icm20948_sensor_android_2_sensor_type(i)].odr_applied_us = (*lastIrqTimeUs-s->timestamp[inv_icm20948_sensor_android_2_sensor_type(i)])/fifo_sample_cnt;
    540          				}
    541          			}
    542          		} else {
    543          			/** update timestamp for all event sensors with time at which MEMS IRQ was fired */
    544          			s->timestamp[inv_icm20948_sensor_android_2_sensor_type(i)] = *lastIrqTimeUs;
   \                     ??inv_icm20948_updateTs_6: (+1)
   \   00000054   0x4628             MOV      R0,R5
   \   00000056   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   0000005A   0xE9DB 0x2300      LDRD     R2,R3,[R11, #+0]
   \   0000005E   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \   00000062   0xE9C0 0x23B2      STRD     R2,R3,[R0, #+712]
    545          		}
   \                     ??inv_icm20948_updateTs_7: (+1)
   \   00000066   0x1C6D             ADDS     R5,R5,#+1
   \                     ??inv_icm20948_updateTs_5: (+1)
   \   00000068   0x2D33             CMP      R5,#+51
   \   0000006A   0xF280 0x80A6      BGE.W    ??inv_icm20948_updateTs_8
   \   0000006E   0x4628             MOV      R0,R5
   \   00000070   0x.... 0x....      BL       inv_icm20948_is_streamed_sensor
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD0ED             BEQ.N    ??inv_icm20948_updateTs_6
   \   00000078   0xA802             ADD      R0,SP,#+8
   \   0000007A   0xF830 0xA015      LDRH     R10,[R0, R5, LSL #+1]
   \   0000007E   0x4650             MOV      R0,R10
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD0F0             BEQ.N    ??inv_icm20948_updateTs_7
   \   00000084   0x4628             MOV      R0,R5
   \   00000086   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   0000008A   0x4420             ADD      R0,R4,R0
   \   0000008C   0xF890 0x0370      LDRB     R0,[R0, #+880]
   \   00000090   0x2800             CMP      R0,#+0
   \   00000092   0xD039             BEQ.N    ??inv_icm20948_updateTs_9
   \   00000094   0x4628             MOV      R0,R5
   \   00000096   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   0000009A   0x4607             MOV      R7,R0
   \   0000009C   0x4628             MOV      R0,R5
   \   0000009E   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   000000A2   0x4606             MOV      R6,R0
   \   000000A4   0x4628             MOV      R0,R5
   \   000000A6   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   000000AA   0xEB04 0x01C7      ADD      R1,R4,R7, LSL #+3
   \   000000AE   0xE9D1 0x89B2      LDRD     R8,R9,[R1, #+712]
   \   000000B2   0xE9DB 0x2300      LDRD     R2,R3,[R11, #+0]
   \   000000B6   0xEB18 0x0202      ADDS     R2,R8,R2
   \   000000BA   0xEB49 0x0303      ADC      R3,R9,R3
   \   000000BE   0x4690             MOV      R8,R2
   \   000000C0   0x4699             MOV      R9,R3
   \   000000C2   0xEB04 0x02C6      ADD      R2,R4,R6, LSL #+3
   \   000000C6   0xE9D2 0x23B2      LDRD     R2,R3,[R2, #+712]
   \   000000CA   0x4646             MOV      R6,R8
   \   000000CC   0x464F             MOV      R7,R9
   \   000000CE   0x1AB2             SUBS     R2,R6,R2
   \   000000D0   0xEB67 0x0303      SBC      R3,R7,R3
   \   000000D4   0xE9CD 0x2300      STRD     R2,R3,[SP, #+0]
   \   000000D8   0x4656             MOV      R6,R10
   \   000000DA   0xEB04 0x1000      ADD      R0,R4,R0, LSL #+4
   \   000000DE   0xE9D0 0x23E4      LDRD     R2,R3,[R0, #+912]
   \   000000E2   0xFBA2 0x8906      UMULL    R8,R9,R2,R6
   \   000000E6   0xFB03 0x9906      MLA      R9,R3,R6,R9
   \   000000EA   0xE9DD 0x2300      LDRD     R2,R3,[SP, #+0]
   \   000000EE   0xEBB2 0x0208      SUBS     R2,R2,R8
   \   000000F2   0xEB63 0x0309      SBC      R3,R3,R9
   \   000000F6   0xE9C1 0x23B2      STRD     R2,R3,[R1, #+712]
   \   000000FA   0x4628             MOV      R0,R5
   \   000000FC   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   00000100   0x4420             ADD      R0,R4,R0
   \   00000102   0x2100             MOVS     R1,#+0
   \   00000104   0xF880 0x1370      STRB     R1,[R0, #+880]
   \                     ??inv_icm20948_updateTs_9: (+1)
   \   00000108   0x4628             MOV      R0,R5
   \   0000010A   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   0000010E   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \   00000112   0xE9D0 0x01B2      LDRD     R0,R1,[R0, #+712]
   \   00000116   0x2200             MOVS     R2,#+0
   \   00000118   0x4613             MOV      R3,R2
   \   0000011A   0x4299             CMP      R1,R3
   \   0000011C   0xD134             BNE.N    ??inv_icm20948_updateTs_10
   \   0000011E   0x4290             CMP      R0,R2
   \   00000120   0xD132             BNE.N    ??inv_icm20948_updateTs_10
   \   00000122   0x4628             MOV      R0,R5
   \   00000124   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   00000128   0xE9DB 0x2300      LDRD     R2,R3,[R11, #+0]
   \   0000012C   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \   00000130   0xE9C0 0x23B2      STRD     R2,R3,[R0, #+712]
   \   00000134   0x4628             MOV      R0,R5
   \   00000136   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   0000013A   0x4606             MOV      R6,R0
   \   0000013C   0x4628             MOV      R0,R5
   \   0000013E   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   00000142   0xEB04 0x0CC6      ADD      R12,R4,R6, LSL #+3
   \   00000146   0xE9DC 0x23B2      LDRD     R2,R3,[R12, #+712]
   \   0000014A   0xEB04 0x1000      ADD      R0,R4,R0, LSL #+4
   \   0000014E   0xE9D0 0x01E4      LDRD     R0,R1,[R0, #+912]
   \   00000152   0x4656             MOV      R6,R10
   \   00000154   0xFBA6 0x8900      UMULL    R8,R9,R6,R0
   \   00000158   0xFB06 0x9901      MLA      R9,R6,R1,R9
   \   0000015C   0xEBB2 0x0008      SUBS     R0,R2,R8
   \   00000160   0xEB63 0x0109      SBC      R1,R3,R9
   \   00000164   0xE9CC 0x01B2      STRD     R0,R1,[R12, #+712]
   \   00000168   0x4628             MOV      R0,R5
   \   0000016A   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   0000016E   0x4606             MOV      R6,R0
   \   00000170   0x4628             MOV      R0,R5
   \   00000172   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   00000176   0xEB04 0x1000      ADD      R0,R4,R0, LSL #+4
   \   0000017A   0xE9D0 0x01E4      LDRD     R0,R1,[R0, #+912]
   \   0000017E   0xEB04 0x1206      ADD      R2,R4,R6, LSL #+4
   \   00000182   0xE9C2 0x01E2      STRD     R0,R1,[R2, #+904]
   \   00000186   0xE76E             B.N      ??inv_icm20948_updateTs_7
   \                     ??inv_icm20948_updateTs_10: (+1)
   \   00000188   0x4628             MOV      R0,R5
   \   0000018A   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   0000018E   0x4606             MOV      R6,R0
   \   00000190   0x4628             MOV      R0,R5
   \   00000192   0x.... 0x....      BL       inv_icm20948_sensor_android_2_sensor_type
   \   00000196   0xE9DB 0x2300      LDRD     R2,R3,[R11, #+0]
   \   0000019A   0xEB04 0x00C0      ADD      R0,R4,R0, LSL #+3
   \   0000019E   0xE9D0 0x01B2      LDRD     R0,R1,[R0, #+712]
   \   000001A2   0x1A10             SUBS     R0,R2,R0
   \   000001A4   0xEB63 0x0101      SBC      R1,R3,R1
   \   000001A8   0x4652             MOV      R2,R10
   \   000001AA   0x2300             MOVS     R3,#+0
   \   000001AC   0x.... 0x....      BL       __aeabi_uldivmod
   \   000001B0   0xEB04 0x1206      ADD      R2,R4,R6, LSL #+4
   \   000001B4   0xE9C2 0x01E2      STRD     R0,R1,[R2, #+904]
   \   000001B8   0xE755             B.N      ??inv_icm20948_updateTs_7
    546          	}
    547          	
    548          	return 0;
   \                     ??inv_icm20948_updateTs_8: (+1)
   \   000001BA   0x2000             MOVS     R0,#+0
   \                     ??inv_icm20948_updateTs_4: (+1)
   \   000001BC   0xB01D             ADD      SP,SP,#+116
   \   000001BE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    549          }
    550          

   \                                 In section .text, align 4, keep-with-next
    551          int inv_icm20948_poll_sensor(struct inv_icm20948 * s, void * context,
    552          		void (*handler)(void * context, enum inv_icm20948_sensor sensor, uint64_t timestamp, const void * data, const void *arg))
    553          {
   \                     inv_icm20948_poll_sensor: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0xED2D 0x8B04      VPUSH    {D8-D9}
   \   00000008   0xB0C2             SUB      SP,SP,#+264
   \   0000000A   0x4604             MOV      R4,R0
   \   0000000C   0x460D             MOV      R5,R1
   \   0000000E   0x4616             MOV      R6,R2
    554          	short int_read_back=0;
   \   00000010   0x2000             MOVS     R0,#+0
    555          	unsigned short header=0, header2 = 0; 
   \   00000012   0x9002             STR      R0,[SP, #+8]
   \   00000014   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    556          	int data_left_in_fifo=0;
   \   00000018   0x9008             STR      R0,[SP, #+32]
    557          	short short_data[3] = {0};
   \   0000001A   0xA812             ADD      R0,SP,#+72
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x460A             MOV      R2,R1
   \   00000020   0xE9C0 0x1200      STRD     R1,R2,[R0, #+0]
    558          	signed long  long_data[3] = {0};
   \   00000024   0xA809             ADD      R0,SP,#+36
   \   00000026   0x460B             MOV      R3,R1
   \   00000028   0xC00E             STM      R0!,{R1-R3}
    559          	signed long  long_quat[3] = {0};
   \   0000002A   0xA80F             ADD      R0,SP,#+60
   \   0000002C   0xC00E             STM      R0!,{R1-R3}
    560          	float gyro_raw_float[3];
    561          	float gyro_bias_float[3];
    562          	int gyro_accuracy = 0;
    563          	int dummy_accuracy = 0;
   \   0000002E   0x4608             MOV      R0,R1
   \   00000030   0x900E             STR      R0,[SP, #+56]
    564          	int accel_accuracy = 0;
   \   00000032   0x9007             STR      R0,[SP, #+28]
    565          	int compass_accuracy = 0;
   \   00000034   0x9006             STR      R0,[SP, #+24]
    566          	float rv_accuracy = 0;
   \   00000036   0x900D             STR      R0,[SP, #+52]
    567          	float gmrv_accuracy = 0;
   \   00000038   0x900C             STR      R0,[SP, #+48]
    568          	float accel_float[3];
    569          	float grv_float[4];
    570          	float gyro_float[3];
    571          	float compass_float[3] = {0};
   \   0000003A   0xA832             ADD      R0,SP,#+200
   \   0000003C   0xC00E             STM      R0!,{R1-R3}
    572          	float compass_raw_float[3];
    573          	float rv_float[4];
    574          	float gmrv_float[4];
    575          	uint16_t pickup_state = 0;
   \   0000003E   0x4608             MOV      R0,R1
   \   00000040   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    576          	uint64_t lastIrqTimeUs;
    577          	
    578          	inv_icm20948_identify_interrupt(s, &int_read_back);
   \   00000044   0xF10D 0x010A      ADD      R1,SP,#+10
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0x.... 0x....      BL       inv_icm20948_identify_interrupt
    579          	
    580          	if (int_read_back & (BIT_MSG_DMP_INT | BIT_MSG_DMP_INT_0)) {
   \   0000004E   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   00000052   0xF44F 0x7181      MOV      R1,#+258
   \   00000056   0x4208             TST      R0,R1
   \   00000058   0xF000 0x84E9      BEQ.W    ??inv_icm20948_poll_sensor_0
    581          		lastIrqTimeUs = inv_icm20948_get_time_us();
   \   0000005C   0x.... 0x....      BL       inv_icm20948_get_time_us
   \   00000060   0xE9CD 0x011E      STRD     R0,R1,[SP, #+120]
    582          		do {
    583          			unsigned short total_sample_cnt = 0;
   \                     ??inv_icm20948_poll_sensor_1: (+1)
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    584          
    585          			/* Mirror FIFO contents and stop processing FIFO if an error was detected*/
    586          			if(inv_icm20948_updateTs(s, &data_left_in_fifo, &total_sample_cnt, &lastIrqTimeUs))
   \   0000006A   0xAB1E             ADD      R3,SP,#+120
   \   0000006C   0xF10D 0x020E      ADD      R2,SP,#+14
   \   00000070   0xA908             ADD      R1,SP,#+32
   \   00000072   0x4620             MOV      R0,R4
   \   00000074   0x.... 0x....      BL       inv_icm20948_updateTs
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xF040 0x84A2      BNE.W    ??inv_icm20948_poll_sensor_2
   \   0000007E   0xE042             B.N      ??inv_icm20948_poll_sensor_3
    587          				break;
    588          			while(total_sample_cnt--) {
    589          				/* Read FIFO contents and parse it, and stop processing FIFO if an error was detected*/
    590          				if (inv_icm20948_fifo_pop(s, &header, &header2, &data_left_in_fifo))
    591          					break;
    592          				
    593          				/* Gyro sample available from DMP FIFO */
    594          				if (header & GYRO_SET) {
    595          					float lScaleDeg = (1 << inv_icm20948_get_gyro_fullscale(s)) * 250.f ;// From raw to dps to degree per seconds
    596          					signed long  lRawGyroQ15[3] = {0};
    597          					signed long  lBiasGyroQ20[3] = {0};
    598          
    599          					/* Read raw gyro out of DMP FIFO and convert it from Q15 raw data format to radian per seconds in Android format */
    600          					inv_icm20948_dmp_get_raw_gyro(short_data);  
    601          					lRawGyroQ15[0] = (long) short_data[0];
    602          					lRawGyroQ15[1] = (long) short_data[1];
    603          					lRawGyroQ15[2] = (long) short_data[2];
    604          					inv_icm20948_convert_dmp3_to_body(s, lRawGyroQ15, lScaleDeg/(1L<<15), gyro_raw_float);
    605          					
    606          					if(inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_RAW_GYROSCOPE) && !skip_sensor(s, ANDROID_SENSOR_RAW_GYROSCOPE)) {
    607          						long out[3];
    608          						inv_icm20948_convert_quat_rotate_fxp(s->s_quat_chip_to_body, lRawGyroQ15, out);
    609          						s->timestamp[INV_ICM20948_SENSOR_RAW_GYROSCOPE] += s->sensorlist[INV_ICM20948_SENSOR_RAW_GYROSCOPE].odr_applied_us;
    610          						handler(context, INV_ICM20948_SENSOR_RAW_GYROSCOPE, s->timestamp[INV_ICM20948_SENSOR_RAW_GYROSCOPE], out, &dummy_accuracy);
    611          					}
    612          					/* Read bias gyro out of DMP FIFO and convert it from Q20 raw data format to radian per seconds in Android format */
    613          					inv_icm20948_dmp_get_gyro_bias(short_data);
    614          					lBiasGyroQ20[0] = (long) short_data[0];
    615          					lBiasGyroQ20[1] = (long) short_data[1];
    616          					lBiasGyroQ20[2] = (long) short_data[2];
    617          					inv_icm20948_convert_dmp3_to_body(s, lBiasGyroQ20, lScaleDeg/(1L<<20), gyro_bias_float);
    618          					
    619          					/* Extract accuracy and calibrated gyro data based on raw/bias data if calibrated gyro sensor is enabled */
    620          					gyro_accuracy = inv_icm20948_get_gyro_accuracy();
    621          					/* If accuracy has changed previously we update the new accuracy the same time as bias*/
    622          					if(s->set_accuracy){
    623          						s->set_accuracy = 0;
    624          						s->new_accuracy = gyro_accuracy;
    625          					}
    626          					/* gyro accuracy has changed, we will notify it the next time*/
    627          					if(gyro_accuracy != s->new_accuracy){
    628          						s->set_accuracy = 1;
    629          					}
    630          					if(inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_GYROSCOPE) && !skip_sensor(s, ANDROID_SENSOR_GYROSCOPE)) {
    631          						// shift to Q20 to do all calibrated gyrometer operations in Q20
    632          						lRawGyroQ15[0] <<= 5;
    633          						lRawGyroQ15[1] <<= 5;
    634          						lRawGyroQ15[2] <<= 5;
    635          						/* Compute calibrated gyro data based on raw and bias gyro data and convert it from Q20 raw data format to radian per seconds in Android format */
    636          						inv_icm20948_dmp_get_calibrated_gyro(long_data, lRawGyroQ15, lBiasGyroQ20);
    637          						inv_icm20948_convert_dmp3_to_body(s, long_data, lScaleDeg/(1L<<20), gyro_float);
    638          						s->timestamp[INV_ICM20948_SENSOR_GYROSCOPE] += s->sensorlist[INV_ICM20948_SENSOR_GYROSCOPE].odr_applied_us;
    639          						handler(context, INV_ICM20948_SENSOR_GYROSCOPE, s->timestamp[INV_ICM20948_SENSOR_GYROSCOPE], gyro_float, &s->new_accuracy);
    640          					}
    641          					if(inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_GYROSCOPE_UNCALIBRATED)  && !skip_sensor(s, ANDROID_SENSOR_GYROSCOPE_UNCALIBRATED)) {
    642          						float raw_bias_gyr[6];
    643          						raw_bias_gyr[0] = gyro_raw_float[0];
    644          						raw_bias_gyr[1] = gyro_raw_float[1];
    645          						raw_bias_gyr[2] = gyro_raw_float[2];
    646          						raw_bias_gyr[3] = gyro_bias_float[0];
    647          						raw_bias_gyr[4] = gyro_bias_float[1];
    648          						raw_bias_gyr[5] = gyro_bias_float[2];
    649          						s->timestamp[INV_ICM20948_SENSOR_GYROSCOPE_UNCALIBRATED] += s->sensorlist[INV_ICM20948_SENSOR_GYROSCOPE_UNCALIBRATED].odr_applied_us;
    650          						/* send raw float and bias for uncal gyr*/
    651          						handler(context, INV_ICM20948_SENSOR_GYROSCOPE_UNCALIBRATED, s->timestamp[INV_ICM20948_SENSOR_GYROSCOPE_UNCALIBRATED], raw_bias_gyr, &s->new_accuracy);
    652          					}
    653          				}
    654          				/* Calibrated accel sample available from DMP FIFO */
    655          				if (header & ACCEL_SET) {
    656          					float scale;
    657          					/* Read calibrated accel out of DMP FIFO and convert it from Q25 raw data format to m/s² in Android format */
    658          					inv_icm20948_dmp_get_accel(long_data);
    659          
    660          					if(inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_RAW_ACCELEROMETER) && !skip_sensor(s, ANDROID_SENSOR_RAW_ACCELEROMETER)) {
    661          						long out[3];
    662          						inv_icm20948_convert_quat_rotate_fxp(s->s_quat_chip_to_body, long_data, out);
    663          						/* convert to raw data format to Q12/Q11/Q10/Q9 depending on full scale applied,
    664          						so that it fits on 16bits so that it can go through any protocol, even the one which have raw data on 16b */
    665          						out[0] = out[0] >> 15;
    666          						out[1] = out[1] >> 15;
    667          						out[2] = out[2] >> 15;
    668          						s->timestamp[INV_ICM20948_SENSOR_RAW_ACCELEROMETER] += s->sensorlist[INV_ICM20948_SENSOR_RAW_ACCELEROMETER].odr_applied_us;
    669          						handler(context, INV_ICM20948_SENSOR_RAW_ACCELEROMETER, s->timestamp[INV_ICM20948_SENSOR_RAW_ACCELEROMETER], out, &dummy_accuracy);
    670          					}
    671          					if((inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_ACCELEROMETER) && !skip_sensor(s, ANDROID_SENSOR_ACCELEROMETER)) ||
    672          					   (inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_LINEAR_ACCELERATION))) {
    673          						accel_accuracy = inv_icm20948_get_accel_accuracy();
    674          						scale = (1 << inv_icm20948_get_accel_fullscale(s)) * 2.f / (1L<<30); // Convert from raw units to g's
    675          
    676          						inv_icm20948_convert_dmp3_to_body(s, long_data, scale, accel_float);
    677          
    678          						if(inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_ACCELEROMETER)) {
    679          							s->timestamp[INV_ICM20948_SENSOR_ACCELEROMETER] += s->sensorlist[INV_ICM20948_SENSOR_ACCELEROMETER].odr_applied_us;
    680          							handler(context, INV_ICM20948_SENSOR_ACCELEROMETER, s->timestamp[INV_ICM20948_SENSOR_ACCELEROMETER], accel_float, &accel_accuracy);
    681          						}
    682          					}
    683          				}
    684          				/* Calibrated compass sample available from DMP FIFO */
    685          				if (header & CPASS_CALIBR_SET) {
    686          					float scale;
    687          					
    688          					/* Read calibrated compass out of DMP FIFO and convert it from Q16 raw data format to µT in Android format */
    689          					inv_icm20948_dmp_get_calibrated_compass(long_data);
    690          
    691          					compass_accuracy = inv_icm20948_get_mag_accuracy();
    692          					scale = DMP_UNIT_TO_FLOAT_COMPASS_CONVERSION;
    693          					inv_icm20948_convert_dmp3_to_body(s, long_data, scale, compass_float);
    694          					if(inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_GEOMAGNETIC_FIELD) && !skip_sensor(s, ANDROID_SENSOR_GEOMAGNETIC_FIELD)) {
    695          						s->timestamp[INV_ICM20948_SENSOR_GEOMAGNETIC_FIELD] += s->sensorlist[INV_ICM20948_SENSOR_GEOMAGNETIC_FIELD].odr_applied_us;
    696          						handler(context, INV_ICM20948_SENSOR_GEOMAGNETIC_FIELD, s->timestamp[INV_ICM20948_SENSOR_GEOMAGNETIC_FIELD], compass_float, &compass_accuracy);
    697          					}
    698          				}
    699          
    700          				/* Raw compass sample available from DMP FIFO */
    701          				if (header & CPASS_SET) {
    702          					/* Read calibrated compass out of DMP FIFO and convert it from Q16 raw data format to µT in Android format */
    703          					inv_icm20948_dmp_get_raw_compass(long_data);
    704          					compass_raw_float[0] = long_data[0] * DMP_UNIT_TO_FLOAT_COMPASS_CONVERSION;
    705          					compass_raw_float[1] = long_data[1] * DMP_UNIT_TO_FLOAT_COMPASS_CONVERSION;
    706          					compass_raw_float[2] = long_data[2] * DMP_UNIT_TO_FLOAT_COMPASS_CONVERSION;
    707          					if(inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_MAGNETIC_FIELD_UNCALIBRATED) && !skip_sensor(s, ANDROID_SENSOR_MAGNETIC_FIELD_UNCALIBRATED)) {
    708          						float raw_bias_mag[6];
    709          						int mag_bias[3];
    710          
    711          						raw_bias_mag[0] = compass_raw_float[0];
    712          						raw_bias_mag[1] = compass_raw_float[1];
    713          						raw_bias_mag[2] = compass_raw_float[2];
    714          						inv_icm20948_ctrl_get_mag_bias(s, mag_bias);
    715          						//calculate bias
    716          						raw_bias_mag[3] = mag_bias[0] * DMP_UNIT_TO_FLOAT_COMPASS_CONVERSION;
    717          						raw_bias_mag[4] = mag_bias[1] * DMP_UNIT_TO_FLOAT_COMPASS_CONVERSION;
    718          						raw_bias_mag[5] = mag_bias[2] * DMP_UNIT_TO_FLOAT_COMPASS_CONVERSION;
    719          						
    720          						compass_accuracy = inv_icm20948_get_mag_accuracy();
    721          						s->timestamp[INV_ICM20948_SENSOR_MAGNETIC_FIELD_UNCALIBRATED] += s->sensorlist[INV_ICM20948_SENSOR_MAGNETIC_FIELD_UNCALIBRATED].odr_applied_us;
    722          						/* send raw float and bias for uncal mag*/
    723          						handler(context, INV_ICM20948_SENSOR_MAGNETIC_FIELD_UNCALIBRATED, s->timestamp[INV_ICM20948_SENSOR_MAGNETIC_FIELD_UNCALIBRATED],
    724          								raw_bias_mag, &compass_accuracy);
    725          					}
    726          				}
    727          				/* 6axis AG orientation quaternion sample available from DMP FIFO */
    728          				if (header & QUAT6_SET) {
    729          					long gravityQ16[3];
    730          					float ref_quat[4];
    731          					/* Read 6 axis quaternion out of DMP FIFO in Q30 */
    732          					inv_icm20948_dmp_get_6quaternion(long_quat);
    733          					if(inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_GAME_ROTATION_VECTOR) && !skip_sensor(s, ANDROID_SENSOR_GAME_ROTATION_VECTOR)) {
    734          						/* and convert it from Q30 DMP format to Android format only if GRV sensor is enabled */
    735          						inv_icm20948_convert_rotation_vector(s, long_quat, grv_float);
    736          						ref_quat[0] = grv_float[3];
    737          						ref_quat[1] = grv_float[0];
    738          						ref_quat[2] = grv_float[1];
    739          						ref_quat[3] = grv_float[2];
    740          						s->timestamp[INV_ICM20948_SENSOR_GAME_ROTATION_VECTOR] += s->sensorlist[INV_ICM20948_SENSOR_GAME_ROTATION_VECTOR].odr_applied_us;
    741          						handler(context, INV_ICM20948_SENSOR_GAME_ROTATION_VECTOR, s->timestamp[INV_ICM20948_SENSOR_GAME_ROTATION_VECTOR], ref_quat, 0);
    742          					}
    743          					
    744          					/* Compute gravity sensor data in Q16 in g based on 6 axis quaternion in Q30 DMP format */
    745          					inv_icm20948_augmented_sensors_get_gravity(s, gravityQ16, long_quat);
    746          					if(inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_GRAVITY) && !skip_sensor(s, ANDROID_SENSOR_GRAVITY)) {
    747          						float gravity_float[3];
    748          						/* Convert gravity data from Q16 to float format in g */
    749          						gravity_float[0] = INVN_FXP_TO_FLT(gravityQ16[0], 16);
    750          						gravity_float[1] = INVN_FXP_TO_FLT(gravityQ16[1], 16);
    751          						gravity_float[2] = INVN_FXP_TO_FLT(gravityQ16[2], 16);
    752          						s->timestamp[INV_ICM20948_SENSOR_GRAVITY] += s->sensorlist[INV_ICM20948_SENSOR_GRAVITY].odr_applied_us;
    753          						handler(context, INV_ICM20948_SENSOR_GRAVITY, s->timestamp[INV_ICM20948_SENSOR_GRAVITY], gravity_float, &accel_accuracy);
    754          					}
    755          				
    756          					if(inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_LINEAR_ACCELERATION) && !skip_sensor(s, ANDROID_SENSOR_LINEAR_ACCELERATION)) {
    757          						float linacc_float[3];
    758          						long linAccQ16[3];
    759          						long accelQ16[3];
    760          
    761          						/* Compute linear acceleration data based on accelerometer data in Q16 g and on gravity data in Q16 g */
    762          						accelQ16[0] = (int32_t)  ((float)(accel_float[0])*(1ULL << 16) + ( (accel_float[0]>=0)-0.5f ));
    763          						accelQ16[1] = (int32_t)  ((float)(accel_float[1])*(1ULL << 16) + ( (accel_float[1]>=0)-0.5f ));
    764          						accelQ16[2] = (int32_t)  ((float)(accel_float[2])*(1ULL << 16) + ( (accel_float[2]>=0)-0.5f ));
    765          
    766          						inv_icm20948_augmented_sensors_get_linearacceleration(linAccQ16, gravityQ16, accelQ16);
    767          						linacc_float[0] = INVN_FXP_TO_FLT(linAccQ16[0], 16);
    768          						linacc_float[1] = INVN_FXP_TO_FLT(linAccQ16[1], 16);
    769          						linacc_float[2] = INVN_FXP_TO_FLT(linAccQ16[2], 16);
    770          						s->timestamp[INV_ICM20948_SENSOR_LINEAR_ACCELERATION] += s->sensorlist[INV_ICM20948_SENSOR_LINEAR_ACCELERATION].odr_applied_us;
    771          						handler(context, INV_ICM20948_SENSOR_LINEAR_ACCELERATION, s->timestamp[INV_ICM20948_SENSOR_LINEAR_ACCELERATION], linacc_float, &accel_accuracy);
    772          					}
    773          				}
    774          				/* 9axis orientation quaternion sample available from DMP FIFO */
    775          				if (header & QUAT9_SET) {
    776          					float ref_quat[4];
    777          					/* Read 9 axis quaternion out of DMP FIFO in Q30 */
    778          					inv_icm20948_dmp_get_9quaternion(long_quat);
    779          					if(inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_ROTATION_VECTOR) && !skip_sensor(s, ANDROID_SENSOR_ROTATION_VECTOR)) {
    780          						/* and convert it from Q30 DMP format to Android format only if RV sensor is enabled */
    781          						inv_icm20948_convert_rotation_vector(s, long_quat, rv_float);
    782          						/* Read rotation vector heading accuracy out of DMP FIFO in Q29*/
    783          						rv_accuracy = (float)inv_icm20948_get_rv_accuracy()/(float)(1ULL << (29));
    784          						ref_quat[0] = rv_float[3];
    785          						ref_quat[1] = rv_float[0];
    786          						ref_quat[2] = rv_float[1];
    787          						ref_quat[3] = rv_float[2];
    788          						s->timestamp[INV_ICM20948_SENSOR_ROTATION_VECTOR] += s->sensorlist[INV_ICM20948_SENSOR_ROTATION_VECTOR].odr_applied_us;
    789          						handler(context, INV_ICM20948_SENSOR_ROTATION_VECTOR, s->timestamp[INV_ICM20948_SENSOR_ROTATION_VECTOR], ref_quat, &rv_accuracy);
    790          					}
    791          					
    792          					if(inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_ORIENTATION) && !skip_sensor(s, ANDROID_SENSOR_ORIENTATION)) {
    793          						long orientationQ16[3];
    794          						float orientation_float[3];
    795          						/* Compute Android-orientation sensor data based on rotation vector data in Q30 */
    796          						inv_icm20948_augmented_sensors_get_orientation(orientationQ16, long_quat);
    797          						orientation_float[0] = INVN_FXP_TO_FLT(orientationQ16[0], 16);
    798          						orientation_float[1] = INVN_FXP_TO_FLT(orientationQ16[1], 16);
    799          						orientation_float[2] = INVN_FXP_TO_FLT(orientationQ16[2], 16);
    800          						s->timestamp[INV_ICM20948_SENSOR_ORIENTATION] += s->sensorlist[INV_ICM20948_SENSOR_ORIENTATION].odr_applied_us;
    801          						handler(context, INV_ICM20948_SENSOR_ORIENTATION, s->timestamp[INV_ICM20948_SENSOR_ORIENTATION], orientation_float, 0);
    802          					}
    803          				}
    804          				/* 6axis AM orientation quaternion sample available from DMP FIFO */
    805          				if (header & GEOMAG_SET) {
    806          					float ref_quat[4];
    807          					/* Read 6 axis quaternion out of DMP FIFO in Q30 and convert it to Android format */
    808          					inv_icm20948_dmp_get_gmrvquaternion(long_quat);
    809          					if(inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_GEOMAGNETIC_ROTATION_VECTOR) && !skip_sensor(s, ANDROID_SENSOR_GEOMAGNETIC_ROTATION_VECTOR)) {
    810          						inv_icm20948_convert_rotation_vector(s, long_quat, gmrv_float);
    811          						/* Read geomagnetic rotation vector heading accuracy out of DMP FIFO in Q29*/
    812          						gmrv_accuracy = (float)inv_icm20948_get_gmrv_accuracy()/(float)(1ULL << (29));
    813          						ref_quat[0] = gmrv_float[3];
    814          						ref_quat[1] = gmrv_float[0];
    815          						ref_quat[2] = gmrv_float[1];
    816          						ref_quat[3] = gmrv_float[2];
    817          						s->timestamp[INV_ICM20948_SENSOR_GEOMAGNETIC_ROTATION_VECTOR] += s->sensorlist[INV_ICM20948_SENSOR_GEOMAGNETIC_ROTATION_VECTOR].odr_applied_us;
    818          						handler(context, INV_ICM20948_SENSOR_GEOMAGNETIC_ROTATION_VECTOR, s->timestamp[INV_ICM20948_SENSOR_GEOMAGNETIC_ROTATION_VECTOR], 
    819          								ref_quat, &gmrv_accuracy);
    820          					}
    821          				}
    822          				/* Activity recognition sample available from DMP FIFO */
    823          				if (header2 & ACT_RECOG_SET) {
    824          					uint16_t bac_state = 0;
    825          					long bac_ts = 0;
    826          					int bac_event = 0;
    827          					struct bac_map{
    828          						uint8_t act_id;
    829          						enum inv_sensor_bac_event sensor_bac;
    830          					} map[] = {
    831          						{ BAC_DRIVE, INV_SENSOR_BAC_EVENT_ACT_IN_VEHICLE_BEGIN},
    832          						{ BAC_WALK, INV_SENSOR_BAC_EVENT_ACT_WALKING_BEGIN},
    833          						{ BAC_RUN, INV_SENSOR_BAC_EVENT_ACT_RUNNING_BEGIN},
    834          						{ BAC_BIKE, INV_SENSOR_BAC_EVENT_ACT_ON_BICYCLE_BEGIN},
    835          						{ BAC_STILL, INV_SENSOR_BAC_EVENT_ACT_STILL_BEGIN},
    836          						{ BAC_TILT, INV_SENSOR_BAC_EVENT_ACT_TILT_BEGIN},
    837          					};
    838          					int i = 0;
    839          					/* Read activity type and associated timestamp out of DMP FIFO
    840          					activity type is a set of 2 bytes :
    841          					- high byte indicates activity start
    842          					- low byte indicates activity end */
    843          					inv_icm20948_dmp_get_bac_state(&bac_state);
    844          					inv_icm20948_dmp_get_bac_ts(&bac_ts);
    845          					//Map according to dmp bac events
    846          					for(i = 0; i < 6; i++) {
    847          						if ((bac_state >> 8) & map[i].act_id){
    848          							//Check if BAC is enabled
    849          							if (inv_icm20948_ctrl_get_activitiy_classifier_on_flag(s)) {
    850          								/* Start detected */
    851          								bac_event = map[i].sensor_bac;
    852          								handler(context, INV_ICM20948_SENSOR_ACTIVITY_CLASSIFICATON, s->timestamp[INV_ICM20948_SENSOR_ACTIVITY_CLASSIFICATON], &bac_event, 0);
    853          							}
    854          							//build event TILT only if enabled
    855          							if((map[i].act_id == BAC_TILT) && inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_WAKEUP_TILT_DETECTOR))
    856          								handler(context, INV_ICM20948_SENSOR_WAKEUP_TILT_DETECTOR, s->timestamp[INV_ICM20948_SENSOR_WAKEUP_TILT_DETECTOR], 0, 0);
    857          						}
    858          						/* Check if bit tilt is set for activity end byte */
    859          						else if (bac_state & map[i].act_id) {
    860          							//Check if BAC is enabled
    861          							if (inv_icm20948_ctrl_get_activitiy_classifier_on_flag(s)) {
    862          								/* End detected */
    863          								bac_event = -map[i].sensor_bac;
    864          								handler(context, INV_ICM20948_SENSOR_ACTIVITY_CLASSIFICATON, s->timestamp[INV_ICM20948_SENSOR_ACTIVITY_CLASSIFICATON], &bac_event, 0);
    865          							}
    866          						}
    867          					}
    868          				}
    869          				/* Pickup sample available from DMP FIFO */
    870          				if (header2 & FLIP_PICKUP_SET) {
   \                     ??inv_icm20948_poll_sensor_4: (+1)
   \   00000080   0xF8BD 0x0010      LDRH     R0,[SP, #+16]
   \   00000084   0x0540             LSLS     R0,R0,#+21
   \   00000086   0xD510             BPL.N    ??inv_icm20948_poll_sensor_5
    871          					/* Read pickup type and associated timestamp out of DMP FIFO */
    872          					inv_icm20948_dmp_get_flip_pickup_state(&pickup_state);
   \   00000088   0xF10D 0x0012      ADD      R0,SP,#+18
   \   0000008C   0x.... 0x....      BL       inv_icm20948_dmp_get_flip_pickup_state
    873          					handler(context, INV_ICM20948_SENSOR_FLIP_PICKUP, s->timestamp[INV_ICM20948_SENSOR_FLIP_PICKUP], &pickup_state, 0);
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x9001             STR      R0,[SP, #+4]
   \   00000094   0xF10D 0x0012      ADD      R0,SP,#+18
   \   00000098   0x9000             STR      R0,[SP, #+0]
   \   0000009A   0xF44F 0x7032      MOV      R0,#+712
   \   0000009E   0x4420             ADD      R0,R4,R0
   \   000000A0   0xE9D0 0x231C      LDRD     R2,R3,[R0, #+112]
   \   000000A4   0x210E             MOVS     R1,#+14
   \   000000A6   0x4628             MOV      R0,R5
   \   000000A8   0x47B0             BLX      R6
    874          				}
    875                                          
    876                      	/* Step detector available from DMP FIFO and step counter sensor is enabled*/
    877          				// If step detector enabled => step counter started too 
    878          				// So don't watch the step counter data if the user doesn't start the sensor
    879          				if((header & PED_STEPDET_SET) && (inv_icm20948_ctrl_androidSensor_enabled(s, ANDROID_SENSOR_STEP_COUNTER))) {
   \                     ??inv_icm20948_poll_sensor_5: (+1)
   \   000000AA   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   000000AE   0x06C0             LSLS     R0,R0,#+27
   \   000000B0   0xD529             BPL.N    ??inv_icm20948_poll_sensor_3
   \   000000B2   0x2113             MOVS     R1,#+19
   \   000000B4   0x4620             MOV      R0,R4
   \   000000B6   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   000000BA   0x2800             CMP      R0,#+0
   \   000000BC   0xD023             BEQ.N    ??inv_icm20948_poll_sensor_3
    880          					unsigned long steps;
    881          					unsigned long lsteps;
    882          					uint64_t stepc = 0;
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x4601             MOV      R1,R0
   \   000000C2   0xE9CD 0x0114      STRD     R0,R1,[SP, #+80]
    883          					/* Read amount of steps counted out of DMP FIFO and notify them only if updated */
    884          					dmp_icm20948_get_pedometer_num_of_steps(s, &lsteps);
   \   000000C6   0xA905             ADD      R1,SP,#+20
   \   000000C8   0x4620             MOV      R0,R4
   \   000000CA   0x.... 0x....      BL       dmp_icm20948_get_pedometer_num_of_steps
    885          					// need to subtract the steps accumulated while Step Counter sensor is not active.
    886          					steps = lsteps - s->sStepCounterToBeSubtracted;
   \   000000CE   0xF104 0x07A0      ADD      R7,R4,#+160
   \   000000D2   0x9805             LDR      R0,[SP, #+20]
   \   000000D4   0x6839             LDR      R1,[R7, #+0]
   \   000000D6   0x1A40             SUBS     R0,R0,R1
    887          					stepc = steps;
   \   000000D8   0x2100             MOVS     R1,#+0
   \   000000DA   0xE9CD 0x0114      STRD     R0,R1,[SP, #+80]
    888          					if(stepc != s->sOldSteps) {
   \   000000DE   0xE9DD 0x2314      LDRD     R2,R3,[SP, #+80]
   \   000000E2   0xF8D7 0x8004      LDR      R8,[R7, #+4]
   \   000000E6   0xD101             BNE.N    ??inv_icm20948_poll_sensor_6
   \   000000E8   0x4542             CMP      R2,R8
   \   000000EA   0xD00C             BEQ.N    ??inv_icm20948_poll_sensor_3
    889          						s->sOldSteps = steps;
   \                     ??inv_icm20948_poll_sensor_6: (+1)
   \   000000EC   0x6078             STR      R0,[R7, #+4]
    890          						handler(context, INV_ICM20948_SENSOR_STEP_COUNTER, s->timestamp[INV_ICM20948_SENSOR_STEP_COUNTER], &stepc, 0);
   \   000000EE   0x4608             MOV      R0,R1
   \   000000F0   0x9001             STR      R0,[SP, #+4]
   \   000000F2   0xA814             ADD      R0,SP,#+80
   \   000000F4   0x9000             STR      R0,[SP, #+0]
   \   000000F6   0xF44F 0x7032      MOV      R0,#+712
   \   000000FA   0x4420             ADD      R0,R4,R0
   \   000000FC   0xE9D0 0x2310      LDRD     R2,R3,[R0, #+64]
   \   00000100   0x2108             MOVS     R1,#+8
   \   00000102   0x4628             MOV      R0,R5
   \   00000104   0x47B0             BLX      R6
    891          					}
    892          				}          
   \                     ??inv_icm20948_poll_sensor_3: (+1)
   \   00000106   0xF8BD 0x000E      LDRH     R0,[SP, #+14]
   \   0000010A   0x1E41             SUBS     R1,R0,#+1
   \   0000010C   0xF8AD 0x100E      STRH     R1,[SP, #+14]
   \   00000110   0x2800             CMP      R0,#+0
   \   00000112   0xF000 0x8452      BEQ.W    ??inv_icm20948_poll_sensor_7
   \   00000116   0xAB08             ADD      R3,SP,#+32
   \   00000118   0xAA04             ADD      R2,SP,#+16
   \   0000011A   0xA902             ADD      R1,SP,#+8
   \   0000011C   0x4620             MOV      R0,R4
   \   0000011E   0x.... 0x....      BL       inv_icm20948_fifo_pop
   \   00000122   0x2800             CMP      R0,#+0
   \   00000124   0xF040 0x8449      BNE.W    ??inv_icm20948_poll_sensor_7
   \   00000128   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000012C   0x0440             LSLS     R0,R0,#+17
   \   0000012E   0xF140 0x80EB      BPL.W    ??inv_icm20948_poll_sensor_8
   \   00000132   0x2701             MOVS     R7,#+1
   \   00000134   0x4620             MOV      R0,R4
   \   00000136   0x.... 0x....      BL       inv_icm20948_get_gyro_fullscale
   \   0000013A   0xFA07 0xF000      LSL      R0,R7,R0
   \   0000013E   0xEE00 0x0A10      VMOV     S0,R0
   \   00000142   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000146   0xEDDF 0x0AA0      VLDR.W   S1,??inv_icm20948_poll_sensor_9  ;; 0x437a0000
   \   0000014A   0xEE20 0x8A20      VMUL.F32 S16,S0,S1
   \   0000014E   0xA814             ADD      R0,SP,#+80
   \   00000150   0x2100             MOVS     R1,#+0
   \   00000152   0x460A             MOV      R2,R1
   \   00000154   0x460B             MOV      R3,R1
   \   00000156   0xC00E             STM      R0!,{R1-R3}
   \   00000158   0xA81A             ADD      R0,SP,#+104
   \   0000015A   0xC00E             STM      R0!,{R1-R3}
   \   0000015C   0xA812             ADD      R0,SP,#+72
   \   0000015E   0x.... 0x....      BL       inv_icm20948_dmp_get_raw_gyro
   \   00000162   0xF9BD 0x0048      LDRSH    R0,[SP, #+72]
   \   00000166   0x9014             STR      R0,[SP, #+80]
   \   00000168   0xF10D 0x0850      ADD      R8,SP,#+80
   \   0000016C   0xF10D 0x0948      ADD      R9,SP,#+72
   \   00000170   0xF9B9 0x0002      LDRSH    R0,[R9, #+2]
   \   00000174   0xF8C8 0x0004      STR      R0,[R8, #+4]
   \   00000178   0xF9B9 0x0004      LDRSH    R0,[R9, #+4]
   \   0000017C   0xF8C8 0x0008      STR      R0,[R8, #+8]
   \   00000180   0xAA3F             ADD      R2,SP,#+252
   \   00000182   0xED9F 0x0A92      VLDR.W   S0,??inv_icm20948_poll_sensor_9+0x4  ;; 0x38000000
   \   00000186   0xEE28 0x0A00      VMUL.F32 S0,S16,S0
   \   0000018A   0xA914             ADD      R1,SP,#+80
   \   0000018C   0x4620             MOV      R0,R4
   \   0000018E   0x.... 0x....      BL       inv_icm20948_convert_dmp3_to_body
   \   00000192   0xF44F 0x7032      MOV      R0,#+712
   \   00000196   0x1827             ADDS     R7,R4,R0
   \   00000198   0x212B             MOVS     R1,#+43
   \   0000019A   0x4620             MOV      R0,R4
   \   0000019C   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   000001A0   0x2800             CMP      R0,#+0
   \   000001A2   0xD020             BEQ.N    ??inv_icm20948_poll_sensor_10
   \   000001A4   0x212B             MOVS     R1,#+43
   \   000001A6   0x4620             MOV      R0,R4
   \   000001A8   0x.... 0x....      BL       skip_sensor
   \   000001AC   0x2800             CMP      R0,#+0
   \   000001AE   0xD11A             BNE.N    ??inv_icm20948_poll_sensor_10
   \   000001B0   0xAA20             ADD      R2,SP,#+128
   \   000001B2   0xA914             ADD      R1,SP,#+80
   \   000001B4   0xF104 0x00A8      ADD      R0,R4,#+168
   \   000001B8   0x.... 0x....      BL       inv_icm20948_convert_quat_rotate_fxp
   \   000001BC   0xF44F 0x7052      MOV      R0,#+840
   \   000001C0   0xEB04 0x0C00      ADD      R12,R4,R0
   \   000001C4   0xE9D7 0x0106      LDRD     R0,R1,[R7, #+24]
   \   000001C8   0x4602             MOV      R2,R0
   \   000001CA   0x460B             MOV      R3,R1
   \   000001CC   0xE9DC 0x011C      LDRD     R0,R1,[R12, #+112]
   \   000001D0   0x1812             ADDS     R2,R2,R0
   \   000001D2   0x414B             ADCS     R3,R3,R1
   \   000001D4   0xE9C7 0x2306      STRD     R2,R3,[R7, #+24]
   \   000001D8   0xA80E             ADD      R0,SP,#+56
   \   000001DA   0x9001             STR      R0,[SP, #+4]
   \   000001DC   0xA820             ADD      R0,SP,#+128
   \   000001DE   0x9000             STR      R0,[SP, #+0]
   \   000001E0   0x2103             MOVS     R1,#+3
   \   000001E2   0x4628             MOV      R0,R5
   \   000001E4   0x47B0             BLX      R6
   \                     ??inv_icm20948_poll_sensor_10: (+1)
   \   000001E6   0xA812             ADD      R0,SP,#+72
   \   000001E8   0x.... 0x....      BL       inv_icm20948_dmp_get_gyro_bias
   \   000001EC   0xF9BD 0x0048      LDRSH    R0,[SP, #+72]
   \   000001F0   0x901A             STR      R0,[SP, #+104]
   \   000001F2   0xA81A             ADD      R0,SP,#+104
   \   000001F4   0xF9B9 0x1002      LDRSH    R1,[R9, #+2]
   \   000001F8   0x6041             STR      R1,[R0, #+4]
   \   000001FA   0xF9B9 0x1004      LDRSH    R1,[R9, #+4]
   \   000001FE   0x6081             STR      R1,[R0, #+8]
   \   00000200   0xED9F 0x0A73      VLDR.W   S0,??inv_icm20948_poll_sensor_9+0x8  ;; 0x35800000
   \   00000204   0xEE28 0x8A00      VMUL.F32 S16,S16,S0
   \   00000208   0xAA3C             ADD      R2,SP,#+240
   \   0000020A   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000020E   0xA91A             ADD      R1,SP,#+104
   \   00000210   0x4620             MOV      R0,R4
   \   00000212   0x.... 0x....      BL       inv_icm20948_convert_dmp3_to_body
   \   00000216   0x.... 0x....      BL       inv_icm20948_get_gyro_accuracy
   \   0000021A   0xF9B4 0x14F2      LDRSH    R1,[R4, #+1266]
   \   0000021E   0x2900             CMP      R1,#+0
   \   00000220   0xD004             BEQ.N    ??inv_icm20948_poll_sensor_11
   \   00000222   0x2100             MOVS     R1,#+0
   \   00000224   0xF8A4 0x14F2      STRH     R1,[R4, #+1266]
   \   00000228   0xF8C4 0x04F4      STR      R0,[R4, #+1268]
   \                     ??inv_icm20948_poll_sensor_11: (+1)
   \   0000022C   0xF8D4 0x14F4      LDR      R1,[R4, #+1268]
   \   00000230   0x4288             CMP      R0,R1
   \   00000232   0xD002             BEQ.N    ??inv_icm20948_poll_sensor_12
   \   00000234   0x2001             MOVS     R0,#+1
   \   00000236   0xF8A4 0x04F2      STRH     R0,[R4, #+1266]
   \                     ??inv_icm20948_poll_sensor_12: (+1)
   \   0000023A   0x2104             MOVS     R1,#+4
   \   0000023C   0x4620             MOV      R0,R4
   \   0000023E   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   00000242   0x2800             CMP      R0,#+0
   \   00000244   0xD032             BEQ.N    ??inv_icm20948_poll_sensor_13
   \   00000246   0x2104             MOVS     R1,#+4
   \   00000248   0x4620             MOV      R0,R4
   \   0000024A   0x.... 0x....      BL       skip_sensor
   \   0000024E   0x2800             CMP      R0,#+0
   \   00000250   0xD12C             BNE.N    ??inv_icm20948_poll_sensor_13
   \   00000252   0x9814             LDR      R0,[SP, #+80]
   \   00000254   0x0140             LSLS     R0,R0,#+5
   \   00000256   0x9014             STR      R0,[SP, #+80]
   \   00000258   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   0000025C   0x0140             LSLS     R0,R0,#+5
   \   0000025E   0xF8C8 0x0004      STR      R0,[R8, #+4]
   \   00000262   0xF8D8 0x0008      LDR      R0,[R8, #+8]
   \   00000266   0x0140             LSLS     R0,R0,#+5
   \   00000268   0xF8C8 0x0008      STR      R0,[R8, #+8]
   \   0000026C   0xAA1A             ADD      R2,SP,#+104
   \   0000026E   0xA914             ADD      R1,SP,#+80
   \   00000270   0xA809             ADD      R0,SP,#+36
   \   00000272   0x.... 0x....      BL       inv_icm20948_dmp_get_calibrated_gyro
   \   00000276   0xAA35             ADD      R2,SP,#+212
   \   00000278   0xEEB0 0x0A48      VMOV.F32 S0,S16
   \   0000027C   0xA909             ADD      R1,SP,#+36
   \   0000027E   0x4620             MOV      R0,R4
   \   00000280   0x.... 0x....      BL       inv_icm20948_convert_dmp3_to_body
   \   00000284   0xF44F 0x7052      MOV      R0,#+840
   \   00000288   0xEB04 0x0C00      ADD      R12,R4,R0
   \   0000028C   0xE9D7 0x0102      LDRD     R0,R1,[R7, #+8]
   \   00000290   0xE9DC 0x2314      LDRD     R2,R3,[R12, #+80]
   \   00000294   0x1882             ADDS     R2,R0,R2
   \   00000296   0x414B             ADCS     R3,R1,R3
   \   00000298   0xE9C7 0x2302      STRD     R2,R3,[R7, #+8]
   \   0000029C   0xF204 0x40F4      ADDW     R0,R4,#+1268
   \   000002A0   0x9001             STR      R0,[SP, #+4]
   \   000002A2   0xA835             ADD      R0,SP,#+212
   \   000002A4   0x9000             STR      R0,[SP, #+0]
   \   000002A6   0x2101             MOVS     R1,#+1
   \   000002A8   0x4628             MOV      R0,R5
   \   000002AA   0x47B0             BLX      R6
   \                     ??inv_icm20948_poll_sensor_13: (+1)
   \   000002AC   0x2110             MOVS     R1,#+16
   \   000002AE   0x4620             MOV      R0,R4
   \   000002B0   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   000002B4   0x2800             CMP      R0,#+0
   \   000002B6   0xD027             BEQ.N    ??inv_icm20948_poll_sensor_8
   \   000002B8   0x2110             MOVS     R1,#+16
   \   000002BA   0x4620             MOV      R0,R4
   \   000002BC   0x.... 0x....      BL       skip_sensor
   \   000002C0   0x2800             CMP      R0,#+0
   \   000002C2   0xD121             BNE.N    ??inv_icm20948_poll_sensor_8
   \   000002C4   0x983F             LDR      R0,[SP, #+252]
   \   000002C6   0x9020             STR      R0,[SP, #+128]
   \   000002C8   0xA820             ADD      R0,SP,#+128
   \   000002CA   0xA93F             ADD      R1,SP,#+252
   \   000002CC   0x684A             LDR      R2,[R1, #+4]
   \   000002CE   0x6042             STR      R2,[R0, #+4]
   \   000002D0   0x6889             LDR      R1,[R1, #+8]
   \   000002D2   0x6081             STR      R1,[R0, #+8]
   \   000002D4   0x993C             LDR      R1,[SP, #+240]
   \   000002D6   0x60C1             STR      R1,[R0, #+12]
   \   000002D8   0xA93C             ADD      R1,SP,#+240
   \   000002DA   0x684A             LDR      R2,[R1, #+4]
   \   000002DC   0x6102             STR      R2,[R0, #+16]
   \   000002DE   0x6889             LDR      R1,[R1, #+8]
   \   000002E0   0x6141             STR      R1,[R0, #+20]
   \   000002E2   0xF44F 0x7072      MOV      R0,#+968
   \   000002E6   0x4420             ADD      R0,R4,R0
   \   000002E8   0xE9D7 0x230A      LDRD     R2,R3,[R7, #+40]
   \   000002EC   0xE9D0 0x0104      LDRD     R0,R1,[R0, #+16]
   \   000002F0   0x1812             ADDS     R2,R2,R0
   \   000002F2   0x414B             ADCS     R3,R3,R1
   \   000002F4   0xE9C7 0x230A      STRD     R2,R3,[R7, #+40]
   \   000002F8   0xF204 0x40F4      ADDW     R0,R4,#+1268
   \   000002FC   0x9001             STR      R0,[SP, #+4]
   \   000002FE   0xA820             ADD      R0,SP,#+128
   \   00000300   0x9000             STR      R0,[SP, #+0]
   \   00000302   0x2105             MOVS     R1,#+5
   \   00000304   0x4628             MOV      R0,R5
   \   00000306   0x47B0             BLX      R6
   \                     ??inv_icm20948_poll_sensor_8: (+1)
   \   00000308   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000030C   0x0400             LSLS     R0,R0,#+16
   \   0000030E   0xF140 0x8084      BPL.W    ??inv_icm20948_poll_sensor_14
   \   00000312   0xA809             ADD      R0,SP,#+36
   \   00000314   0x.... 0x....      BL       inv_icm20948_dmp_get_accel
   \   00000318   0x212A             MOVS     R1,#+42
   \   0000031A   0x4620             MOV      R0,R4
   \   0000031C   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   00000320   0x2800             CMP      R0,#+0
   \   00000322   0xD02B             BEQ.N    ??inv_icm20948_poll_sensor_15
   \   00000324   0x212A             MOVS     R1,#+42
   \   00000326   0x4620             MOV      R0,R4
   \   00000328   0x.... 0x....      BL       skip_sensor
   \   0000032C   0x2800             CMP      R0,#+0
   \   0000032E   0xD125             BNE.N    ??inv_icm20948_poll_sensor_15
   \   00000330   0xAA14             ADD      R2,SP,#+80
   \   00000332   0xA909             ADD      R1,SP,#+36
   \   00000334   0xF104 0x00A8      ADD      R0,R4,#+168
   \   00000338   0x.... 0x....      BL       inv_icm20948_convert_quat_rotate_fxp
   \   0000033C   0x9814             LDR      R0,[SP, #+80]
   \   0000033E   0x13C0             ASRS     R0,R0,#+15
   \   00000340   0x9014             STR      R0,[SP, #+80]
   \   00000342   0xA814             ADD      R0,SP,#+80
   \   00000344   0x6841             LDR      R1,[R0, #+4]
   \   00000346   0x13C9             ASRS     R1,R1,#+15
   \   00000348   0x6041             STR      R1,[R0, #+4]
   \   0000034A   0x6881             LDR      R1,[R0, #+8]
   \   0000034C   0x13C9             ASRS     R1,R1,#+15
   \   0000034E   0x6081             STR      R1,[R0, #+8]
   \   00000350   0xF44F 0x7052      MOV      R0,#+840
   \   00000354   0xEB04 0x0C00      ADD      R12,R4,R0
   \   00000358   0xF44F 0x7032      MOV      R0,#+712
   \   0000035C   0x1827             ADDS     R7,R4,R0
   \   0000035E   0xE9D7 0x0104      LDRD     R0,R1,[R7, #+16]
   \   00000362   0xE9DC 0x2318      LDRD     R2,R3,[R12, #+96]
   \   00000366   0x1882             ADDS     R2,R0,R2
   \   00000368   0x414B             ADCS     R3,R1,R3
   \   0000036A   0xE9C7 0x2304      STRD     R2,R3,[R7, #+16]
   \   0000036E   0xA80E             ADD      R0,SP,#+56
   \   00000370   0x9001             STR      R0,[SP, #+4]
   \   00000372   0xA814             ADD      R0,SP,#+80
   \   00000374   0x9000             STR      R0,[SP, #+0]
   \   00000376   0x2102             MOVS     R1,#+2
   \   00000378   0x4628             MOV      R0,R5
   \   0000037A   0x47B0             BLX      R6
   \                     ??inv_icm20948_poll_sensor_15: (+1)
   \   0000037C   0x2101             MOVS     R1,#+1
   \   0000037E   0x4620             MOV      R0,R4
   \   00000380   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   00000384   0x2800             CMP      R0,#+0
   \   00000386   0xD005             BEQ.N    ??inv_icm20948_poll_sensor_16
   \   00000388   0x2101             MOVS     R1,#+1
   \   0000038A   0x4620             MOV      R0,R4
   \   0000038C   0x.... 0x....      BL       skip_sensor
   \   00000390   0x2800             CMP      R0,#+0
   \   00000392   0xD005             BEQ.N    ??inv_icm20948_poll_sensor_17
   \                     ??inv_icm20948_poll_sensor_16: (+1)
   \   00000394   0x210A             MOVS     R1,#+10
   \   00000396   0x4620             MOV      R0,R4
   \   00000398   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   0000039C   0x2800             CMP      R0,#+0
   \   0000039E   0xD03C             BEQ.N    ??inv_icm20948_poll_sensor_14
   \                     ??inv_icm20948_poll_sensor_17: (+1)
   \   000003A0   0x.... 0x....      BL       inv_icm20948_get_accel_accuracy
   \   000003A4   0x9007             STR      R0,[SP, #+28]
   \   000003A6   0x2701             MOVS     R7,#+1
   \   000003A8   0x4620             MOV      R0,R4
   \   000003AA   0x.... 0x....      BL       inv_icm20948_get_accel_fullscale
   \   000003AE   0xFA07 0xF000      LSL      R0,R7,R0
   \   000003B2   0xEE00 0x0A10      VMOV     S0,R0
   \   000003B6   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000003BA   0xEEF0 0x0A00      VMOV.F32 S1,#2.0
   \   000003BE   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000003C2   0xEDDF 0x0AB8      VLDR.W   S1,??inv_icm20948_poll_sensor_18  ;; 0x30800000
   \   000003C6   0xE005             B.N      ??inv_icm20948_poll_sensor_19
   \                     ??inv_icm20948_poll_sensor_9:
   \   000003C8   0x437A0000         DC32     0x437a0000
   \   000003CC   0x38000000         DC32     0x38000000
   \   000003D0   0x35800000         DC32     0x35800000
   \                     ??inv_icm20948_poll_sensor_19: (+1)
   \   000003D4   0xEE20 0x0A20      VMUL.F32 S0,S0,S1
   \   000003D8   0xAA17             ADD      R2,SP,#+92
   \   000003DA   0xA909             ADD      R1,SP,#+36
   \   000003DC   0x4620             MOV      R0,R4
   \   000003DE   0x.... 0x....      BL       inv_icm20948_convert_dmp3_to_body
   \   000003E2   0x4639             MOV      R1,R7
   \   000003E4   0x4620             MOV      R0,R4
   \   000003E6   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   000003EA   0x2800             CMP      R0,#+0
   \   000003EC   0xD015             BEQ.N    ??inv_icm20948_poll_sensor_14
   \   000003EE   0xF44F 0x7052      MOV      R0,#+840
   \   000003F2   0xEB04 0x0C00      ADD      R12,R4,R0
   \   000003F6   0xF44F 0x7032      MOV      R0,#+712
   \   000003FA   0x1827             ADDS     R7,R4,R0
   \   000003FC   0xE9D7 0x0100      LDRD     R0,R1,[R7, #+0]
   \   00000400   0xE9DC 0x2310      LDRD     R2,R3,[R12, #+64]
   \   00000404   0x1882             ADDS     R2,R0,R2
   \   00000406   0x414B             ADCS     R3,R1,R3
   \   00000408   0xE9C7 0x2300      STRD     R2,R3,[R7, #+0]
   \   0000040C   0xA807             ADD      R0,SP,#+28
   \   0000040E   0x9001             STR      R0,[SP, #+4]
   \   00000410   0xA817             ADD      R0,SP,#+92
   \   00000412   0x9000             STR      R0,[SP, #+0]
   \   00000414   0x2100             MOVS     R1,#+0
   \   00000416   0x4628             MOV      R0,R5
   \   00000418   0x47B0             BLX      R6
   \                     ??inv_icm20948_poll_sensor_14: (+1)
   \   0000041A   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000041E   0x0680             LSLS     R0,R0,#+26
   \   00000420   0xD52D             BPL.N    ??inv_icm20948_poll_sensor_20
   \   00000422   0xA809             ADD      R0,SP,#+36
   \   00000424   0x.... 0x....      BL       inv_icm20948_dmp_get_calibrated_compass
   \   00000428   0x.... 0x....      BL       inv_icm20948_get_mag_accuracy
   \   0000042C   0x9006             STR      R0,[SP, #+24]
   \   0000042E   0xAA32             ADD      R2,SP,#+200
   \   00000430   0xED9F 0x0A9D      VLDR.W   S0,??inv_icm20948_poll_sensor_18+0x4  ;; 0x37800000
   \   00000434   0xA909             ADD      R1,SP,#+36
   \   00000436   0x4620             MOV      R0,R4
   \   00000438   0x.... 0x....      BL       inv_icm20948_convert_dmp3_to_body
   \   0000043C   0x2102             MOVS     R1,#+2
   \   0000043E   0x4620             MOV      R0,R4
   \   00000440   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   00000444   0x2800             CMP      R0,#+0
   \   00000446   0xD01A             BEQ.N    ??inv_icm20948_poll_sensor_20
   \   00000448   0x2102             MOVS     R1,#+2
   \   0000044A   0x4620             MOV      R0,R4
   \   0000044C   0x.... 0x....      BL       skip_sensor
   \   00000450   0x2800             CMP      R0,#+0
   \   00000452   0xD114             BNE.N    ??inv_icm20948_poll_sensor_20
   \   00000454   0xF44F 0x6089      MOV      R0,#+1096
   \   00000458   0x4420             ADD      R0,R4,R0
   \   0000045A   0xF44F 0x7132      MOV      R1,#+712
   \   0000045E   0x1867             ADDS     R7,R4,R1
   \   00000460   0xE9D7 0x2318      LDRD     R2,R3,[R7, #+96]
   \   00000464   0xE9D0 0x0100      LDRD     R0,R1,[R0, #+0]
   \   00000468   0x1812             ADDS     R2,R2,R0
   \   0000046A   0x414B             ADCS     R3,R3,R1
   \   0000046C   0xE9C7 0x2318      STRD     R2,R3,[R7, #+96]
   \   00000470   0xA806             ADD      R0,SP,#+24
   \   00000472   0x9001             STR      R0,[SP, #+4]
   \   00000474   0xA832             ADD      R0,SP,#+200
   \   00000476   0x9000             STR      R0,[SP, #+0]
   \   00000478   0x210C             MOVS     R1,#+12
   \   0000047A   0x4628             MOV      R0,R5
   \   0000047C   0x47B0             BLX      R6
   \                     ??inv_icm20948_poll_sensor_20: (+1)
   \   0000047E   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000482   0x0480             LSLS     R0,R0,#+18
   \   00000484   0xD55F             BPL.N    ??inv_icm20948_poll_sensor_21
   \   00000486   0xA809             ADD      R0,SP,#+36
   \   00000488   0x.... 0x....      BL       inv_icm20948_dmp_get_raw_compass
   \   0000048C   0xED9F 0x8A86      VLDR.W   S16,??inv_icm20948_poll_sensor_18+0x4  ;; 0x37800000
   \   00000490   0xED9D 0x0A09      VLDR     S0,[SP, #+36]
   \   00000494   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000498   0xEE60 0x8A08      VMUL.F32 S17,S0,S16
   \   0000049C   0xA809             ADD      R0,SP,#+36
   \   0000049E   0xED90 0x0A01      VLDR     S0,[R0, #+4]
   \   000004A2   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000004A6   0xEE20 0x9A08      VMUL.F32 S18,S0,S16
   \   000004AA   0xED90 0x0A02      VLDR     S0,[R0, #+8]
   \   000004AE   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000004B2   0xEE60 0x9A08      VMUL.F32 S19,S0,S16
   \   000004B6   0x210E             MOVS     R1,#+14
   \   000004B8   0x4620             MOV      R0,R4
   \   000004BA   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   000004BE   0x2800             CMP      R0,#+0
   \   000004C0   0xD041             BEQ.N    ??inv_icm20948_poll_sensor_21
   \   000004C2   0x210E             MOVS     R1,#+14
   \   000004C4   0x4620             MOV      R0,R4
   \   000004C6   0x.... 0x....      BL       skip_sensor
   \   000004CA   0x2800             CMP      R0,#+0
   \   000004CC   0xD13B             BNE.N    ??inv_icm20948_poll_sensor_21
   \   000004CE   0xEDCD 0x8A20      VSTR     S17,[SP, #+128]
   \   000004D2   0xAF20             ADD      R7,SP,#+128
   \   000004D4   0xED87 0x9A01      VSTR     S18,[R7, #+4]
   \   000004D8   0xEDC7 0x9A02      VSTR     S19,[R7, #+8]
   \   000004DC   0xA914             ADD      R1,SP,#+80
   \   000004DE   0x4620             MOV      R0,R4
   \   000004E0   0x.... 0x....      BL       inv_icm20948_ctrl_get_mag_bias
   \   000004E4   0xED9D 0x0A14      VLDR     S0,[SP, #+80]
   \   000004E8   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000004EC   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   000004F0   0xED87 0x0A03      VSTR     S0,[R7, #+12]
   \   000004F4   0xA814             ADD      R0,SP,#+80
   \   000004F6   0xED90 0x0A01      VLDR     S0,[R0, #+4]
   \   000004FA   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000004FE   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   00000502   0xED87 0x0A04      VSTR     S0,[R7, #+16]
   \   00000506   0xED90 0x0A02      VLDR     S0,[R0, #+8]
   \   0000050A   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000050E   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   00000512   0xED87 0x0A05      VSTR     S0,[R7, #+20]
   \   00000516   0x.... 0x....      BL       inv_icm20948_get_mag_accuracy
   \   0000051A   0x9006             STR      R0,[SP, #+24]
   \   0000051C   0xF44F 0x7072      MOV      R0,#+968
   \   00000520   0x4420             ADD      R0,R4,R0
   \   00000522   0xF44F 0x7132      MOV      R1,#+712
   \   00000526   0x1867             ADDS     R7,R4,R1
   \   00000528   0xE9D7 0x2308      LDRD     R2,R3,[R7, #+32]
   \   0000052C   0xE9D0 0x0100      LDRD     R0,R1,[R0, #+0]
   \   00000530   0x1812             ADDS     R2,R2,R0
   \   00000532   0x414B             ADCS     R3,R3,R1
   \   00000534   0xE9C7 0x2308      STRD     R2,R3,[R7, #+32]
   \   00000538   0xA806             ADD      R0,SP,#+24
   \   0000053A   0x9001             STR      R0,[SP, #+4]
   \   0000053C   0xA820             ADD      R0,SP,#+128
   \   0000053E   0x9000             STR      R0,[SP, #+0]
   \   00000540   0x2104             MOVS     R1,#+4
   \   00000542   0x4628             MOV      R0,R5
   \   00000544   0x47B0             BLX      R6
   \                     ??inv_icm20948_poll_sensor_21: (+1)
   \   00000546   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000054A   0x0500             LSLS     R0,R0,#+20
   \   0000054C   0xF140 0x810A      BPL.W    ??inv_icm20948_poll_sensor_22
   \   00000550   0xA80F             ADD      R0,SP,#+60
   \   00000552   0x.... 0x....      BL       inv_icm20948_dmp_get_6quaternion
   \   00000556   0x210F             MOVS     R1,#+15
   \   00000558   0x4620             MOV      R0,R4
   \   0000055A   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   0000055E   0x2800             CMP      R0,#+0
   \   00000560   0xD029             BEQ.N    ??inv_icm20948_poll_sensor_23
   \   00000562   0x210F             MOVS     R1,#+15
   \   00000564   0x4620             MOV      R0,R4
   \   00000566   0x.... 0x....      BL       skip_sensor
   \   0000056A   0x2800             CMP      R0,#+0
   \   0000056C   0xD123             BNE.N    ??inv_icm20948_poll_sensor_23
   \   0000056E   0xAA38             ADD      R2,SP,#+224
   \   00000570   0xA90F             ADD      R1,SP,#+60
   \   00000572   0x4620             MOV      R0,R4
   \   00000574   0x.... 0x....      BL       inv_icm20948_convert_rotation_vector
   \   00000578   0xA838             ADD      R0,SP,#+224
   \   0000057A   0x68C1             LDR      R1,[R0, #+12]
   \   0000057C   0x9126             STR      R1,[SP, #+152]
   \   0000057E   0xA926             ADD      R1,SP,#+152
   \   00000580   0x9A38             LDR      R2,[SP, #+224]
   \   00000582   0x604A             STR      R2,[R1, #+4]
   \   00000584   0x6842             LDR      R2,[R0, #+4]
   \   00000586   0x608A             STR      R2,[R1, #+8]
   \   00000588   0x6880             LDR      R0,[R0, #+8]
   \   0000058A   0x60C8             STR      R0,[R1, #+12]
   \   0000058C   0xF44F 0x7072      MOV      R0,#+968
   \   00000590   0x4420             ADD      R0,R4,R0
   \   00000592   0xF44F 0x7132      MOV      R1,#+712
   \   00000596   0x1867             ADDS     R7,R4,R1
   \   00000598   0xE9D7 0x2312      LDRD     R2,R3,[R7, #+72]
   \   0000059C   0xE9D0 0x0114      LDRD     R0,R1,[R0, #+80]
   \   000005A0   0x1812             ADDS     R2,R2,R0
   \   000005A2   0x414B             ADCS     R3,R3,R1
   \   000005A4   0xE9C7 0x2312      STRD     R2,R3,[R7, #+72]
   \   000005A8   0x2000             MOVS     R0,#+0
   \   000005AA   0x9001             STR      R0,[SP, #+4]
   \   000005AC   0xA826             ADD      R0,SP,#+152
   \   000005AE   0x9000             STR      R0,[SP, #+0]
   \   000005B0   0x2109             MOVS     R1,#+9
   \   000005B2   0x4628             MOV      R0,R5
   \   000005B4   0x47B0             BLX      R6
   \                     ??inv_icm20948_poll_sensor_23: (+1)
   \   000005B6   0xAA0F             ADD      R2,SP,#+60
   \   000005B8   0xA914             ADD      R1,SP,#+80
   \   000005BA   0x4620             MOV      R0,R4
   \   000005BC   0x.... 0x....      BL       inv_icm20948_augmented_sensors_get_gravity
   \   000005C0   0x2109             MOVS     R1,#+9
   \   000005C2   0x4620             MOV      R0,R4
   \   000005C4   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   000005C8   0x2800             CMP      R0,#+0
   \   000005CA   0xD037             BEQ.N    ??inv_icm20948_poll_sensor_24
   \   000005CC   0x2109             MOVS     R1,#+9
   \   000005CE   0x4620             MOV      R0,R4
   \   000005D0   0x.... 0x....      BL       skip_sensor
   \   000005D4   0x2800             CMP      R0,#+0
   \   000005D6   0xD131             BNE.N    ??inv_icm20948_poll_sensor_24
   \   000005D8   0xED9F 0x8A33      VLDR.W   S16,??inv_icm20948_poll_sensor_18+0x4  ;; 0x37800000
   \   000005DC   0xED9D 0x0A14      VLDR     S0,[SP, #+80]
   \   000005E0   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000005E4   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   000005E8   0xED8D 0x0A1A      VSTR     S0,[SP, #+104]
   \   000005EC   0xA81A             ADD      R0,SP,#+104
   \   000005EE   0xA914             ADD      R1,SP,#+80
   \   000005F0   0xED91 0x0A01      VLDR     S0,[R1, #+4]
   \   000005F4   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   000005F8   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   000005FC   0xED80 0x0A01      VSTR     S0,[R0, #+4]
   \   00000600   0xED91 0x0A02      VLDR     S0,[R1, #+8]
   \   00000604   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000608   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   0000060C   0xED80 0x0A02      VSTR     S0,[R0, #+8]
   \   00000610   0xF44F 0x7052      MOV      R0,#+840
   \   00000614   0xEB04 0x0C00      ADD      R12,R4,R0
   \   00000618   0xF44F 0x6089      MOV      R0,#+1096
   \   0000061C   0x4420             ADD      R0,R4,R0
   \   0000061E   0xE9DC 0x2300      LDRD     R2,R3,[R12, #+0]
   \   00000622   0xE9D0 0x0110      LDRD     R0,R1,[R0, #+64]
   \   00000626   0x1812             ADDS     R2,R2,R0
   \   00000628   0x414B             ADCS     R3,R3,R1
   \   0000062A   0xE9CC 0x2300      STRD     R2,R3,[R12, #+0]
   \   0000062E   0xA807             ADD      R0,SP,#+28
   \   00000630   0x9001             STR      R0,[SP, #+4]
   \   00000632   0xA81A             ADD      R0,SP,#+104
   \   00000634   0x9000             STR      R0,[SP, #+0]
   \   00000636   0x2110             MOVS     R1,#+16
   \   00000638   0x4628             MOV      R0,R5
   \   0000063A   0x47B0             BLX      R6
   \                     ??inv_icm20948_poll_sensor_24: (+1)
   \   0000063C   0x210A             MOVS     R1,#+10
   \   0000063E   0x4620             MOV      R0,R4
   \   00000640   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   00000644   0x2800             CMP      R0,#+0
   \   00000646   0xF000 0x808D      BEQ.W    ??inv_icm20948_poll_sensor_22
   \   0000064A   0x210A             MOVS     R1,#+10
   \   0000064C   0x4620             MOV      R0,R4
   \   0000064E   0x.... 0x....      BL       skip_sensor
   \   00000652   0x2800             CMP      R0,#+0
   \   00000654   0xF040 0x8086      BNE.W    ??inv_icm20948_poll_sensor_22
   \   00000658   0xED9D 0x0A17      VLDR     S0,[SP, #+92]
   \   0000065C   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   00000660   0xEEF1 0xFA10      FMSTAT   
   \   00000664   0xDB01             BLT.N    ??inv_icm20948_poll_sensor_25
   \   00000666   0x2001             MOVS     R0,#+1
   \   00000668   0xE000             B.N      ??inv_icm20948_poll_sensor_26
   \                     ??inv_icm20948_poll_sensor_25: (+1)
   \   0000066A   0x2000             MOVS     R0,#+0
   \                     ??inv_icm20948_poll_sensor_26: (+1)
   \   0000066C   0xED9F 0x0A0F      VLDR.W   S0,??inv_icm20948_poll_sensor_18+0x8  ;; 0x47800000
   \   00000670   0xEDDD 0x0A17      VLDR     S1,[SP, #+92]
   \   00000674   0xEE01 0x0A10      VMOV     S2,R0
   \   00000678   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   0000067C   0xEEFE 0x1A00      VMOV.F32 S3,#-0.5
   \   00000680   0xEE31 0x1A21      VADD.F32 S2,S2,S3
   \   00000684   0xEE00 0x1A80      VMLA.F32 S2,S1,S0
   \   00000688   0xEEFD 0x0AC1      VCVT.S32.F32 S1,S2
   \   0000068C   0xEDCD 0x0A1A      VSTR     S1,[SP, #+104]
   \   00000690   0xA817             ADD      R0,SP,#+92
   \   00000692   0xEDD0 0x0A01      VLDR     S1,[R0, #+4]
   \   00000696   0xEEF5 0x0A40      VCMP.F32 S1,#0.0
   \   0000069A   0xEEF1 0xFA10      FMSTAT   
   \   0000069E   0xDB07             BLT.N    ??inv_icm20948_poll_sensor_27
   \   000006A0   0x2101             MOVS     R1,#+1
   \   000006A2   0xE006             B.N      ??inv_icm20948_poll_sensor_28
   \                     ??inv_icm20948_poll_sensor_18:
   \   000006A4   0x30800000         DC32     0x30800000
   \   000006A8   0x37800000         DC32     0x37800000
   \   000006AC   0x47800000         DC32     0x47800000
   \                     ??inv_icm20948_poll_sensor_27: (+1)
   \   000006B0   0x2100             MOVS     R1,#+0
   \                     ??inv_icm20948_poll_sensor_28: (+1)
   \   000006B2   0xAA1A             ADD      R2,SP,#+104
   \   000006B4   0xEE01 0x1A10      VMOV     S2,R1
   \   000006B8   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   000006BC   0xEE31 0x1A21      VADD.F32 S2,S2,S3
   \   000006C0   0xEE00 0x1A80      VMLA.F32 S2,S1,S0
   \   000006C4   0xEEFD 0x0AC1      VCVT.S32.F32 S1,S2
   \   000006C8   0xEDC2 0x0A01      VSTR     S1,[R2, #+4]
   \   000006CC   0xEDD0 0x0A02      VLDR     S1,[R0, #+8]
   \   000006D0   0xEEF5 0x0A40      VCMP.F32 S1,#0.0
   \   000006D4   0xEEF1 0xFA10      FMSTAT   
   \   000006D8   0xDB01             BLT.N    ??inv_icm20948_poll_sensor_29
   \   000006DA   0x2001             MOVS     R0,#+1
   \   000006DC   0xE000             B.N      ??inv_icm20948_poll_sensor_30
   \                     ??inv_icm20948_poll_sensor_29: (+1)
   \   000006DE   0x2000             MOVS     R0,#+0
   \                     ??inv_icm20948_poll_sensor_30: (+1)
   \   000006E0   0xEE01 0x0A10      VMOV     S2,R0
   \   000006E4   0xEEB8 0x1A41      VCVT.F32.U32 S2,S2
   \   000006E8   0xEE31 0x1A21      VADD.F32 S2,S2,S3
   \   000006EC   0xEE00 0x1A80      VMLA.F32 S2,S1,S0
   \   000006F0   0xEEBD 0x0AC1      VCVT.S32.F32 S0,S2
   \   000006F4   0xED82 0x0A02      VSTR     S0,[R2, #+8]
   \   000006F8   0xA914             ADD      R1,SP,#+80
   \   000006FA   0xA820             ADD      R0,SP,#+128
   \   000006FC   0x.... 0x....      BL       inv_icm20948_augmented_sensors_get_linearacceleration
   \   00000700   0xED9F 0x....      VLDR.W   S16,??DataTable11  ;; 0x37800000
   \   00000704   0xED9D 0x0A20      VLDR     S0,[SP, #+128]
   \   00000708   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000070C   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   00000710   0xED8D 0x0A23      VSTR     S0,[SP, #+140]
   \   00000714   0xA820             ADD      R0,SP,#+128
   \   00000716   0xA923             ADD      R1,SP,#+140
   \   00000718   0xED90 0x0A01      VLDR     S0,[R0, #+4]
   \   0000071C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000720   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   00000724   0xED81 0x0A01      VSTR     S0,[R1, #+4]
   \   00000728   0xED90 0x0A02      VLDR     S0,[R0, #+8]
   \   0000072C   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000730   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   00000734   0xED81 0x0A02      VSTR     S0,[R1, #+8]
   \   00000738   0xF44F 0x7052      MOV      R0,#+840
   \   0000073C   0xEB04 0x0C00      ADD      R12,R4,R0
   \   00000740   0xF44F 0x6089      MOV      R0,#+1096
   \   00000744   0x4420             ADD      R0,R4,R0
   \   00000746   0xE9DC 0x2302      LDRD     R2,R3,[R12, #+8]
   \   0000074A   0xE9D0 0x0114      LDRD     R0,R1,[R0, #+80]
   \   0000074E   0x1812             ADDS     R2,R2,R0
   \   00000750   0x414B             ADCS     R3,R3,R1
   \   00000752   0xE9CC 0x2302      STRD     R2,R3,[R12, #+8]
   \   00000756   0xA807             ADD      R0,SP,#+28
   \   00000758   0x9001             STR      R0,[SP, #+4]
   \   0000075A   0xA823             ADD      R0,SP,#+140
   \   0000075C   0x9000             STR      R0,[SP, #+0]
   \   0000075E   0x2111             MOVS     R1,#+17
   \   00000760   0x4628             MOV      R0,R5
   \   00000762   0x47B0             BLX      R6
   \                     ??inv_icm20948_poll_sensor_22: (+1)
   \   00000764   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   00000768   0x0540             LSLS     R0,R0,#+21
   \   0000076A   0xD57C             BPL.N    ??inv_icm20948_poll_sensor_31
   \   0000076C   0xA80F             ADD      R0,SP,#+60
   \   0000076E   0x.... 0x....      BL       inv_icm20948_dmp_get_9quaternion
   \   00000772   0x210B             MOVS     R1,#+11
   \   00000774   0x4620             MOV      R0,R4
   \   00000776   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   0000077A   0x2800             CMP      R0,#+0
   \   0000077C   0xD031             BEQ.N    ??inv_icm20948_poll_sensor_32
   \   0000077E   0x210B             MOVS     R1,#+11
   \   00000780   0x4620             MOV      R0,R4
   \   00000782   0x.... 0x....      BL       skip_sensor
   \   00000786   0x2800             CMP      R0,#+0
   \   00000788   0xD12B             BNE.N    ??inv_icm20948_poll_sensor_32
   \   0000078A   0xAA2E             ADD      R2,SP,#+184
   \   0000078C   0xA90F             ADD      R1,SP,#+60
   \   0000078E   0x4620             MOV      R0,R4
   \   00000790   0x.... 0x....      BL       inv_icm20948_convert_rotation_vector
   \   00000794   0x.... 0x....      BL       inv_icm20948_get_rv_accuracy
   \   00000798   0xEE00 0x0A10      VMOV     S0,R0
   \   0000079C   0xEEBA 0x0AE1      VCVT.F32.S32 S0,S0,#+29
   \   000007A0   0xED8D 0x0A0D      VSTR     S0,[SP, #+52]
   \   000007A4   0xA82E             ADD      R0,SP,#+184
   \   000007A6   0x68C1             LDR      R1,[R0, #+12]
   \   000007A8   0x9120             STR      R1,[SP, #+128]
   \   000007AA   0xA920             ADD      R1,SP,#+128
   \   000007AC   0x9A2E             LDR      R2,[SP, #+184]
   \   000007AE   0x604A             STR      R2,[R1, #+4]
   \   000007B0   0x6842             LDR      R2,[R0, #+4]
   \   000007B2   0x608A             STR      R2,[R1, #+8]
   \   000007B4   0x6880             LDR      R0,[R0, #+8]
   \   000007B6   0x60C8             STR      R0,[R1, #+12]
   \   000007B8   0xF44F 0x7072      MOV      R0,#+968
   \   000007BC   0x4420             ADD      R0,R4,R0
   \   000007BE   0xF44F 0x7132      MOV      R1,#+712
   \   000007C2   0x1867             ADDS     R7,R4,R1
   \   000007C4   0xE9D7 0x2314      LDRD     R2,R3,[R7, #+80]
   \   000007C8   0xE9D0 0x0118      LDRD     R0,R1,[R0, #+96]
   \   000007CC   0x1812             ADDS     R2,R2,R0
   \   000007CE   0x414B             ADCS     R3,R3,R1
   \   000007D0   0xE9C7 0x2314      STRD     R2,R3,[R7, #+80]
   \   000007D4   0xA80D             ADD      R0,SP,#+52
   \   000007D6   0x9001             STR      R0,[SP, #+4]
   \   000007D8   0xA820             ADD      R0,SP,#+128
   \   000007DA   0x9000             STR      R0,[SP, #+0]
   \   000007DC   0x210A             MOVS     R1,#+10
   \   000007DE   0x4628             MOV      R0,R5
   \   000007E0   0x47B0             BLX      R6
   \                     ??inv_icm20948_poll_sensor_32: (+1)
   \   000007E2   0x2103             MOVS     R1,#+3
   \   000007E4   0x4620             MOV      R0,R4
   \   000007E6   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   000007EA   0x2800             CMP      R0,#+0
   \   000007EC   0xD03B             BEQ.N    ??inv_icm20948_poll_sensor_31
   \   000007EE   0x2103             MOVS     R1,#+3
   \   000007F0   0x4620             MOV      R0,R4
   \   000007F2   0x.... 0x....      BL       skip_sensor
   \   000007F6   0x2800             CMP      R0,#+0
   \   000007F8   0xD135             BNE.N    ??inv_icm20948_poll_sensor_31
   \   000007FA   0xA90F             ADD      R1,SP,#+60
   \   000007FC   0xA81A             ADD      R0,SP,#+104
   \   000007FE   0x.... 0x....      BL       inv_icm20948_augmented_sensors_get_orientation
   \   00000802   0xED9F 0x....      VLDR.W   S16,??DataTable11  ;; 0x37800000
   \   00000806   0xED9D 0x0A1A      VLDR     S0,[SP, #+104]
   \   0000080A   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   0000080E   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   00000812   0xED8D 0x0A14      VSTR     S0,[SP, #+80]
   \   00000816   0xA814             ADD      R0,SP,#+80
   \   00000818   0xA91A             ADD      R1,SP,#+104
   \   0000081A   0xED91 0x0A01      VLDR     S0,[R1, #+4]
   \   0000081E   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000822   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   00000826   0xED80 0x0A01      VSTR     S0,[R0, #+4]
   \   0000082A   0xED91 0x0A02      VLDR     S0,[R1, #+8]
   \   0000082E   0xEEB8 0x0AC0      VCVT.F32.S32 S0,S0
   \   00000832   0xEE20 0x0A08      VMUL.F32 S0,S0,S16
   \   00000836   0xED80 0x0A02      VSTR     S0,[R0, #+8]
   \   0000083A   0xF44F 0x7052      MOV      R0,#+840
   \   0000083E   0xEB04 0x0C00      ADD      R12,R4,R0
   \   00000842   0xF44F 0x6089      MOV      R0,#+1096
   \   00000846   0x4420             ADD      R0,R4,R0
   \   00000848   0xE9DC 0x2304      LDRD     R2,R3,[R12, #+16]
   \   0000084C   0xE9D0 0x0118      LDRD     R0,R1,[R0, #+96]
   \   00000850   0x1812             ADDS     R2,R2,R0
   \   00000852   0x414B             ADCS     R3,R3,R1
   \   00000854   0xE9CC 0x2304      STRD     R2,R3,[R12, #+16]
   \   00000858   0x2000             MOVS     R0,#+0
   \   0000085A   0x9001             STR      R0,[SP, #+4]
   \   0000085C   0xA814             ADD      R0,SP,#+80
   \   0000085E   0x9000             STR      R0,[SP, #+0]
   \   00000860   0x2112             MOVS     R1,#+18
   \   00000862   0x4628             MOV      R0,R5
   \   00000864   0x47B0             BLX      R6
   \                     ??inv_icm20948_poll_sensor_31: (+1)
   \   00000866   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000086A   0x05C0             LSLS     R0,R0,#+23
   \   0000086C   0xD53A             BPL.N    ??inv_icm20948_poll_sensor_33
   \   0000086E   0xA80F             ADD      R0,SP,#+60
   \   00000870   0x.... 0x....      BL       inv_icm20948_dmp_get_gmrvquaternion
   \   00000874   0x2114             MOVS     R1,#+20
   \   00000876   0x4620             MOV      R0,R4
   \   00000878   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   0000087C   0x2800             CMP      R0,#+0
   \   0000087E   0xD031             BEQ.N    ??inv_icm20948_poll_sensor_33
   \   00000880   0x2114             MOVS     R1,#+20
   \   00000882   0x4620             MOV      R0,R4
   \   00000884   0x.... 0x....      BL       skip_sensor
   \   00000888   0x2800             CMP      R0,#+0
   \   0000088A   0xD12B             BNE.N    ??inv_icm20948_poll_sensor_33
   \   0000088C   0xAA2A             ADD      R2,SP,#+168
   \   0000088E   0xA90F             ADD      R1,SP,#+60
   \   00000890   0x4620             MOV      R0,R4
   \   00000892   0x.... 0x....      BL       inv_icm20948_convert_rotation_vector
   \   00000896   0x.... 0x....      BL       inv_icm20948_get_gmrv_accuracy
   \   0000089A   0xEE00 0x0A10      VMOV     S0,R0
   \   0000089E   0xEEBA 0x0AE1      VCVT.F32.S32 S0,S0,#+29
   \   000008A2   0xED8D 0x0A0C      VSTR     S0,[SP, #+48]
   \   000008A6   0xA82A             ADD      R0,SP,#+168
   \   000008A8   0x68C1             LDR      R1,[R0, #+12]
   \   000008AA   0x911A             STR      R1,[SP, #+104]
   \   000008AC   0xA91A             ADD      R1,SP,#+104
   \   000008AE   0x9A2A             LDR      R2,[SP, #+168]
   \   000008B0   0x604A             STR      R2,[R1, #+4]
   \   000008B2   0x6842             LDR      R2,[R0, #+4]
   \   000008B4   0x608A             STR      R2,[R1, #+8]
   \   000008B6   0x6880             LDR      R0,[R0, #+8]
   \   000008B8   0x60C8             STR      R0,[R1, #+12]
   \   000008BA   0xF44F 0x7072      MOV      R0,#+968
   \   000008BE   0x4420             ADD      R0,R4,R0
   \   000008C0   0xF44F 0x7132      MOV      R1,#+712
   \   000008C4   0x1867             ADDS     R7,R4,R1
   \   000008C6   0xE9D7 0x2316      LDRD     R2,R3,[R7, #+88]
   \   000008CA   0xE9D0 0x011C      LDRD     R0,R1,[R0, #+112]
   \   000008CE   0x1812             ADDS     R2,R2,R0
   \   000008D0   0x414B             ADCS     R3,R3,R1
   \   000008D2   0xE9C7 0x2316      STRD     R2,R3,[R7, #+88]
   \   000008D6   0xA80C             ADD      R0,SP,#+48
   \   000008D8   0x9001             STR      R0,[SP, #+4]
   \   000008DA   0xA81A             ADD      R0,SP,#+104
   \   000008DC   0x9000             STR      R0,[SP, #+0]
   \   000008DE   0x210B             MOVS     R1,#+11
   \   000008E0   0x4628             MOV      R0,R5
   \   000008E2   0x47B0             BLX      R6
   \                     ??inv_icm20948_poll_sensor_33: (+1)
   \   000008E4   0xF8BD 0x0010      LDRH     R0,[SP, #+16]
   \   000008E8   0x0600             LSLS     R0,R0,#+24
   \   000008EA   0xF57F 0xABC9      BPL.W    ??inv_icm20948_poll_sensor_4
   \   000008EE   0x2000             MOVS     R0,#+0
   \   000008F0   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   \   000008F4   0x9014             STR      R0,[SP, #+80]
   \   000008F6   0x9005             STR      R0,[SP, #+20]
   \   000008F8   0xA81A             ADD      R0,SP,#+104
   \   000008FA   0x.... 0x....      ADR.W    R1,?_6
   \   000008FE   0xC98C             LDM      R1!,{R2,R3,R7}
   \   00000900   0xC08C             STM      R0!,{R2,R3,R7}
   \   00000902   0x2700             MOVS     R7,#+0
   \   00000904   0xA803             ADD      R0,SP,#+12
   \   00000906   0x.... 0x....      BL       inv_icm20948_dmp_get_bac_state
   \   0000090A   0xA814             ADD      R0,SP,#+80
   \   0000090C   0x.... 0x....      BL       inv_icm20948_dmp_get_bac_ts
   \   00000910   0xF10D 0x0868      ADD      R8,SP,#+104
   \   00000914   0xE01A             B.N      ??inv_icm20948_poll_sensor_34
   \                     ??inv_icm20948_poll_sensor_35: (+1)
   \   00000916   0x4208             TST      R0,R1
   \   00000918   0xD017             BEQ.N    ??inv_icm20948_poll_sensor_36
   \   0000091A   0x4620             MOV      R0,R4
   \   0000091C   0x.... 0x....      BL       inv_icm20948_ctrl_get_activitiy_classifier_on_flag
   \   00000920   0x2800             CMP      R0,#+0
   \   00000922   0xD012             BEQ.N    ??inv_icm20948_poll_sensor_36
   \   00000924   0xA81A             ADD      R0,SP,#+104
   \   00000926   0xEB00 0x0047      ADD      R0,R0,R7, LSL #+1
   \   0000092A   0xF990 0x0001      LDRSB    R0,[R0, #+1]
   \   0000092E   0x4240             RSBS     R0,R0,#+0
   \   00000930   0x9005             STR      R0,[SP, #+20]
   \   00000932   0x2000             MOVS     R0,#+0
   \   00000934   0x9001             STR      R0,[SP, #+4]
   \   00000936   0xA805             ADD      R0,SP,#+20
   \   00000938   0x9000             STR      R0,[SP, #+0]
   \   0000093A   0xF44F 0x7032      MOV      R0,#+712
   \   0000093E   0x4420             ADD      R0,R4,R0
   \   00000940   0xE9D0 0x230C      LDRD     R2,R3,[R0, #+48]
   \   00000944   0x2106             MOVS     R1,#+6
   \   00000946   0x4628             MOV      R0,R5
   \   00000948   0x47B0             BLX      R6
   \                     ??inv_icm20948_poll_sensor_36: (+1)
   \   0000094A   0x1C7F             ADDS     R7,R7,#+1
   \                     ??inv_icm20948_poll_sensor_34: (+1)
   \   0000094C   0x2F06             CMP      R7,#+6
   \   0000094E   0xF6BF 0xAB97      BGE.W    ??inv_icm20948_poll_sensor_4
   \   00000952   0xF8BD 0x000C      LDRH     R0,[SP, #+12]
   \   00000956   0xF818 0x1017      LDRB     R1,[R8, R7, LSL #+1]
   \   0000095A   0xEA11 0x2F20      TST      R1,R0, ASR #+8
   \   0000095E   0xD0DA             BEQ.N    ??inv_icm20948_poll_sensor_35
   \   00000960   0x4620             MOV      R0,R4
   \   00000962   0x.... 0x....      BL       inv_icm20948_ctrl_get_activitiy_classifier_on_flag
   \   00000966   0x2800             CMP      R0,#+0
   \   00000968   0xD011             BEQ.N    ??inv_icm20948_poll_sensor_37
   \   0000096A   0xA81A             ADD      R0,SP,#+104
   \   0000096C   0xEB00 0x0047      ADD      R0,R0,R7, LSL #+1
   \   00000970   0xF990 0x0001      LDRSB    R0,[R0, #+1]
   \   00000974   0x9005             STR      R0,[SP, #+20]
   \   00000976   0x2000             MOVS     R0,#+0
   \   00000978   0x9001             STR      R0,[SP, #+4]
   \   0000097A   0xA805             ADD      R0,SP,#+20
   \   0000097C   0x9000             STR      R0,[SP, #+0]
   \   0000097E   0xF44F 0x7032      MOV      R0,#+712
   \   00000982   0x4420             ADD      R0,R4,R0
   \   00000984   0xE9D0 0x230C      LDRD     R2,R3,[R0, #+48]
   \   00000988   0x2106             MOVS     R1,#+6
   \   0000098A   0x4628             MOV      R0,R5
   \   0000098C   0x47B0             BLX      R6
   \                     ??inv_icm20948_poll_sensor_37: (+1)
   \   0000098E   0xF818 0x0017      LDRB     R0,[R8, R7, LSL #+1]
   \   00000992   0x2810             CMP      R0,#+16
   \   00000994   0xD1D9             BNE.N    ??inv_icm20948_poll_sensor_36
   \   00000996   0x2129             MOVS     R1,#+41
   \   00000998   0x4620             MOV      R0,R4
   \   0000099A   0x.... 0x....      BL       inv_icm20948_ctrl_androidSensor_enabled
   \   0000099E   0x2800             CMP      R0,#+0
   \   000009A0   0xD0D3             BEQ.N    ??inv_icm20948_poll_sensor_36
   \   000009A2   0x2000             MOVS     R0,#+0
   \   000009A4   0x9001             STR      R0,[SP, #+4]
   \   000009A6   0x9000             STR      R0,[SP, #+0]
   \   000009A8   0xF44F 0x7032      MOV      R0,#+712
   \   000009AC   0x4420             ADD      R0,R4,R0
   \   000009AE   0xE9D0 0x231E      LDRD     R2,R3,[R0, #+120]
   \   000009B2   0x210F             MOVS     R1,#+15
   \   000009B4   0x4628             MOV      R0,R5
   \   000009B6   0x47B0             BLX      R6
   \   000009B8   0xE7C7             B.N      ??inv_icm20948_poll_sensor_36
    893          			}
    894          		} while(data_left_in_fifo);
   \                     ??inv_icm20948_poll_sensor_7: (+1)
   \   000009BA   0x9808             LDR      R0,[SP, #+32]
   \   000009BC   0x2800             CMP      R0,#+0
   \   000009BE   0xF47F 0xAB51      BNE.W    ??inv_icm20948_poll_sensor_1
    895          
    896          		/* SMD detected by DMP */
    897          		if (int_read_back & BIT_MSG_DMP_INT_2) { 
   \                     ??inv_icm20948_poll_sensor_2: (+1)
   \   000009C2   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   000009C6   0x0580             LSLS     R0,R0,#+22
   \   000009C8   0xD50D             BPL.N    ??inv_icm20948_poll_sensor_38
    898          			uint8_t event = 0;
   \   000009CA   0x2000             MOVS     R0,#+0
   \   000009CC   0xF88D 0x000C      STRB     R0,[SP, #+12]
    899          			handler(context, INV_ICM20948_SENSOR_WAKEUP_SIGNIFICANT_MOTION, s->timestamp[INV_ICM20948_SENSOR_WAKEUP_SIGNIFICANT_MOTION], &event, 0);
   \   000009D0   0x9001             STR      R0,[SP, #+4]
   \   000009D2   0xA803             ADD      R0,SP,#+12
   \   000009D4   0x9000             STR      R0,[SP, #+0]
   \   000009D6   0xF44F 0x7032      MOV      R0,#+712
   \   000009DA   0x4420             ADD      R0,R4,R0
   \   000009DC   0xE9D0 0x231A      LDRD     R2,R3,[R0, #+104]
   \   000009E0   0x210D             MOVS     R1,#+13
   \   000009E2   0x4628             MOV      R0,R5
   \   000009E4   0x47B0             BLX      R6
    900          		}
    901          		/* Step detector triggered by DMP */
    902          		if (int_read_back & BIT_MSG_DMP_INT_3) {
   \                     ??inv_icm20948_poll_sensor_38: (+1)
   \   000009E6   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   000009EA   0x0540             LSLS     R0,R0,#+21
   \   000009EC   0xD50D             BPL.N    ??inv_icm20948_poll_sensor_39
    903          			uint8_t event = 0;
   \   000009EE   0x2000             MOVS     R0,#+0
   \   000009F0   0xF88D 0x000C      STRB     R0,[SP, #+12]
    904          			handler(context, INV_ICM20948_SENSOR_STEP_DETECTOR, s->timestamp[INV_ICM20948_SENSOR_STEP_DETECTOR], &event, 0);
   \   000009F4   0x9001             STR      R0,[SP, #+4]
   \   000009F6   0xA803             ADD      R0,SP,#+12
   \   000009F8   0x9000             STR      R0,[SP, #+0]
   \   000009FA   0xF44F 0x7032      MOV      R0,#+712
   \   000009FE   0x4420             ADD      R0,R4,R0
   \   00000A00   0xE9D0 0x230E      LDRD     R2,R3,[R0, #+56]
   \   00000A04   0x2107             MOVS     R1,#+7
   \   00000A06   0x4628             MOV      R0,R5
   \   00000A08   0x47B0             BLX      R6
    905          		}
    906          		/* Bring to see detected by DMP */
    907          		if (int_read_back & BIT_MSG_DMP_INT_5) {
   \                     ??inv_icm20948_poll_sensor_39: (+1)
   \   00000A0A   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \   00000A0E   0x0480             LSLS     R0,R0,#+18
   \   00000A10   0xD50D             BPL.N    ??inv_icm20948_poll_sensor_0
    908          			uint8_t event = 0;
   \   00000A12   0x2000             MOVS     R0,#+0
   \   00000A14   0xF88D 0x000C      STRB     R0,[SP, #+12]
    909          			handler(context, INV_ICM20948_SENSOR_B2S, s->timestamp[INV_ICM20948_SENSOR_B2S], &event, 0);
   \   00000A18   0x9001             STR      R0,[SP, #+4]
   \   00000A1A   0xA803             ADD      R0,SP,#+12
   \   00000A1C   0x9000             STR      R0,[SP, #+0]
   \   00000A1E   0xF44F 0x7052      MOV      R0,#+840
   \   00000A22   0x4420             ADD      R0,R4,R0
   \   00000A24   0xE9D0 0x2306      LDRD     R2,R3,[R0, #+24]
   \   00000A28   0x2113             MOVS     R1,#+19
   \   00000A2A   0x4628             MOV      R0,R5
   \   00000A2C   0x47B0             BLX      R6
    910          		}
    911          	}
    912          	
    913          	/* Sometimes, the chip can be put in sleep mode even if there is data in the FIFO. If we poll at this moment, the transport layer will wake-up the chip, but never put it back in sleep. */
    914          	if (s->mems_put_to_sleep) {
   \                     ??inv_icm20948_poll_sensor_0: (+1)
   \   00000A2E   0xF994 0x023C      LDRSB    R0,[R4, #+572]
   \   00000A32   0x2800             CMP      R0,#+0
   \   00000A34   0xD002             BEQ.N    ??inv_icm20948_poll_sensor_40
    915          		inv_icm20948_sleep_mems(s);
   \   00000A36   0x4620             MOV      R0,R4
   \   00000A38   0x.... 0x....      BL       inv_icm20948_sleep_mems
    916          	}
    917          	
    918          	return 0;
   \                     ??inv_icm20948_poll_sensor_40: (+1)
   \   00000A3C   0x2000             MOVS     R0,#+0
   \   00000A3E   0xB042             ADD      SP,SP,#+264
   \   00000A40   0xECBD 0x8B04      VPOP     {D8-D9}
   \   00000A44   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    919          }

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x00000000         DC32 0H
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x00000000         DC32     0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   0x37800000         DC32     0x37800000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   0x000186A0         DC32     0x186a0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000002C   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000058   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000066   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x0000 0x0000      DC16 0, 0, 0
   \              0x0000       
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x00000000         DC32 0, 0, 0
   \              0x00000000   
   \              0x00000000   

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x01 0x01          DC8 1, 1, 2, 2, 4, 3, 8, 4, 32, 6, 16, 5
   \              0x02 0x02    
   \              0x04 0x03    
   \              0x08 0x04    
   \              0x20 0x06    
   \              0x10 0x05    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DmpDriver_convertion
       8   inv_icm20948_enable_batch_timeout
         8   -> inv_icm20948_ctrl_enable_batch
         8   -> inv_icm20948_ctrl_set_batch_timeout_ms
      16   inv_icm20948_enable_sensor
        16   -> inv_icm20948_ctrl_enable_sensor
        16   -> sensor_type_2_android_sensor
      40   inv_icm20948_get_bias
        40   -> __aeabi_memcpy
        40   -> inv_icm20948_ctrl_get_acc_bias
        40   -> inv_icm20948_ctrl_get_gyr_bias
        40   -> inv_icm20948_ctrl_get_mag_bias
        40   -> inv_icm20948_get_gyro_fullscale
       8   inv_icm20948_get_fsr
         8   -> inv_icm20948_get_accel_fullscale
         8   -> inv_icm20948_get_gyro_fullscale
       0   inv_icm20948_get_lowpower_or_highperformance
       0   inv_icm20948_get_whoami
         0   -> inv_icm20948_read_reg_one
      16   inv_icm20948_init_matrix
        16   -> __aeabi_memset4
         0   -> inv_icm20948_set_chip_to_body_axis_quaternion
       8   inv_icm20948_init_scale
         8   -> inv_icm20948_set_accel_fullscale
         8   -> inv_icm20948_set_gyro_fullscale
      16   inv_icm20948_init_structure
        16   -> inv_icm20948_augmented_init
        16   -> inv_icm20948_base_control_init
        16   -> inv_icm20948_sensor_android_2_sensor_type
        16   -> inv_icm20948_transport_init
       8   inv_icm20948_initialize
         8   -> inv_icm20948_initialize_lower_driver
       8   inv_icm20948_initialize_auxiliary
         8   -> inv_icm20948_set_slave_compass_id
       0   inv_icm20948_is_streamed_sensor
       0   inv_icm20948_load
         0   -> inv_icm20948_firmware_load
     312   inv_icm20948_poll_sensor
       312   -- Indirect call
       312   -> dmp_icm20948_get_pedometer_num_of_steps
       312   -> inv_icm20948_augmented_sensors_get_gravity
       312   -> inv_icm20948_augmented_sensors_get_linearacceleration
       312   -> inv_icm20948_augmented_sensors_get_orientation
       312   -> inv_icm20948_convert_dmp3_to_body
       312   -> inv_icm20948_convert_quat_rotate_fxp
       312   -> inv_icm20948_convert_rotation_vector
       312   -> inv_icm20948_ctrl_androidSensor_enabled
       312   -> inv_icm20948_ctrl_get_activitiy_classifier_on_flag
       312   -> inv_icm20948_ctrl_get_mag_bias
       312   -> inv_icm20948_dmp_get_6quaternion
       312   -> inv_icm20948_dmp_get_9quaternion
       312   -> inv_icm20948_dmp_get_accel
       312   -> inv_icm20948_dmp_get_bac_state
       312   -> inv_icm20948_dmp_get_bac_ts
       312   -> inv_icm20948_dmp_get_calibrated_compass
       312   -> inv_icm20948_dmp_get_calibrated_gyro
       312   -> inv_icm20948_dmp_get_flip_pickup_state
       312   -> inv_icm20948_dmp_get_gmrvquaternion
       312   -> inv_icm20948_dmp_get_gyro_bias
       312   -> inv_icm20948_dmp_get_raw_compass
       312   -> inv_icm20948_dmp_get_raw_gyro
       312   -> inv_icm20948_fifo_pop
       312   -> inv_icm20948_get_accel_accuracy
       312   -> inv_icm20948_get_accel_fullscale
       312   -> inv_icm20948_get_gmrv_accuracy
       312   -> inv_icm20948_get_gyro_accuracy
       312   -> inv_icm20948_get_gyro_fullscale
       312   -> inv_icm20948_get_mag_accuracy
       312   -> inv_icm20948_get_rv_accuracy
       312   -> inv_icm20948_get_time_us
       312   -> inv_icm20948_identify_interrupt
       312   -> inv_icm20948_sleep_mems
       312   -> inv_icm20948_updateTs
       312   -> skip_sensor
       0   inv_icm20948_read_reg_one
         0   -> inv_icm20948_read_reg
       0   inv_icm20948_sensor_android_2_sensor_type
      32   inv_icm20948_set_bias
        32   -> __aeabi_memcpy
        32   -> inv_icm20948_ctrl_set_acc_bias
        32   -> inv_icm20948_ctrl_set_gyr_bias
        32   -> inv_icm20948_ctrl_set_mag_bias
        32   -> inv_icm20948_get_gyro_fullscale
       8   inv_icm20948_set_fsr
         0   -> inv_icm20948_set_accel_fullscale
         0   -> inv_icm20948_set_gyro_fullscale
       0   inv_icm20948_set_lowpower_or_highperformance
         0   -> inv_icm20948_enter_duty_cycle_mode
         0   -> inv_icm20948_enter_low_noise_mode
      88   inv_icm20948_set_matrix
        88   -> DmpDriver_convertion
        88   -> dmp_icm20948_set_B2S_matrix
        88   -> inv_icm20948_compass_dmp_cal
        88   -> inv_icm20948_set_chip_to_body_axis_quaternion
      16   inv_icm20948_set_sensor_period
        16   -> inv_icm20948_set_odr
        16   -> sensor_type_2_android_sensor
       8   inv_icm20948_soft_reset
         8   -> inv_icm20948_sleep_us
         8   -> inv_icm20948_write_single_mems_reg
     152   inv_icm20948_updateTs
       152   -> __aeabi_memclr4
       152   -> inv_icm20948_fifo_swmirror
       152   -> inv_icm20948_is_streamed_sensor
       152   -> inv_icm20948_sensor_android_2_sensor_type
       152 __aeabi_uldivmod
       0   sensor_type_2_android_sensor
       8   skip_sensor
         8   -> inv_icm20948_sensor_android_2_sensor_type


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable8
     104  ?_0
       8  ?_1
      12  ?_2
      12  ?_3
      12  ?_4
      12  ?_5
      12  ?_6
      12  ?_7
      20  DmpDriver_convertion
      42  inv_icm20948_enable_batch_timeout
      58  inv_icm20948_enable_sensor
     160  inv_icm20948_get_bias
     134  inv_icm20948_get_fsr
       8  inv_icm20948_get_lowpower_or_highperformance
       6  inv_icm20948_get_whoami
      68  inv_icm20948_init_matrix
      22  inv_icm20948_init_scale
      62  inv_icm20948_init_structure
      42  inv_icm20948_initialize
      24  inv_icm20948_initialize_auxiliary
      24  inv_icm20948_is_streamed_sensor
       6  inv_icm20948_load
    2632  inv_icm20948_poll_sensor
       6  inv_icm20948_read_reg_one
     142  inv_icm20948_sensor_android_2_sensor_type
     158  inv_icm20948_set_bias
     124  inv_icm20948_set_fsr
      18  inv_icm20948_set_lowpower_or_highperformance
     180  inv_icm20948_set_matrix
      66  inv_icm20948_set_sensor_period
      24  inv_icm20948_soft_reset
     450  inv_icm20948_updateTs
     112  sensor_type_2_android_sensor
      32  skip_sensor

 
   172 bytes in section .rodata
 4 648 bytes in section .text
 
 4 648 bytes of CODE  memory
   172 bytes of CONST memory

Errors: none
Warnings: none
