###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.2.11706/W32 for ARM       22/Dec/2017  10:34:31
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\Invn\EmbUtils\InvPrintf.c
#    Command line =  
#        C:\Users\prasa\Documents\1.0.0\sources\Invn\EmbUtils\InvPrintf.c -D
#        IAR_COMPILER -D __inline=inline -D INV_MSG_ENABLE -D ASSERT -D NUCLEO
#        -D USE_STDPERIPH_DRIVER -D USE_HSE_BYPASS -D HSE_VALUE=8000000 -D
#        STM32F411xE -lC
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list
#        --diag_suppress Pa050 -o
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 --silent --warnings_are_errors -e
#        --char_is_signed --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../board-hal\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Core\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Device\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/STM32F4xx_StdPeriph_Driver/inc\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/Images\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/DynamicProtocol\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list\InvPrintf.lst
#    Object file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj\InvPrintf.o
#
###############################################################################

C:\Users\prasa\Documents\1.0.0\sources\Invn\EmbUtils\InvPrintf.c
      1          /*
      2              Copyright (c) 2014-2015 InvenSense Inc. Portions Copyright (c) 2014-2015 Movea. All rights reserved.
      3          
      4              This software, related documentation and any modifications thereto (collectively "Software") is subject
      5              to InvenSense and its licensors' intellectual property rights under U.S. and international copyright and
      6              other intellectual property rights laws.
      7          
      8              InvenSense and its licensors retain all intellectual property and proprietary rights in and to the Software
      9              and any use, reproduction, disclosure or distribution of the Software without an express license
     10              agreement from InvenSense is strictly prohibited.
     11          */
     12          
     13          #include "InvPrintf.h"
     14          
     15          /** @brief  Convert a number into a string
     16           *
     17           * This function converts a numerical value into a string.
     18           * @warning This function is not thread safe as it uses a static buffer
     19           *
     20           * @param[in] num           Numerical value
     21           * @param[in] base          Base for the string conversion, should be 10 or 16
     22           * @param[out] length       Length of the converted string (must be initialized first)
     23           *
     24           * @return Pointer to the converted string (point to a static buffer)
     25           */

   \                                 In section .text, align 2, keep-with-next
     26          static char *convert2string(unsigned int num, int base, int *length)
     27          {
   \                     convert2string: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
     28              static char buf[16];
     29              char *ptr;
     30          
     31              // Start from the end of the buffer - insert the null termination
     32              ptr=&buf[sizeof(buf)-1];
   \   00000002   0x....             LDR.N    R4,??DataTable1
   \   00000004   0xF104 0x030F      ADD      R3,R4,#+15
     33              *ptr='\0';
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x73E5             STRB     R5,[R4, #+15]
   \   0000000C   0x.... 0x....      ADR.W    R5,?_0
     34          
     35              // Insert digits starting from the right
     36              do
     37              {
     38                  *--ptr = "0123456789ABCDEF"[num % base];
   \                     ??convert2string_0: (+1)
   \   00000010   0xFBB0 0xF4F1      UDIV     R4,R0,R1
   \   00000014   0xFB01 0x0014      MLS      R0,R1,R4,R0
   \   00000018   0x5C28             LDRB     R0,[R5, R0]
   \   0000001A   0xF803 0x0D01      STRB     R0,[R3, #-1]!
     39                  num /= base;
   \   0000001E   0x4620             MOV      R0,R4
     40                  ++(*length);
   \   00000020   0x6814             LDR      R4,[R2, #+0]
   \   00000022   0x1C64             ADDS     R4,R4,#+1
   \   00000024   0x6014             STR      R4,[R2, #+0]
     41              }
     42              while(num != 0);
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD1F2             BNE.N    ??convert2string_0
     43          
     44              // Return the position of the first digit
     45              return(ptr);
   \   0000002A   0x4618             MOV      R0,R3
   \   0000002C   0xBC30             POP      {R4,R5}
   \   0000002E   0x4770             BX       LR               ;; return
     46          }

   \                                 In section .bss, align 4
   \                     `convert2string::buf`:
   \   00000000                      DS8 16
     47          

   \                                 In section .text, align 2, keep-with-next
     48          int inv_vprintf(const char *fmt, va_list args)
     49          {
   \                     inv_vprintf: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x460C             MOV      R4,R1
     50              char *str , *sval;
     51              int ival, sign;
     52              int length = 0;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x9100             STR      R1,[SP, #+0]
     53              char *num2char;
     54              char padChar, signChar, ch;
     55              int width;
     56              int i;
     57              int byteswritten = 0;
   \   0000000A   0x460D             MOV      R5,R1
     58          
     59              for(str = (char *)fmt; *str; str++)
   \   0000000C   0x4606             MOV      R6,R0
   \   0000000E   0xE008             B.N      ??inv_vprintf_0
     60              {
     61                  // Check for format specifier
     62                  if(*str!='%')
     63                  {
     64                      if(INV_PRINTF_PUTCHAR_HOOK(*str) != *str)
   \                     ??inv_vprintf_1: (+1)
   \   00000010   0x.... 0x....      BL       putchar
   \   00000014   0xF996 0x1000      LDRSB    R1,[R6, #+0]
   \   00000018   0x4288             CMP      R0,R1
   \   0000001A   0xF040 0x80EC      BNE.W    ??inv_vprintf_2
     65                          goto end;
     66                      ++byteswritten;
     67                      continue;
     68                  }
     69                  else 
     70                  {
     71                      str++;
     72                      width = length = sign = 0;
     73                      signChar = '\0';
     74          
     75                      // Default padding is space
     76                      padChar = ' ';
     77          
     78                      if (*str == '\0') break;
     79          
     80                      if (*str == '-') 
     81                      {
     82                          str++;
     83                      }
     84          
     85                      // Check if '0' padding is required
     86                      if (*str == '0')
     87                      {
     88                          str++;
     89                          padChar = '0';
     90                      }
     91          
     92                      // Get the width field
     93                      for ( ; *str >= '0' && *str <= '9'; str++) 
     94                      {
     95                          width *= 10;
     96                          width += *str - '0';
     97                      }
     98          
     99                      // Process the data type
    100                      switch(*str)
    101                      {
    102                      case 'c':
    103                          ch = (char)va_arg(args,int);
    104                          
    105                          INV_PRINTF_PUTCHAR_HOOK(ch);
    106                          ++byteswritten;
    107                          break;
    108          
    109                      case 'd':
    110                      case 'D':
    111                          ival=va_arg(args,int);
    112                          if(ival < 0)
    113                          {
    114                              ival=-ival;
    115                              sign = 1;
    116                              signChar = '-';
    117                          }
    118          
    119                          num2char = convert2string(ival, 10, &length);
    120          
    121                          if (length >= width) 
    122                              width = 0;
    123                          else 
    124                              width -= (length+sign);
    125          
    126                          // If 0 padding and -ve number, print the sign first
    127                          if (sign && padChar == '0')
    128                          {
    129                              if(INV_PRINTF_PUTCHAR_HOOK(signChar) != signChar)
    130                                  goto end;
    131                              ++byteswritten;
    132                          }
    133          
    134                          // Print the leftover 'width' padding
    135                          while(width)
    136                          {
    137                              if(INV_PRINTF_PUTCHAR_HOOK(padChar) != padChar)
    138                                  goto end;
    139                              ++byteswritten;
    140                              width--;
    141                          }
    142          
    143                          // If no padding and -ve number, print the sign now
    144                          if(sign  && padChar == ' ')
    145                          {
    146                              if(INV_PRINTF_PUTCHAR_HOOK(signChar) != signChar)
    147                                  goto end;
    148                              ++byteswritten;
    149                          }
    150          
    151                          for (i = 0; i < length; i++)
    152                          {
    153                              if(INV_PRINTF_PUTCHAR_HOOK(num2char[i]) != num2char[i])
    154                                  goto end;
    155                              ++byteswritten;
    156                          }
    157                          break;
    158          
    159                      case 'x':
    160                      case 'X':
    161                          ival=va_arg(args,int);
    162                          num2char = convert2string(ival, 16, &length);
    163                          if (length >= width) 
    164                              width = 0;
    165                          else 
    166                              width -= length;
    167          
    168                          while(width)
    169                          {
    170                              if(INV_PRINTF_PUTCHAR_HOOK(padChar) != padChar)
    171                                  goto end;
    172                              ++byteswritten;
    173                              width--;
    174                          }
    175                          for (i = 0; i < length; i++)
    176                          {
    177                              if(INV_PRINTF_PUTCHAR_HOOK(num2char[i]) != num2char[i])
    178                                  goto end;
    179                              ++byteswritten;
    180                          }
    181                          break;
    182          
    183                      case 's':
    184                      case 'S':
    185                          sval = va_arg(args,char*);
    186          
    187                          for(; *sval; sval++)
    188                              length++;
    189                          if (length >= width) 
    190                              width = 0;
    191                          else 
    192                              width -= length;
    193          
    194                          while(width)
    195                          {
    196                              if(INV_PRINTF_PUTCHAR_HOOK(padChar) != padChar)
    197                                  goto end;
    198                              ++byteswritten;
    199                              width--;
    200                          }
    201                          sval -= length;
    202                          for (i = 0; i < length; i++)
    203                          {
    204                              if(INV_PRINTF_PUTCHAR_HOOK(sval[i]) != sval[i])
    205                                  goto end;
    206                              ++byteswritten;
    207                          }
    208                          break;
    209          
    210                      default:
    211                          if(INV_PRINTF_PUTCHAR_HOOK(*str) != *str)
    212                              goto end;
    213                          ++byteswritten;
   \                     ??inv_vprintf_3: (+1)
   \   0000001E   0x1C6D             ADDS     R5,R5,#+1
    214                          break;
   \                     ??inv_vprintf_4: (+1)
   \   00000020   0x1C76             ADDS     R6,R6,#+1
   \                     ??inv_vprintf_0: (+1)
   \   00000022   0xF996 0x0000      LDRSB    R0,[R6, #+0]
   \   00000026   0x0001             MOVS     R1,R0
   \   00000028   0xF000 0x80E5      BEQ.W    ??inv_vprintf_2
   \   0000002C   0x2825             CMP      R0,#+37
   \   0000002E   0xD1EF             BNE.N    ??inv_vprintf_1
   \   00000030   0xF04F 0x0900      MOV      R9,#+0
   \   00000034   0x4648             MOV      R0,R9
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x4607             MOV      R7,R0
   \   0000003A   0x4682             MOV      R10,R0
   \   0000003C   0xF04F 0x0820      MOV      R8,#+32
   \   00000040   0xF916 0x0F01      LDRSB    R0,[R6, #+1]!
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xF000 0x80D6      BEQ.W    ??inv_vprintf_2
   \   0000004A   0x282D             CMP      R0,#+45
   \   0000004C   0xD100             BNE.N    ??inv_vprintf_5
   \   0000004E   0x1C76             ADDS     R6,R6,#+1
   \                     ??inv_vprintf_5: (+1)
   \   00000050   0xF996 0x0000      LDRSB    R0,[R6, #+0]
   \   00000054   0x2830             CMP      R0,#+48
   \   00000056   0xD10B             BNE.N    ??inv_vprintf_6
   \   00000058   0x1C76             ADDS     R6,R6,#+1
   \   0000005A   0xF04F 0x0830      MOV      R8,#+48
   \   0000005E   0xE007             B.N      ??inv_vprintf_6
   \                     ??inv_vprintf_7: (+1)
   \   00000060   0xEB07 0x0087      ADD      R0,R7,R7, LSL #+2
   \   00000064   0xF916 0x1B01      LDRSB    R1,[R6], #+1
   \   00000068   0xEB11 0x0040      ADDS     R0,R1,R0, LSL #+1
   \   0000006C   0xF1A0 0x0730      SUB      R7,R0,#+48
   \                     ??inv_vprintf_6: (+1)
   \   00000070   0xF996 0x0000      LDRSB    R0,[R6, #+0]
   \   00000074   0xF1A0 0x0130      SUB      R1,R0,#+48
   \   00000078   0x290A             CMP      R1,#+10
   \   0000007A   0xD3F1             BCC.N    ??inv_vprintf_7
   \   0000007C   0x4601             MOV      R1,R0
   \   0000007E   0x2944             CMP      R1,#+68
   \   00000080   0xD014             BEQ.N    ??inv_vprintf_8
   \   00000082   0x2953             CMP      R1,#+83
   \   00000084   0xF000 0x8082      BEQ.W    ??inv_vprintf_9
   \   00000088   0x2958             CMP      R1,#+88
   \   0000008A   0xD058             BEQ.N    ??inv_vprintf_10
   \   0000008C   0x2963             CMP      R1,#+99
   \   0000008E   0xD006             BEQ.N    ??inv_vprintf_11
   \   00000090   0x2964             CMP      R1,#+100
   \   00000092   0xD00B             BEQ.N    ??inv_vprintf_8
   \   00000094   0x2973             CMP      R1,#+115
   \   00000096   0xD079             BEQ.N    ??inv_vprintf_9
   \   00000098   0x2978             CMP      R1,#+120
   \   0000009A   0xD050             BEQ.N    ??inv_vprintf_10
   \   0000009C   0xE0A4             B.N      ??inv_vprintf_12
   \                     ??inv_vprintf_11: (+1)
   \   0000009E   0xF854 0x0B04      LDR      R0,[R4], #+4
   \   000000A2   0xB240             SXTB     R0,R0
   \   000000A4   0x.... 0x....      BL       putchar
   \   000000A8   0x1C6D             ADDS     R5,R5,#+1
   \   000000AA   0xE7B9             B.N      ??inv_vprintf_4
   \                     ??inv_vprintf_8: (+1)
   \   000000AC   0xF854 0x0B04      LDR      R0,[R4], #+4
   \   000000B0   0x2800             CMP      R0,#+0
   \   000000B2   0xD504             BPL.N    ??inv_vprintf_13
   \   000000B4   0x4240             RSBS     R0,R0,#+0
   \   000000B6   0xF04F 0x0901      MOV      R9,#+1
   \   000000BA   0xF04F 0x0A2D      MOV      R10,#+45
   \                     ??inv_vprintf_13: (+1)
   \   000000BE   0x466A             MOV      R2,SP
   \   000000C0   0x210A             MOVS     R1,#+10
   \   000000C2   0x.... 0x....      BL       convert2string
   \   000000C6   0x4683             MOV      R11,R0
   \   000000C8   0x9800             LDR      R0,[SP, #+0]
   \   000000CA   0x42B8             CMP      R0,R7
   \   000000CC   0xDB01             BLT.N    ??inv_vprintf_14
   \   000000CE   0x2700             MOVS     R7,#+0
   \   000000D0   0xE002             B.N      ??inv_vprintf_15
   \                     ??inv_vprintf_14: (+1)
   \   000000D2   0x1A38             SUBS     R0,R7,R0
   \   000000D4   0xEBA0 0x0709      SUB      R7,R0,R9
   \                     ??inv_vprintf_15: (+1)
   \   000000D8   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000DC   0xD011             BEQ.N    ??inv_vprintf_16
   \   000000DE   0xF1B8 0x0F30      CMP      R8,#+48
   \   000000E2   0xD10E             BNE.N    ??inv_vprintf_16
   \   000000E4   0x4650             MOV      R0,R10
   \   000000E6   0x.... 0x....      BL       putchar
   \   000000EA   0x4550             CMP      R0,R10
   \   000000EC   0xF040 0x8083      BNE.W    ??inv_vprintf_2
   \   000000F0   0x1C6D             ADDS     R5,R5,#+1
   \   000000F2   0xE006             B.N      ??inv_vprintf_16
   \                     ??inv_vprintf_17: (+1)
   \   000000F4   0x4640             MOV      R0,R8
   \   000000F6   0x.... 0x....      BL       putchar
   \   000000FA   0x4540             CMP      R0,R8
   \   000000FC   0xD17B             BNE.N    ??inv_vprintf_2
   \   000000FE   0x1C6D             ADDS     R5,R5,#+1
   \   00000100   0x1E7F             SUBS     R7,R7,#+1
   \                     ??inv_vprintf_16: (+1)
   \   00000102   0x2F00             CMP      R7,#+0
   \   00000104   0xD1F6             BNE.N    ??inv_vprintf_17
   \   00000106   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000010A   0xD008             BEQ.N    ??inv_vprintf_18
   \   0000010C   0xF1B8 0x0F20      CMP      R8,#+32
   \   00000110   0xD105             BNE.N    ??inv_vprintf_18
   \   00000112   0x4650             MOV      R0,R10
   \   00000114   0x.... 0x....      BL       putchar
   \   00000118   0x4550             CMP      R0,R10
   \   0000011A   0xD16C             BNE.N    ??inv_vprintf_2
   \   0000011C   0x1C6D             ADDS     R5,R5,#+1
   \                     ??inv_vprintf_18: (+1)
   \   0000011E   0x2700             MOVS     R7,#+0
   \                     ??inv_vprintf_19: (+1)
   \   00000120   0x9800             LDR      R0,[SP, #+0]
   \   00000122   0x4287             CMP      R7,R0
   \   00000124   0xF6BF 0xAF7C      BGE.W    ??inv_vprintf_4
   \   00000128   0xF91B 0x0007      LDRSB    R0,[R11, R7]
   \   0000012C   0x.... 0x....      BL       putchar
   \   00000130   0xF91B 0x1007      LDRSB    R1,[R11, R7]
   \   00000134   0x4288             CMP      R0,R1
   \   00000136   0xD15E             BNE.N    ??inv_vprintf_2
   \   00000138   0x1C6D             ADDS     R5,R5,#+1
   \   0000013A   0x1C7F             ADDS     R7,R7,#+1
   \   0000013C   0xE7F0             B.N      ??inv_vprintf_19
   \                     ??inv_vprintf_10: (+1)
   \   0000013E   0xF854 0x0B04      LDR      R0,[R4], #+4
   \   00000142   0x466A             MOV      R2,SP
   \   00000144   0x2110             MOVS     R1,#+16
   \   00000146   0x.... 0x....      BL       convert2string
   \   0000014A   0x4683             MOV      R11,R0
   \   0000014C   0x9800             LDR      R0,[SP, #+0]
   \   0000014E   0x42B8             CMP      R0,R7
   \   00000150   0xDB01             BLT.N    ??inv_vprintf_20
   \   00000152   0x464F             MOV      R7,R9
   \   00000154   0xE008             B.N      ??inv_vprintf_21
   \                     ??inv_vprintf_20: (+1)
   \   00000156   0x1A3F             SUBS     R7,R7,R0
   \   00000158   0xE006             B.N      ??inv_vprintf_21
   \                     ??inv_vprintf_22: (+1)
   \   0000015A   0x4640             MOV      R0,R8
   \   0000015C   0x.... 0x....      BL       putchar
   \   00000160   0x4540             CMP      R0,R8
   \   00000162   0xD148             BNE.N    ??inv_vprintf_2
   \   00000164   0x1C6D             ADDS     R5,R5,#+1
   \   00000166   0x1E7F             SUBS     R7,R7,#+1
   \                     ??inv_vprintf_21: (+1)
   \   00000168   0x2F00             CMP      R7,#+0
   \   0000016A   0xD1F6             BNE.N    ??inv_vprintf_22
   \   0000016C   0x464F             MOV      R7,R9
   \                     ??inv_vprintf_23: (+1)
   \   0000016E   0x9800             LDR      R0,[SP, #+0]
   \   00000170   0x4287             CMP      R7,R0
   \   00000172   0xF6BF 0xAF55      BGE.W    ??inv_vprintf_4
   \   00000176   0xF91B 0x0007      LDRSB    R0,[R11, R7]
   \   0000017A   0x.... 0x....      BL       putchar
   \   0000017E   0xF91B 0x1007      LDRSB    R1,[R11, R7]
   \   00000182   0x4288             CMP      R0,R1
   \   00000184   0xD137             BNE.N    ??inv_vprintf_2
   \   00000186   0x1C6D             ADDS     R5,R5,#+1
   \   00000188   0x1C7F             ADDS     R7,R7,#+1
   \   0000018A   0xE7F0             B.N      ??inv_vprintf_23
   \                     ??inv_vprintf_9: (+1)
   \   0000018C   0xF854 0x9B04      LDR      R9,[R4], #+4
   \   00000190   0xE003             B.N      ??inv_vprintf_24
   \                     ??inv_vprintf_25: (+1)
   \   00000192   0x1C40             ADDS     R0,R0,#+1
   \   00000194   0x9000             STR      R0,[SP, #+0]
   \   00000196   0xF109 0x0901      ADD      R9,R9,#+1
   \                     ??inv_vprintf_24: (+1)
   \   0000019A   0xF999 0x0000      LDRSB    R0,[R9, #+0]
   \   0000019E   0x2800             CMP      R0,#+0
   \   000001A0   0x9800             LDR      R0,[SP, #+0]
   \   000001A2   0xD1F6             BNE.N    ??inv_vprintf_25
   \   000001A4   0x42B8             CMP      R0,R7
   \   000001A6   0xDB01             BLT.N    ??inv_vprintf_26
   \   000001A8   0x4657             MOV      R7,R10
   \   000001AA   0xE008             B.N      ??inv_vprintf_27
   \                     ??inv_vprintf_26: (+1)
   \   000001AC   0x1A3F             SUBS     R7,R7,R0
   \   000001AE   0xE006             B.N      ??inv_vprintf_27
   \                     ??inv_vprintf_28: (+1)
   \   000001B0   0x4640             MOV      R0,R8
   \   000001B2   0x.... 0x....      BL       putchar
   \   000001B6   0x4540             CMP      R0,R8
   \   000001B8   0xD11D             BNE.N    ??inv_vprintf_2
   \   000001BA   0x1C6D             ADDS     R5,R5,#+1
   \   000001BC   0x1E7F             SUBS     R7,R7,#+1
   \                     ??inv_vprintf_27: (+1)
   \   000001BE   0x2F00             CMP      R7,#+0
   \   000001C0   0xD1F6             BNE.N    ??inv_vprintf_28
   \   000001C2   0x9800             LDR      R0,[SP, #+0]
   \   000001C4   0x4240             RSBS     R0,R0,#+0
   \   000001C6   0x4481             ADD      R9,R9,R0
   \   000001C8   0x4657             MOV      R7,R10
   \                     ??inv_vprintf_29: (+1)
   \   000001CA   0x9800             LDR      R0,[SP, #+0]
   \   000001CC   0x4287             CMP      R7,R0
   \   000001CE   0xF6BF 0xAF27      BGE.W    ??inv_vprintf_4
   \   000001D2   0xF919 0x0007      LDRSB    R0,[R9, R7]
   \   000001D6   0x.... 0x....      BL       putchar
   \   000001DA   0xF919 0x1007      LDRSB    R1,[R9, R7]
   \   000001DE   0x4288             CMP      R0,R1
   \   000001E0   0xD109             BNE.N    ??inv_vprintf_2
   \   000001E2   0x1C6D             ADDS     R5,R5,#+1
   \   000001E4   0x1C7F             ADDS     R7,R7,#+1
   \   000001E6   0xE7F0             B.N      ??inv_vprintf_29
   \                     ??inv_vprintf_12: (+1)
   \   000001E8   0x.... 0x....      BL       putchar
   \   000001EC   0xF996 0x1000      LDRSB    R1,[R6, #+0]
   \   000001F0   0x4288             CMP      R0,R1
   \   000001F2   0xF43F 0xAF14      BEQ.W    ??inv_vprintf_3
    215                      }
    216                  }
    217              }
    218          
    219          end:    
    220              va_end(args);
    221          
    222              return byteswritten;
   \                     ??inv_vprintf_2: (+1)
   \   000001F6   0x4628             MOV      R0,R5
   \   000001F8   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
    223          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     `convert2string::buf`

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x30 0x31          DC8 "0123456789ABCDEF"
   \              0x32 0x33    
   \              0x34 0x35    
   \              0x36 0x37    
   \              0x38 0x39    
   \              0x41 0x42    
   \              0x43 0x44    
   \              0x45 0x46    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   convert2string
      40   inv_vprintf
        40   -> convert2string
        40   -> putchar


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
      20  ?_0
      16  buf
      48  convert2string
     508  inv_vprintf

 
  16 bytes in section .bss
 580 bytes in section .text
 
 580 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
