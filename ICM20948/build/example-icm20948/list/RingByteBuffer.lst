###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.2.11706/W32 for ARM       22/Dec/2017  10:34:32
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\Invn\EmbUtils\RingByteBuffer.c
#    Command line =  
#        C:\Users\prasa\Documents\1.0.0\sources\Invn\EmbUtils\RingByteBuffer.c
#        -D IAR_COMPILER -D __inline=inline -D INV_MSG_ENABLE -D ASSERT -D
#        NUCLEO -D USE_STDPERIPH_DRIVER -D USE_HSE_BYPASS -D HSE_VALUE=8000000
#        -D STM32F411xE -lC
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list
#        --diag_suppress Pa050 -o
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 --silent --warnings_are_errors -e
#        --char_is_signed --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../board-hal\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Core\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Device\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/STM32F4xx_StdPeriph_Driver/inc\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/Images\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/DynamicProtocol\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list\RingByteBuffer.lst
#    Object file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj\RingByteBuffer.o
#
###############################################################################

C:\Users\prasa\Documents\1.0.0\sources\Invn\EmbUtils\RingByteBuffer.c
      1          /*
      2              Copyright (c) 2014-2015 InvenSense Inc. Portions Copyright (c) 2014-2015 Movea. All rights reserved.
      3          
      4              This software, related documentation and any modifications thereto (collectively "Software") is subject
      5              to InvenSense and its licensors' intellectual property rights under U.S. and international copyright and
      6              other intellectual property rights laws.
      7          
      8              InvenSense and its licensors retain all intellectual property and proprietary rights in and to the Software
      9              and any use, reproduction, disclosure or distribution of the Software without an express license
     10              agreement from InvenSense is strictly prohibited.
     11          */
     12          
     13          #include "RingByteBuffer.h"
     14          

   \                                 In section .text, align 2, keep-with-next
     15          void RingByteBuffer_init(RingByteBuffer *self, uint8_t *pBuffer,
     16                                   uint16_t sizeBuffer)
     17          {
   \                     RingByteBuffer_init: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
     18          	ASSERT(self);
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD106             BNE.N    ??RingByteBuffer_init_0
   \   0000000C   0x2212             MOVS     R2,#+18
   \   0000000E   0x.... 0x....      ADR.W    R1,?_1
   \   00000012   0x.... 0x....      ADR.W    R0,?_0
   \   00000016   0x.... 0x....      BL       InvAssert
     19          	ASSERT(pBuffer);
   \                     ??RingByteBuffer_init_0: (+1)
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD106             BNE.N    ??RingByteBuffer_init_1
   \   0000001E   0x2213             MOVS     R2,#+19
   \   00000020   0x.... 0x....      ADR.W    R1,?_1
   \   00000024   0x.... 0x....      ADR.W    R0,?_2
   \   00000028   0x.... 0x....      BL       InvAssert
     20          
     21          	self->buffer 	= pBuffer;
   \                     ??RingByteBuffer_init_1: (+1)
   \   0000002C   0x6025             STR      R5,[R4, #+0]
     22          	self->size 		= sizeBuffer;
   \   0000002E   0x80A6             STRH     R6,[R4, #+4]
     23          
     24          	RingByteBuffer_clear(self);
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000036                      REQUIRE RingByteBuffer_clear
   \   00000036                      ;; // Fall through to label RingByteBuffer_clear
     25          }
     26          

   \                                 In section .text, align 2, keep-with-next
     27          void RingByteBuffer_clear(RingByteBuffer *self)
     28          {
   \                     RingByteBuffer_clear: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     29          	ASSERT(self);
   \   00000004   0xD106             BNE.N    ??RingByteBuffer_clear_0
   \   00000006   0x221D             MOVS     R2,#+29
   \   00000008   0x.... 0x....      ADR.W    R1,?_1
   \   0000000C   0x.... 0x....      ADR.W    R0,?_0
   \   00000010   0x.... 0x....      BL       InvAssert
     30          
     31          	self->start		= 0;
   \                     ??RingByteBuffer_clear_0: (+1)
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x80E0             STRH     R0,[R4, #+6]
     32          	self->end		= 0;
   \   00000018   0x8120             STRH     R0,[R4, #+8]
     33          	self->msbStart	= 0;
   \   0000001A   0x72A0             STRB     R0,[R4, #+10]
     34          	self->msbEnd	= 0;
   \   0000001C   0x72E0             STRB     R0,[R4, #+11]
     35          }
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
     36          

   \                                 In section .text, align 2, keep-with-next
     37          uint16_t RingByteBuffer_size(const RingByteBuffer *self)
     38          {
   \                     RingByteBuffer_size: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     39          	ASSERT(self);
   \   00000004   0xD106             BNE.N    ??RingByteBuffer_size_0
   \   00000006   0x2227             MOVS     R2,#+39
   \   00000008   0x.... 0x....      ADR.W    R1,?_1
   \   0000000C   0x.... 0x....      ADR.W    R0,?_0
   \   00000010   0x.... 0x....      BL       InvAssert
     40          
     41          	if (self->end > self->start) {
   \                     ??RingByteBuffer_size_0: (+1)
   \   00000014   0x8920             LDRH     R0,[R4, #+8]
   \   00000016   0x88E1             LDRH     R1,[R4, #+6]
   \   00000018   0x460A             MOV      R2,R1
   \   0000001A   0x4603             MOV      R3,R0
   \   0000001C   0x429A             CMP      R2,R3
   \   0000001E   0xD202             BCS.N    ??RingByteBuffer_size_1
     42          		return self->end - self->start;
   \   00000020   0x1A40             SUBS     R0,R0,R1
   \   00000022   0xB280             UXTH     R0,R0
   \   00000024   0xBD10             POP      {R4,PC}
     43          	} else if (self->end < self->start) {
   \                     ??RingByteBuffer_size_1: (+1)
   \   00000026   0x4602             MOV      R2,R0
   \   00000028   0x460B             MOV      R3,R1
   \   0000002A   0x429A             CMP      R2,R3
   \   0000002C   0xD204             BCS.N    ??RingByteBuffer_size_2
     44          		return self->size - self->start + self->end;
   \   0000002E   0x88A2             LDRH     R2,[R4, #+4]
   \   00000030   0x1A51             SUBS     R1,R2,R1
   \   00000032   0x1840             ADDS     R0,R0,R1
   \   00000034   0xB280             UXTH     R0,R0
   \   00000036   0xBD10             POP      {R4,PC}
     45          	} else if (self->msbEnd != self->msbStart) {
   \                     ??RingByteBuffer_size_2: (+1)
   \   00000038   0x7AE0             LDRB     R0,[R4, #+11]
   \   0000003A   0x7AA1             LDRB     R1,[R4, #+10]
   \   0000003C   0x4288             CMP      R0,R1
   \   0000003E   0xD001             BEQ.N    ??RingByteBuffer_size_3
     46          		return self->size;
   \   00000040   0x88A0             LDRH     R0,[R4, #+4]
   \   00000042   0xBD10             POP      {R4,PC}
     47          	} else {
     48          		return 0;
   \                     ??RingByteBuffer_size_3: (+1)
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xBD10             POP      {R4,PC}          ;; return
     49          	}
     50          }
     51          

   \                                 In section .text, align 2, keep-with-next
     52          void RingByteBuffer_pushByte(RingByteBuffer *self, uint8_t byte)
     53          {
   \                     RingByteBuffer_pushByte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     54          	ASSERT(self);
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD106             BNE.N    ??RingByteBuffer_pushByte_0
   \   0000000A   0x2236             MOVS     R2,#+54
   \   0000000C   0x.... 0x....      ADR.W    R1,?_1
   \   00000010   0x.... 0x....      ADR.W    R0,?_0
   \   00000014   0x.... 0x....      BL       InvAssert
     55          
     56          	self->buffer[self->end] = byte;
   \                     ??RingByteBuffer_pushByte_0: (+1)
   \   00000018   0x6820             LDR      R0,[R4, #+0]
   \   0000001A   0x8921             LDRH     R1,[R4, #+8]
   \   0000001C   0x5445             STRB     R5,[R0, R1]
     57          
     58          	if (++self->end == self->size) {
   \   0000001E   0x8920             LDRH     R0,[R4, #+8]
   \   00000020   0x1C40             ADDS     R0,R0,#+1
   \   00000022   0x8120             STRH     R0,[R4, #+8]
   \   00000024   0x88A1             LDRH     R1,[R4, #+4]
   \   00000026   0xB280             UXTH     R0,R0
   \   00000028   0x4288             CMP      R0,R1
   \   0000002A   0xD105             BNE.N    ??RingByteBuffer_pushByte_1
     59          		self->msbEnd ^= 1;
   \   0000002C   0x7AE0             LDRB     R0,[R4, #+11]
   \   0000002E   0xF080 0x0001      EOR      R0,R0,#0x1
   \   00000032   0x72E0             STRB     R0,[R4, #+11]
     60          		self->end 	  = 0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x8120             STRH     R0,[R4, #+8]
     61          	}
     62          }
   \                     ??RingByteBuffer_pushByte_1: (+1)
   \   00000038   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     63          

   \                                 In section .text, align 2, keep-with-next
     64          uint8_t RingByteBuffer_popByte(RingByteBuffer *self)
     65          {
   \                     RingByteBuffer_popByte: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     66          	uint8_t byte;
     67          
     68          	ASSERT(self);
   \   00000004   0xD106             BNE.N    ??RingByteBuffer_popByte_0
   \   00000006   0x2244             MOVS     R2,#+68
   \   00000008   0x.... 0x....      ADR.W    R1,?_1
   \   0000000C   0x.... 0x....      ADR.W    R0,?_0
   \   00000010   0x.... 0x....      BL       InvAssert
     69          
     70          	byte = self->buffer[self->start];
   \                     ??RingByteBuffer_popByte_0: (+1)
   \   00000014   0x88E1             LDRH     R1,[R4, #+6]
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0x5C40             LDRB     R0,[R0, R1]
     71          
     72          	if (++self->start == self->size) {
   \   0000001A   0x1C49             ADDS     R1,R1,#+1
   \   0000001C   0x80E1             STRH     R1,[R4, #+6]
   \   0000001E   0x88A2             LDRH     R2,[R4, #+4]
   \   00000020   0xB289             UXTH     R1,R1
   \   00000022   0x4291             CMP      R1,R2
   \   00000024   0xD105             BNE.N    ??RingByteBuffer_popByte_1
     73          		self->msbStart ^= 1;
   \   00000026   0x7AA1             LDRB     R1,[R4, #+10]
   \   00000028   0xF081 0x0101      EOR      R1,R1,#0x1
   \   0000002C   0x72A1             STRB     R1,[R4, #+10]
     74          		self->start     = 0;
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x80E1             STRH     R1,[R4, #+6]
     75          	}
     76          
     77          	return byte;
   \                     ??RingByteBuffer_popByte_1: (+1)
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
     78          }
     79          

   \                                 In section .text, align 2, keep-with-next
     80          void RingByteBuffer_pushBuffer(RingByteBuffer *self, const void *data,
     81                                         uint16_t len)
     82          {
   \                     RingByteBuffer_pushBuffer: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
     83          	const uint8_t *byte;
     84          	uint16_t i;
     85          
     86          	ASSERT(self);
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD106             BNE.N    ??RingByteBuffer_pushBuffer_0
   \   0000000C   0x2256             MOVS     R2,#+86
   \   0000000E   0x.... 0x....      ADR.W    R1,?_1
   \   00000012   0x.... 0x....      ADR.W    R0,?_0
   \   00000016   0x.... 0x....      BL       InvAssert
     87          	ASSERT(data);
   \                     ??RingByteBuffer_pushBuffer_0: (+1)
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD106             BNE.N    ??RingByteBuffer_pushBuffer_1
   \   0000001E   0x2257             MOVS     R2,#+87
   \   00000020   0x.... 0x....      ADR.W    R1,?_1
   \   00000024   0x.... 0x....      ADR.W    R0,?_3
   \   00000028   0x.... 0x....      BL       InvAssert
     88          
     89          	byte = (const uint8_t *)data;
     90          
     91          	for (i = 0; i < len; ++i) {
   \                     ??RingByteBuffer_pushBuffer_1: (+1)
   \   0000002C   0x2700             MOVS     R7,#+0
   \   0000002E   0xE005             B.N      ??RingByteBuffer_pushBuffer_2
     92          		RingByteBuffer_pushByte(self, byte[i]);
   \                     ??RingByteBuffer_pushBuffer_3: (+1)
   \   00000030   0xB2BF             UXTH     R7,R7
   \   00000032   0x5DE9             LDRB     R1,[R5, R7]
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       RingByteBuffer_pushByte
     93          	}
   \   0000003A   0x1C7F             ADDS     R7,R7,#+1
   \                     ??RingByteBuffer_pushBuffer_2: (+1)
   \   0000003C   0x4638             MOV      R0,R7
   \   0000003E   0x4631             MOV      R1,R6
   \   00000040   0xB280             UXTH     R0,R0
   \   00000042   0x4288             CMP      R0,R1
   \   00000044   0xD3F4             BCC.N    ??RingByteBuffer_pushBuffer_3
     94          }
   \   00000046   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     95          

   \                                 In section .text, align 2, keep-with-next
     96          void RingByteBuffer_popBuffer(RingByteBuffer *self, void *data, uint16_t len)
     97          {
   \                     RingByteBuffer_popBuffer: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
     98          	uint8_t *byte;
     99          	uint16_t i;
    100          
    101          	ASSERT(self);
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD106             BNE.N    ??RingByteBuffer_popBuffer_0
   \   0000000C   0x2265             MOVS     R2,#+101
   \   0000000E   0x.... 0x....      ADR.W    R1,?_1
   \   00000012   0x.... 0x....      ADR.W    R0,?_0
   \   00000016   0x.... 0x....      BL       InvAssert
    102          	ASSERT(data);
   \                     ??RingByteBuffer_popBuffer_0: (+1)
   \   0000001A   0x2D00             CMP      R5,#+0
   \   0000001C   0xD106             BNE.N    ??RingByteBuffer_popBuffer_1
   \   0000001E   0x2266             MOVS     R2,#+102
   \   00000020   0x.... 0x....      ADR.W    R1,?_1
   \   00000024   0x.... 0x....      ADR.W    R0,?_3
   \   00000028   0x.... 0x....      BL       InvAssert
    103          
    104          	byte = (uint8_t *)data;
    105          
    106          	for (i = 0; i < len; ++i) {
   \                     ??RingByteBuffer_popBuffer_1: (+1)
   \   0000002C   0x2700             MOVS     R7,#+0
   \   0000002E   0xE005             B.N      ??RingByteBuffer_popBuffer_2
    107          		byte[i] = RingByteBuffer_popByte(self);
   \                     ??RingByteBuffer_popBuffer_3: (+1)
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       RingByteBuffer_popByte
   \   00000036   0xB2BF             UXTH     R7,R7
   \   00000038   0x55E8             STRB     R0,[R5, R7]
    108          	}
   \   0000003A   0x1C7F             ADDS     R7,R7,#+1
   \                     ??RingByteBuffer_popBuffer_2: (+1)
   \   0000003C   0x4638             MOV      R0,R7
   \   0000003E   0x4631             MOV      R1,R6
   \   00000040   0xB280             UXTH     R0,R0
   \   00000042   0x4288             CMP      R0,R1
   \   00000044   0xD3F4             BCC.N    ??RingByteBuffer_popBuffer_3
    109          }
   \   00000046   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x73 0x65          DC8 "self"
   \              0x6C 0x66    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x43 0x3A          DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \              0x5C 0x55    
   \              0x73 0x65    
   \              0x72 0x73    
   \   00000008   0x5C 0x70          DC8 5CH, 70H, 72H, 61H, 73H, 61H, 5CH, 44H
   \              0x72 0x61    
   \              0x73 0x61    
   \              0x5C 0x44    
   \   00000010   0x6F 0x63          DC8 6FH, 63H, 75H, 6DH, 65H, 6EH, 74H, 73H
   \              0x75 0x6D    
   \              0x65 0x6E    
   \              0x74 0x73    
   \   00000018   0x5C 0x31          DC8 5CH, 31H, 2EH, 30H, 2EH, 30H, 5CH, 73H
   \              0x2E 0x30    
   \              0x2E 0x30    
   \              0x5C 0x73    
   \   00000020   0x6F 0x75          DC8 6FH, 75H, 72H, 63H, 65H, 73H, 5CH, 49H
   \              0x72 0x63    
   \              0x65 0x73    
   \              0x5C 0x49    
   \   00000028   0x6E 0x76          DC8 6EH, 76H, 6EH, 5CH, 45H, 6DH, 62H, 55H
   \              0x6E 0x5C    
   \              0x45 0x6D    
   \              0x62 0x55    
   \   00000030   0x74 0x69          DC8 74H, 69H, 6CH, 73H, 5CH, 52H, 69H, 6EH
   \              0x6C 0x73    
   \              0x5C 0x52    
   \              0x69 0x6E    
   \   00000038   0x67 0x42          DC8 67H, 42H, 79H, 74H, 65H, 42H, 75H, 66H
   \              0x79 0x74    
   \              0x65 0x42    
   \              0x75 0x66    
   \   00000040   0x66 0x65          DC8 66H, 65H, 72H, 2EH, 63H, 0
   \              0x72 0x2E    
   \              0x63 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x70 0x42          DC8 "pBuffer"
   \              0x75 0x66    
   \              0x66 0x65    
   \              0x72 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x64 0x61          DC8 "data"
   \              0x74 0x61    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    110          
    111          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   RingByteBuffer_clear
         8   -> InvAssert
      16   RingByteBuffer_init
        16   -> InvAssert
         0   -> RingByteBuffer_clear
      24   RingByteBuffer_popBuffer
        24   -> InvAssert
        24   -> RingByteBuffer_popByte
       8   RingByteBuffer_popByte
         8   -> InvAssert
      24   RingByteBuffer_pushBuffer
        24   -> InvAssert
        24   -> RingByteBuffer_pushByte
      16   RingByteBuffer_pushByte
        16   -> InvAssert
       8   RingByteBuffer_size
         8   -> InvAssert


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?_0
      72  ?_1
       8  ?_2
       8  ?_3
      32  RingByteBuffer_clear
      54  RingByteBuffer_init
      72  RingByteBuffer_popBuffer
      52  RingByteBuffer_popByte
      72  RingByteBuffer_pushBuffer
      58  RingByteBuffer_pushByte
      72  RingByteBuffer_size

 
 508 bytes in section .text
 
 508 bytes of CODE memory

Errors: none
Warnings: none
