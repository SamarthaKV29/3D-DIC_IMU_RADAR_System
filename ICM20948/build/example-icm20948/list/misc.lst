###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.2.11706/W32 for ARM       22/Dec/2017  10:34:31
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\stm32f4x\STM32F4xx_StdPeriph_Driver\src\misc.c
#    Command line =  
#        C:\Users\prasa\Documents\1.0.0\sources\stm32f4x\STM32F4xx_StdPeriph_Driver\src\misc.c
#        -D IAR_COMPILER -D __inline=inline -D INV_MSG_ENABLE -D ASSERT -D
#        NUCLEO -D USE_STDPERIPH_DRIVER -D USE_HSE_BYPASS -D HSE_VALUE=8000000
#        -D STM32F411xE -lC
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list
#        --diag_suppress Pa050 -o
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 --silent --warnings_are_errors -e
#        --char_is_signed --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../board-hal\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Core\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Device\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/STM32F4xx_StdPeriph_Driver/inc\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/Images\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/DynamicProtocol\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list\misc.lst
#    Object file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj\misc.o
#
###############################################################################

C:\Users\prasa\Documents\1.0.0\sources\stm32f4x\STM32F4xx_StdPeriph_Driver\src\misc.c
      1          /**
      2            ******************************************************************************
      3            * @file    misc.c
      4            * @author  MCD Application Team
      5            * @version V1.6.1
      6            * @date    21-October-2015
      7            * @brief   This file provides all the miscellaneous firmware functions (add-on
      8            *          to CMSIS functions).
      9            *          
     10            *  @verbatim   
     11            *                               
     12            *          ===================================================================      
     13            *                        How to configure Interrupts using driver 
     14            *          ===================================================================      
     15            * 
     16            *            This section provide functions allowing to configure the NVIC interrupts (IRQ).
     17            *            The Cortex-M4 exceptions are managed by CMSIS functions.
     18            *
     19            *            1. Configure the NVIC Priority Grouping using NVIC_PriorityGroupConfig()
     20            *                function according to the following table.
     21           
     22            *  The table below gives the allowed values of the pre-emption priority and subpriority according
     23            *  to the Priority Grouping configuration performed by NVIC_PriorityGroupConfig function
     24            *    ==========================================================================================================================
     25            *      NVIC_PriorityGroup   | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority  |       Description
     26            *    ==========================================================================================================================
     27            *     NVIC_PriorityGroup_0  |                0                  |            0-15             | 0 bits for pre-emption priority
     28            *                           |                                   |                             | 4 bits for subpriority
     29            *    --------------------------------------------------------------------------------------------------------------------------
     30            *     NVIC_PriorityGroup_1  |                0-1                |            0-7              | 1 bits for pre-emption priority
     31            *                           |                                   |                             | 3 bits for subpriority
     32            *    --------------------------------------------------------------------------------------------------------------------------    
     33            *     NVIC_PriorityGroup_2  |                0-3                |            0-3              | 2 bits for pre-emption priority
     34            *                           |                                   |                             | 2 bits for subpriority
     35            *    --------------------------------------------------------------------------------------------------------------------------    
     36            *     NVIC_PriorityGroup_3  |                0-7                |            0-1              | 3 bits for pre-emption priority
     37            *                           |                                   |                             | 1 bits for subpriority
     38            *    --------------------------------------------------------------------------------------------------------------------------    
     39            *     NVIC_PriorityGroup_4  |                0-15               |            0                | 4 bits for pre-emption priority
     40            *                           |                                   |                             | 0 bits for subpriority                       
     41            *    ==========================================================================================================================     
     42            *
     43            *            2. Enable and Configure the priority of the selected IRQ Channels using NVIC_Init()  
     44            *
     45            * @note  When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
     46            *        The pending IRQ priority will be managed only by the subpriority.
     47            *
     48            * @note  IRQ priority order (sorted by highest to lowest priority):
     49            *         - Lowest pre-emption priority
     50            *         - Lowest subpriority
     51            *         - Lowest hardware priority (IRQ number)
     52            *
     53            *  @endverbatim
     54            *
     55            ******************************************************************************
     56            * @attention
     57            *
     58            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     59            *
     60            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     61            * You may not use this file except in compliance with the License.
     62            * You may obtain a copy of the License at:
     63            *
     64            *        http://www.st.com/software_license_agreement_liberty_v2
     65            *
     66            * Unless required by applicable law or agreed to in writing, software 
     67            * distributed under the License is distributed on an "AS IS" BASIS, 
     68            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     69            * See the License for the specific language governing permissions and
     70            * limitations under the License.
     71            *
     72            ******************************************************************************
     73            */
     74          
     75          /* Includes ------------------------------------------------------------------*/
     76          #include "misc.h"
     77          
     78          /** @addtogroup STM32F4xx_StdPeriph_Driver
     79            * @{
     80            */
     81          
     82          /** @defgroup MISC 
     83            * @brief MISC driver modules
     84            * @{
     85            */
     86          
     87          /* Private typedef -----------------------------------------------------------*/
     88          /* Private define ------------------------------------------------------------*/
     89          #define AIRCR_VECTKEY_MASK    ((uint32_t)0x05FA0000)
     90          
     91          /* Private macro -------------------------------------------------------------*/
     92          /* Private variables ---------------------------------------------------------*/
     93          /* Private function prototypes -----------------------------------------------*/
     94          /* Private functions ---------------------------------------------------------*/
     95          
     96          /** @defgroup MISC_Private_Functions
     97            * @{
     98            */
     99          
    100          /**
    101            * @brief  Configures the priority grouping: pre-emption priority and subpriority.
    102            * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. 
    103            *   This parameter can be one of the following values:
    104            *     @arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority
    105            *                                4 bits for subpriority
    106            *     @arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority
    107            *                                3 bits for subpriority
    108            *     @arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority
    109            *                                2 bits for subpriority
    110            *     @arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority
    111            *                                1 bits for subpriority
    112            *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
    113            *                                0 bits for subpriority
    114            * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
    115            *         The pending IRQ priority will be managed only by the subpriority. 
    116            * @retval None
    117            */

   \                                 In section .text, align 2, keep-with-next
    118          void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
    119          {
    120            /* Check the parameters */
    121            assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
    122            
    123            /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
    124            SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
   \                     NVIC_PriorityGroupConfig: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4  ;; 0x5fa0000
   \   00000002   0x4308             ORRS     R0,R1,R0
   \   00000004   0x....             LDR.N    R1,??DataTable4_1  ;; 0xe000ed0c
   \   00000006   0x6008             STR      R0,[R1, #+0]
    125          }
   \   00000008   0x4770             BX       LR               ;; return
    126          
    127          /**
    128            * @brief  Initializes the NVIC peripheral according to the specified
    129            *         parameters in the NVIC_InitStruct.
    130            * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
    131            *         function should be called before. 
    132            * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
    133            *         the configuration information for the specified NVIC peripheral.
    134            * @retval None
    135            */

   \                                 In section .text, align 2, keep-with-next
    136          void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
    137          {
   \                     NVIC_Init: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
    138            uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    139            
    140            /* Check the parameters */
    141            assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
    142            assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
    143            assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    144              
    145            if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
   \   00000002   0x7803             LDRB     R3,[R0, #+0]
   \   00000004   0x461A             MOV      R2,R3
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0xF990 0x4003      LDRSB    R4,[R0, #+3]
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xD01C             BEQ.N    ??NVIC_Init_0
    146            {
    147              /* Compute the Corresponding IRQ Priority --------------------------------*/    
    148              tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
   \   00000010   0x....             LDR.N    R3,??DataTable4_1  ;; 0xe000ed0c
   \   00000012   0x681B             LDR      R3,[R3, #+0]
   \   00000014   0xF403 0x63E0      AND      R3,R3,#0x700
   \   00000018   0xF5C3 0x63E0      RSB      R3,R3,#+1792
   \   0000001C   0x0A1B             LSRS     R3,R3,#+8
    149              tmppre = (0x4 - tmppriority);
    150              tmpsub = tmpsub >> tmppriority;
    151          
    152              tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    153              tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
    154                  
    155              tmppriority = tmppriority << 0x04;
    156                  
    157              NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
   \   0000001E   0x7844             LDRB     R4,[R0, #+1]
   \   00000020   0xF1C3 0x0504      RSB      R5,R3,#+4
   \   00000024   0x40AC             LSLS     R4,R4,R5
   \   00000026   0x7885             LDRB     R5,[R0, #+2]
   \   00000028   0x260F             MOVS     R6,#+15
   \   0000002A   0x411E             ASRS     R6,R6,R3
   \   0000002C   0xEA06 0x0305      AND      R3,R6,R5
   \   00000030   0x4323             ORRS     R3,R3,R4
   \   00000032   0x011B             LSLS     R3,R3,#+4
   \   00000034   0x....             LDR.N    R4,??DataTable4_2  ;; 0xe000e400
   \   00000036   0x54A3             STRB     R3,[R4, R2]
    158              
    159              /* Enable the Selected IRQ Channels --------------------------------------*/
    160              NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    161                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0xF000 0x021F      AND      R2,R0,#0x1F
   \   0000003E   0x4091             LSLS     R1,R1,R2
   \   00000040   0x....             LDR.N    R2,??DataTable4_3  ;; 0xe000e100
   \   00000042   0x1140             ASRS     R0,R0,#+5
   \   00000044   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000048   0xE007             B.N      ??NVIC_Init_1
    162            }
    163            else
    164            {
    165              /* Disable the Selected IRQ Channels -------------------------------------*/
    166              NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    167                (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
   \                     ??NVIC_Init_0: (+1)
   \   0000004A   0xF003 0x001F      AND      R0,R3,#0x1F
   \   0000004E   0xFA01 0xF000      LSL      R0,R1,R0
   \   00000052   0x....             LDR.N    R1,??DataTable4_4  ;; 0xe000e180
   \   00000054   0x1152             ASRS     R2,R2,#+5
   \   00000056   0xF841 0x0022      STR      R0,[R1, R2, LSL #+2]
    168            }
    169          }
   \                     ??NVIC_Init_1: (+1)
   \   0000005A   0xBC70             POP      {R4-R6}
   \   0000005C   0x4770             BX       LR               ;; return
    170          
    171          /**
    172            * @brief  Sets the vector table location and Offset.
    173            * @param  NVIC_VectTab: specifies if the vector table is in RAM or FLASH memory.
    174            *   This parameter can be one of the following values:
    175            *     @arg NVIC_VectTab_RAM: Vector Table in internal SRAM.
    176            *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
    177            * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
    178            * @retval None
    179            */

   \                                 In section .text, align 2, keep-with-next
    180          void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
    181          { 
    182            /* Check the parameters */
    183            assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
    184            assert_param(IS_NVIC_OFFSET(Offset));  
    185             
    186            SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
   \                     NVIC_SetVectorTable: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable4_5  ;; 0x1fffff80
   \   00000002   0x4011             ANDS     R1,R2,R1
   \   00000004   0x4308             ORRS     R0,R1,R0
   \   00000006   0x....             LDR.N    R1,??DataTable4_6  ;; 0xe000ed08
   \   00000008   0x6008             STR      R0,[R1, #+0]
    187          }
   \   0000000A   0x4770             BX       LR               ;; return
    188          
    189          /**
    190            * @brief  Selects the condition for the system to enter low power mode.
    191            * @param  LowPowerMode: Specifies the new mode for the system to enter low power mode.
    192            *   This parameter can be one of the following values:
    193            *     @arg NVIC_LP_SEVONPEND: Low Power SEV on Pend.
    194            *     @arg NVIC_LP_SLEEPDEEP: Low Power DEEPSLEEP request.
    195            *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
    196            * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
    197            * @retval None
    198            */

   \                                 In section .text, align 2, keep-with-next
    199          void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
    200          {
    201            /* Check the parameters */
    202            assert_param(IS_NVIC_LP(LowPowerMode));
    203            assert_param(IS_FUNCTIONAL_STATE(NewState));  
    204            
    205            if (NewState != DISABLE)
   \                     NVIC_SystemLPConfig: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable4_7  ;; 0xe000ed10
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0x6811             LDR      R1,[R2, #+0]
   \   00000006   0xD002             BEQ.N    ??NVIC_SystemLPConfig_0
    206            {
    207              SCB->SCR |= LowPowerMode;
   \   00000008   0x4308             ORRS     R0,R0,R1
   \   0000000A   0x6010             STR      R0,[R2, #+0]
   \   0000000C   0x4770             BX       LR
    208            }
    209            else
    210            {
    211              SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
   \                     ??NVIC_SystemLPConfig_0: (+1)
   \   0000000E   0xEA21 0x0000      BIC      R0,R1,R0
   \   00000012   0x6010             STR      R0,[R2, #+0]
    212            }
    213          }
   \   00000014   0x4770             BX       LR               ;; return
    214          
    215          /**
    216            * @brief  Configures the SysTick clock source.
    217            * @param  SysTick_CLKSource: specifies the SysTick clock source.
    218            *   This parameter can be one of the following values:
    219            *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
    220            *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
    221            * @retval None
    222            */

   \                                 In section .text, align 2, keep-with-next
    223          void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
    224          {
    225            /* Check the parameters */
    226            assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
    227            if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
   \                     SysTick_CLKSourceConfig: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4_8  ;; 0xe000e010
   \   00000002   0x2804             CMP      R0,#+4
   \   00000004   0x6808             LDR      R0,[R1, #+0]
   \   00000006   0xD103             BNE.N    ??SysTick_CLKSourceConfig_0
    228            {
    229              SysTick->CTRL |= SysTick_CLKSource_HCLK;
   \   00000008   0xF040 0x0004      ORR      R0,R0,#0x4
   \   0000000C   0x6008             STR      R0,[R1, #+0]
   \   0000000E   0x4770             BX       LR
    230            }
    231            else
    232            {
    233              SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
   \                     ??SysTick_CLKSourceConfig_0: (+1)
   \   00000010   0xF020 0x0004      BIC      R0,R0,#0x4
   \   00000014   0x6008             STR      R0,[R1, #+0]
    234            }
    235          }
   \   00000016   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x05FA0000         DC32     0x5fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0xE000ED0C         DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0xE000E400         DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x1FFFFF80         DC32     0x1fffff80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0xE000ED10         DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0xE000E010         DC32     0xe000e010
    236          
    237          /**
    238            * @}
    239            */
    240          
    241          /**
    242            * @}
    243            */
    244          
    245          /**
    246            * @}
    247            */
    248          
    249          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   NVIC_Init
       0   NVIC_PriorityGroupConfig
       0   NVIC_SetVectorTable
       0   NVIC_SystemLPConfig
       0   SysTick_CLKSourceConfig


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
      94  NVIC_Init
      10  NVIC_PriorityGroupConfig
      12  NVIC_SetVectorTable
      22  NVIC_SystemLPConfig
      24  SysTick_CLKSourceConfig

 
 198 bytes in section .text
 
 198 bytes of CODE memory

Errors: none
Warnings: none
