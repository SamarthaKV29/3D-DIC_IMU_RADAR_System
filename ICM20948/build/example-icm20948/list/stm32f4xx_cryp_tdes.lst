###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.2.11706/W32 for ARM       22/Dec/2017  10:34:34
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\stm32f4x\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_cryp_tdes.c
#    Command line =  
#        C:\Users\prasa\Documents\1.0.0\sources\stm32f4x\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_cryp_tdes.c
#        -D IAR_COMPILER -D __inline=inline -D INV_MSG_ENABLE -D ASSERT -D
#        NUCLEO -D USE_STDPERIPH_DRIVER -D USE_HSE_BYPASS -D HSE_VALUE=8000000
#        -D STM32F411xE -lC
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list
#        --diag_suppress Pa050 -o
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 --silent --warnings_are_errors -e
#        --char_is_signed --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../board-hal\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Core\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Device\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/STM32F4xx_StdPeriph_Driver/inc\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/Images\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/DynamicProtocol\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list\stm32f4xx_cryp_tdes.lst
#    Object file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj\stm32f4xx_cryp_tdes.o
#
###############################################################################

C:\Users\prasa\Documents\1.0.0\sources\stm32f4x\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_cryp_tdes.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_cryp_tdes.c
      4            * @author  MCD Application Team
      5            * @version V1.6.1
      6            * @date    21-October-2015
      7            * @brief   This file provides high level functions to encrypt and decrypt an 
      8            *          input message using TDES in ECB/CBC modes .
      9            *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
     10            *          peripheral.
     11            *
     12          @verbatim
     13          
     14           ===============================================================================
     15                                     ##### How to use this driver #####
     16           ===============================================================================
     17           [..]
     18             (#) Enable The CRYP controller clock using 
     19                 RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
     20            
     21             (#) Encrypt and decrypt using TDES in ECB Mode using CRYP_TDES_ECB() function.
     22            
     23             (#) Encrypt and decrypt using TDES in CBC Mode using CRYP_TDES_CBC() function.
     24            
     25          @endverbatim
     26            *
     27            ******************************************************************************
     28            * @attention
     29            *
     30            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     31            *
     32            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     33            * You may not use this file except in compliance with the License.
     34            * You may obtain a copy of the License at:
     35            *
     36            *        http://www.st.com/software_license_agreement_liberty_v2
     37            *
     38            * Unless required by applicable law or agreed to in writing, software 
     39            * distributed under the License is distributed on an "AS IS" BASIS, 
     40            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     41            * See the License for the specific language governing permissions and
     42            * limitations under the License.
     43            *
     44            ******************************************************************************
     45            */ 
     46          
     47          /* Includes ------------------------------------------------------------------*/
     48          #include "stm32f4xx_cryp.h"
     49          
     50          
     51          /** @addtogroup STM32F4xx_StdPeriph_Driver
     52            * @{
     53            */
     54          
     55          /** @defgroup CRYP 
     56            * @brief CRYP driver modules
     57            * @{
     58            */
     59          
     60          /* Private typedef -----------------------------------------------------------*/
     61          /* Private define ------------------------------------------------------------*/
     62          #define TDESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
     63          
     64          /* Private macro -------------------------------------------------------------*/
     65          /* Private variables ---------------------------------------------------------*/
     66          /* Private function prototypes -----------------------------------------------*/
     67          /* Private functions ---------------------------------------------------------*/
     68          
     69          
     70          /** @defgroup CRYP_Private_Functions
     71            * @{
     72            */ 
     73          
     74          /** @defgroup CRYP_Group7 High Level TDES functions
     75           *  @brief   High Level TDES functions 
     76           *
     77          @verbatim   
     78           ===============================================================================
     79                                ##### High Level TDES functions #####
     80           ===============================================================================
     81          
     82          @endverbatim
     83            * @{
     84            */
     85          
     86          /**
     87            * @brief  Encrypt and decrypt using TDES in ECB Mode
     88            * @param  Mode: encryption or decryption Mode.
     89            *           This parameter can be one of the following values:
     90            *            @arg MODE_ENCRYPT: Encryption
     91            *            @arg MODE_DECRYPT: Decryption
     92            * @param  Key: Key used for TDES algorithm.
     93            * @param  Ilength: length of the Input buffer, must be a multiple of 8.
     94            * @param  Input: pointer to the Input buffer.
     95            * @param  Output: pointer to the returned buffer.
     96            * @retval An ErrorStatus enumeration value:
     97            *          - SUCCESS: Operation done
     98            *          - ERROR: Operation failed
     99            */

   \                                 In section .text, align 2, keep-with-next
    100          ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
    101                                    uint32_t Ilength, uint8_t *Output)
    102          {
   \                     CRYP_TDES_ECB: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB08E             SUB      SP,SP,#+56
   \   00000006   0x4682             MOV      R10,R0
   \   00000008   0x4689             MOV      R9,R1
   \   0000000A   0x4690             MOV      R8,R2
   \   0000000C   0x461C             MOV      R4,R3
    103            CRYP_InitTypeDef TDES_CRYP_InitStructure;
    104            CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
    105            __IO uint32_t counter = 0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9000             STR      R0,[SP, #+0]
    106            uint32_t busystatus = 0;
    107            ErrorStatus status = SUCCESS;
   \   00000012   0x2501             MOVS     R5,#+1
    108            uint32_t keyaddr    = (uint32_t)Key;
    109            uint32_t inputaddr  = (uint32_t)Input;
    110            uint32_t outputaddr = (uint32_t)Output;
   \   00000014   0x9E16             LDR      R6,[SP, #+88]
    111            uint32_t i = 0;
   \   00000016   0x4607             MOV      R7,R0
    112          
    113            /* Crypto structures initialisation*/
    114            CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
   \   00000018   0xA805             ADD      R0,SP,#+20
   \   0000001A   0x.... 0x....      BL       CRYP_KeyStructInit
    115          
    116            /* Crypto Init for Encryption process */
    117            if(Mode == MODE_ENCRYPT) /* TDES encryption */
   \   0000001E   0xF1BA 0x0F01      CMP      R10,#+1
   \   00000022   0xD102             BNE.N    ??CRYP_TDES_ECB_0
    118            {
    119               TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
   \   00000024   0x4638             MOV      R0,R7
   \   00000026   0x9001             STR      R0,[SP, #+4]
   \   00000028   0xE001             B.N      ??CRYP_TDES_ECB_1
    120            }
    121            else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
    122            {
    123               TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
   \                     ??CRYP_TDES_ECB_0: (+1)
   \   0000002A   0x2004             MOVS     R0,#+4
   \   0000002C   0x9001             STR      R0,[SP, #+4]
    124            }
    125          
    126            TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
   \                     ??CRYP_TDES_ECB_1: (+1)
   \   0000002E   0x4638             MOV      R0,R7
   \   00000030   0x9002             STR      R0,[SP, #+8]
    127            TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
   \   00000032   0x2080             MOVS     R0,#+128
   \   00000034   0x9003             STR      R0,[SP, #+12]
    128            CRYP_Init(&TDES_CRYP_InitStructure);
   \   00000036   0xA801             ADD      R0,SP,#+4
   \   00000038   0x.... 0x....      BL       CRYP_Init
    129          
    130            /* Key Initialisation */
    131            TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
   \   0000003C   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000040   0xBA00             REV      R0,R0
   \   00000042   0x9007             STR      R0,[SP, #+28]
    132            keyaddr+=4;
   \   00000044   0xF109 0x0004      ADD      R0,R9,#+4
    133            TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
   \   00000048   0x6801             LDR      R1,[R0, #+0]
   \   0000004A   0xBA09             REV      R1,R1
   \   0000004C   0x9108             STR      R1,[SP, #+32]
    134            keyaddr+=4;
   \   0000004E   0x1D00             ADDS     R0,R0,#+4
    135            TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
   \   00000050   0x6801             LDR      R1,[R0, #+0]
   \   00000052   0xBA09             REV      R1,R1
   \   00000054   0x9109             STR      R1,[SP, #+36]
    136            keyaddr+=4;
   \   00000056   0x1D00             ADDS     R0,R0,#+4
    137            TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
   \   00000058   0x6801             LDR      R1,[R0, #+0]
   \   0000005A   0xBA09             REV      R1,R1
   \   0000005C   0x910A             STR      R1,[SP, #+40]
    138            keyaddr+=4;
   \   0000005E   0x1D00             ADDS     R0,R0,#+4
    139            TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
   \   00000060   0x6801             LDR      R1,[R0, #+0]
   \   00000062   0xBA09             REV      R1,R1
   \   00000064   0x910B             STR      R1,[SP, #+44]
    140            keyaddr+=4;
    141            TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
   \   00000066   0x1D00             ADDS     R0,R0,#+4
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0xBA00             REV      R0,R0
   \   0000006C   0x900C             STR      R0,[SP, #+48]
    142            CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
   \   0000006E   0xA805             ADD      R0,SP,#+20
   \   00000070   0x.... 0x....      BL       CRYP_KeyInit
    143          
    144            /* Flush IN/OUT FIFO */
    145            CRYP_FIFOFlush();
   \   00000074   0x.... 0x....      BL       CRYP_FIFOFlush
    146          
    147            /* Enable Crypto processor */
    148            CRYP_Cmd(ENABLE);
   \   00000078   0x4628             MOV      R0,R5
   \   0000007A   0x.... 0x....      BL       CRYP_Cmd
    149          
    150            if(CRYP_GetCmdStatus() == DISABLE)
   \   0000007E   0x.... 0x....      BL       CRYP_GetCmdStatus
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xD10A             BNE.N    ??CRYP_TDES_ECB_2
    151            {
    152              /* The CRYP peripheral clock is not enabled or the device doesn't embed 
    153                 the CRYP peripheral (please check the device sales type. */
    154              return(ERROR);
   \   00000086   0x4638             MOV      R0,R7
   \   00000088   0xE02E             B.N      ??CRYP_TDES_ECB_3
    155            }
    156            for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
    157            {
    158              /* Write the Input block in the Input FIFO */
    159              CRYP_DataIn(*(uint32_t*)(inputaddr));
    160              inputaddr+=4;
    161              CRYP_DataIn(*(uint32_t*)(inputaddr));
    162              inputaddr+=4;
    163          
    164              /* Wait until the complete message has been processed */
    165              counter = 0;
    166              do
    167              {
    168                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
    169                counter++;
    170              }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
    171          
    172              if (busystatus != RESET)
    173              {
    174                 status = ERROR;
    175              }
    176              else
    177              {
    178          
    179                /* Read the Output block from the Output FIFO */
    180                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \                     ??CRYP_TDES_ECB_4: (+1)
   \   0000008A   0x.... 0x....      BL       CRYP_DataOut
   \   0000008E   0x6030             STR      R0,[R6, #+0]
    181                outputaddr+=4;
   \   00000090   0x1D36             ADDS     R6,R6,#+4
    182                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \   00000092   0x.... 0x....      BL       CRYP_DataOut
   \   00000096   0x6030             STR      R0,[R6, #+0]
    183                outputaddr+=4;
   \   00000098   0x1D36             ADDS     R6,R6,#+4
    184              }
   \                     ??CRYP_TDES_ECB_5: (+1)
   \   0000009A   0x3708             ADDS     R7,R7,#+8
   \                     ??CRYP_TDES_ECB_2: (+1)
   \   0000009C   0x42A7             CMP      R7,R4
   \   0000009E   0xD21F             BCS.N    ??CRYP_TDES_ECB_6
   \   000000A0   0x0028             MOVS     R0,R5
   \   000000A2   0xD01D             BEQ.N    ??CRYP_TDES_ECB_6
   \   000000A4   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   000000A8   0x.... 0x....      BL       CRYP_DataIn
   \   000000AC   0xF108 0x0804      ADD      R8,R8,#+4
   \   000000B0   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   000000B4   0x.... 0x....      BL       CRYP_DataIn
   \   000000B8   0xF108 0x0804      ADD      R8,R8,#+4
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \                     ??CRYP_TDES_ECB_7: (+1)
   \   000000C0   0x2010             MOVS     R0,#+16
   \   000000C2   0x.... 0x....      BL       CRYP_GetFlagStatus
   \   000000C6   0x9900             LDR      R1,[SP, #+0]
   \   000000C8   0x1C49             ADDS     R1,R1,#+1
   \   000000CA   0x9100             STR      R1,[SP, #+0]
   \   000000CC   0x9900             LDR      R1,[SP, #+0]
   \   000000CE   0xF5B1 0x3F80      CMP      R1,#+65536
   \   000000D2   0xD001             BEQ.N    ??CRYP_TDES_ECB_8
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xD1F3             BNE.N    ??CRYP_TDES_ECB_7
   \                     ??CRYP_TDES_ECB_8: (+1)
   \   000000D8   0x2800             CMP      R0,#+0
   \   000000DA   0xD0D6             BEQ.N    ??CRYP_TDES_ECB_4
   \   000000DC   0x2500             MOVS     R5,#+0
   \   000000DE   0xE7DC             B.N      ??CRYP_TDES_ECB_5
    185            }
    186          
    187            /* Disable Crypto */
    188            CRYP_Cmd(DISABLE);
   \                     ??CRYP_TDES_ECB_6: (+1)
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0x.... 0x....      BL       CRYP_Cmd
    189          
    190            return status; 
   \   000000E6   0x4628             MOV      R0,R5
   \                     ??CRYP_TDES_ECB_3: (+1)
   \   000000E8   0xB00E             ADD      SP,SP,#+56
   \   000000EA   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    191          }
    192          
    193          /**
    194            * @brief  Encrypt and decrypt using TDES in CBC Mode
    195            * @param  Mode: encryption or decryption Mode.
    196            *           This parameter can be one of the following values:
    197            *            @arg MODE_ENCRYPT: Encryption
    198            *            @arg MODE_DECRYPT: Decryption
    199            * @param  Key: Key used for TDES algorithm.
    200            * @param  InitVectors: Initialisation Vectors used for TDES algorithm.
    201            * @param  Input: pointer to the Input buffer.
    202            * @param  Ilength: length of the Input buffer, must be a multiple of 8.
    203            * @param  Output: pointer to the returned buffer.
    204            * @retval An ErrorStatus enumeration value:
    205            *          - SUCCESS: Operation done
    206            *          - ERROR: Operation failed
    207            */

   \                                 In section .text, align 2, keep-with-next
    208          ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
    209                                    uint8_t *Input, uint32_t Ilength, uint8_t *Output)
    210          {
   \                     CRYP_TDES_CBC: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB092             SUB      SP,SP,#+72
   \   00000006   0x4682             MOV      R10,R0
   \   00000008   0x4688             MOV      R8,R1
   \   0000000A   0x4691             MOV      R9,R2
    211            CRYP_InitTypeDef TDES_CRYP_InitStructure;
    212            CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
    213            CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
    214            __IO uint32_t counter = 0;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x9000             STR      R0,[SP, #+0]
    215            uint32_t busystatus = 0;
    216            ErrorStatus status = SUCCESS;
   \   00000010   0x2501             MOVS     R5,#+1
    217            uint32_t keyaddr    = (uint32_t)Key;
    218            uint32_t inputaddr  = (uint32_t)Input;
   \   00000012   0x461C             MOV      R4,R3
    219            uint32_t outputaddr = (uint32_t)Output;
   \   00000014   0x9F1B             LDR      R7,[SP, #+108]
    220            uint32_t ivaddr     = (uint32_t)InitVectors;
    221            uint32_t i = 0;
   \   00000016   0x4606             MOV      R6,R0
    222          
    223            /* Crypto structures initialisation*/
    224            CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
   \   00000018   0xA809             ADD      R0,SP,#+36
   \   0000001A   0x.... 0x....      BL       CRYP_KeyStructInit
    225          
    226            /* Crypto Init for Encryption process */
    227            if(Mode == MODE_ENCRYPT) /* TDES encryption */
   \   0000001E   0xF1BA 0x0F01      CMP      R10,#+1
   \   00000022   0xD102             BNE.N    ??CRYP_TDES_CBC_0
    228            {
    229              TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
   \   00000024   0x4630             MOV      R0,R6
   \   00000026   0x9001             STR      R0,[SP, #+4]
   \   00000028   0xE001             B.N      ??CRYP_TDES_CBC_1
    230            }
    231            else
    232            {
    233              TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
   \                     ??CRYP_TDES_CBC_0: (+1)
   \   0000002A   0x2004             MOVS     R0,#+4
   \   0000002C   0x9001             STR      R0,[SP, #+4]
    234            }
    235            TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
   \                     ??CRYP_TDES_CBC_1: (+1)
   \   0000002E   0x2008             MOVS     R0,#+8
   \   00000030   0x9002             STR      R0,[SP, #+8]
    236            TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
   \   00000032   0x2080             MOVS     R0,#+128
   \   00000034   0x9003             STR      R0,[SP, #+12]
    237          
    238            CRYP_Init(&TDES_CRYP_InitStructure);
   \   00000036   0xA801             ADD      R0,SP,#+4
   \   00000038   0x.... 0x....      BL       CRYP_Init
    239          
    240            /* Key Initialisation */
    241            TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
   \   0000003C   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000040   0xBA00             REV      R0,R0
   \   00000042   0x900B             STR      R0,[SP, #+44]
    242            keyaddr+=4;
   \   00000044   0xF108 0x0004      ADD      R0,R8,#+4
    243            TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
   \   00000048   0x6801             LDR      R1,[R0, #+0]
   \   0000004A   0xBA09             REV      R1,R1
   \   0000004C   0x910C             STR      R1,[SP, #+48]
    244            keyaddr+=4;
   \   0000004E   0x1D00             ADDS     R0,R0,#+4
    245            TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
   \   00000050   0x6801             LDR      R1,[R0, #+0]
   \   00000052   0xBA09             REV      R1,R1
   \   00000054   0x910D             STR      R1,[SP, #+52]
    246            keyaddr+=4;
   \   00000056   0x1D00             ADDS     R0,R0,#+4
    247            TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
   \   00000058   0x6801             LDR      R1,[R0, #+0]
   \   0000005A   0xBA09             REV      R1,R1
   \   0000005C   0x910E             STR      R1,[SP, #+56]
    248            keyaddr+=4;
   \   0000005E   0x1D00             ADDS     R0,R0,#+4
    249            TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
   \   00000060   0x6801             LDR      R1,[R0, #+0]
   \   00000062   0xBA09             REV      R1,R1
   \   00000064   0x910F             STR      R1,[SP, #+60]
    250            keyaddr+=4;
    251            TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
   \   00000066   0x1D00             ADDS     R0,R0,#+4
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0xBA00             REV      R0,R0
   \   0000006C   0x9010             STR      R0,[SP, #+64]
    252            CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
   \   0000006E   0xA809             ADD      R0,SP,#+36
   \   00000070   0x.... 0x....      BL       CRYP_KeyInit
    253          
    254            /* Initialization Vectors */
    255            TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
   \   00000074   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000078   0xBA00             REV      R0,R0
   \   0000007A   0x9005             STR      R0,[SP, #+20]
    256            ivaddr+=4;
    257            TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
   \   0000007C   0xF109 0x0004      ADD      R0,R9,#+4
   \   00000080   0x6800             LDR      R0,[R0, #+0]
   \   00000082   0xBA00             REV      R0,R0
   \   00000084   0x9006             STR      R0,[SP, #+24]
    258            CRYP_IVInit(&TDES_CRYP_IVInitStructure);
   \   00000086   0xA805             ADD      R0,SP,#+20
   \   00000088   0x.... 0x....      BL       CRYP_IVInit
    259          
    260            /* Flush IN/OUT FIFO */
    261            CRYP_FIFOFlush();
   \   0000008C   0x.... 0x....      BL       CRYP_FIFOFlush
    262          
    263            /* Enable Crypto processor */
    264            CRYP_Cmd(ENABLE);
   \   00000090   0x4628             MOV      R0,R5
   \   00000092   0x.... 0x....      BL       CRYP_Cmd
    265          
    266            if(CRYP_GetCmdStatus() == DISABLE)
   \   00000096   0x.... 0x....      BL       CRYP_GetCmdStatus
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD12F             BNE.N    ??CRYP_TDES_CBC_2
    267            {
    268              /* The CRYP peripheral clock is not enabled or the device doesn't embed 
    269                 the CRYP peripheral (please check the device sales type. */
    270              return(ERROR);
   \   0000009E   0x4630             MOV      R0,R6
   \   000000A0   0xE02A             B.N      ??CRYP_TDES_CBC_3
    271            }
    272            
    273            for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
    274            {
    275              /* Write the Input block in the Input FIFO */
    276              CRYP_DataIn(*(uint32_t*)(inputaddr));
    277              inputaddr+=4;
    278              CRYP_DataIn(*(uint32_t*)(inputaddr));
    279              inputaddr+=4;
    280          
    281              /* Wait until the complete message has been processed */
    282              counter = 0;
    283              do
    284              {
    285                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
    286                counter++;
    287              }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
    288          
    289              if (busystatus != RESET)
    290             {
    291                 status = ERROR;
    292              }
    293              else
    294              {
    295          
    296                /* Read the Output block from the Output FIFO */
    297                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \                     ??CRYP_TDES_CBC_4: (+1)
   \   000000A2   0x.... 0x....      BL       CRYP_DataOut
   \   000000A6   0x6038             STR      R0,[R7, #+0]
    298                outputaddr+=4;
   \   000000A8   0x1D3F             ADDS     R7,R7,#+4
    299                *(uint32_t*)(outputaddr) = CRYP_DataOut();
   \   000000AA   0x.... 0x....      BL       CRYP_DataOut
   \   000000AE   0x6038             STR      R0,[R7, #+0]
    300                outputaddr+=4;
   \   000000B0   0x1D3F             ADDS     R7,R7,#+4
    301              }
   \                     ??CRYP_TDES_CBC_5: (+1)
   \   000000B2   0x3608             ADDS     R6,R6,#+8
   \                     ??CRYP_TDES_CBC_6: (+1)
   \   000000B4   0x4546             CMP      R6,R8
   \   000000B6   0xD21B             BCS.N    ??CRYP_TDES_CBC_7
   \   000000B8   0x0028             MOVS     R0,R5
   \   000000BA   0xD019             BEQ.N    ??CRYP_TDES_CBC_7
   \   000000BC   0x6820             LDR      R0,[R4, #+0]
   \   000000BE   0x.... 0x....      BL       CRYP_DataIn
   \   000000C2   0x1D24             ADDS     R4,R4,#+4
   \   000000C4   0x6820             LDR      R0,[R4, #+0]
   \   000000C6   0x.... 0x....      BL       CRYP_DataIn
   \   000000CA   0x1D24             ADDS     R4,R4,#+4
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0x9000             STR      R0,[SP, #+0]
   \                     ??CRYP_TDES_CBC_8: (+1)
   \   000000D0   0x2010             MOVS     R0,#+16
   \   000000D2   0x.... 0x....      BL       CRYP_GetFlagStatus
   \   000000D6   0x9900             LDR      R1,[SP, #+0]
   \   000000D8   0x1C49             ADDS     R1,R1,#+1
   \   000000DA   0x9100             STR      R1,[SP, #+0]
   \   000000DC   0x9900             LDR      R1,[SP, #+0]
   \   000000DE   0xF5B1 0x3F80      CMP      R1,#+65536
   \   000000E2   0xD001             BEQ.N    ??CRYP_TDES_CBC_9
   \   000000E4   0x2800             CMP      R0,#+0
   \   000000E6   0xD1F3             BNE.N    ??CRYP_TDES_CBC_8
   \                     ??CRYP_TDES_CBC_9: (+1)
   \   000000E8   0x2800             CMP      R0,#+0
   \   000000EA   0xD0DA             BEQ.N    ??CRYP_TDES_CBC_4
   \   000000EC   0x2500             MOVS     R5,#+0
   \   000000EE   0xE7E0             B.N      ??CRYP_TDES_CBC_5
    302            }
    303          
    304            /* Disable Crypto */
    305            CRYP_Cmd(DISABLE);
   \                     ??CRYP_TDES_CBC_7: (+1)
   \   000000F0   0x2000             MOVS     R0,#+0
   \   000000F2   0x.... 0x....      BL       CRYP_Cmd
    306          
    307            return status; 
   \   000000F6   0x4628             MOV      R0,R5
   \                     ??CRYP_TDES_CBC_3: (+1)
   \   000000F8   0xB012             ADD      SP,SP,#+72
   \   000000FA   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??CRYP_TDES_CBC_2: (+1)
   \   000000FE   0xF8DD 0x8068      LDR      R8,[SP, #+104]
   \   00000102   0xE7D7             B.N      ??CRYP_TDES_CBC_6
    308          }
    309          /**
    310            * @}
    311            */ 
    312          
    313          /**
    314            * @}
    315            */ 
    316          
    317          /**
    318            * @}
    319            */ 
    320          
    321          /**
    322            * @}
    323            */ 
    324          
    325          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     104   CRYP_TDES_CBC
       104   -> CRYP_Cmd
       104   -> CRYP_DataIn
       104   -> CRYP_DataOut
       104   -> CRYP_FIFOFlush
       104   -> CRYP_GetCmdStatus
       104   -> CRYP_GetFlagStatus
       104   -> CRYP_IVInit
       104   -> CRYP_Init
       104   -> CRYP_KeyInit
       104   -> CRYP_KeyStructInit
      88   CRYP_TDES_ECB
        88   -> CRYP_Cmd
        88   -> CRYP_DataIn
        88   -> CRYP_DataOut
        88   -> CRYP_FIFOFlush
        88   -> CRYP_GetCmdStatus
        88   -> CRYP_GetFlagStatus
        88   -> CRYP_Init
        88   -> CRYP_KeyInit
        88   -> CRYP_KeyStructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     260  CRYP_TDES_CBC
     238  CRYP_TDES_ECB

 
 498 bytes in section .text
 
 498 bytes of CODE memory

Errors: none
Warnings: none
