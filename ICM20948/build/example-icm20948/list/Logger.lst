###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.2.11706/W32 for ARM       22/Dec/2017  10:34:31
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\Invn\EmbUtils\Logger.c
#    Command line =  
#        C:\Users\prasa\Documents\1.0.0\sources\Invn\EmbUtils\Logger.c -D
#        IAR_COMPILER -D __inline=inline -D INV_MSG_ENABLE -D ASSERT -D NUCLEO
#        -D USE_STDPERIPH_DRIVER -D USE_HSE_BYPASS -D HSE_VALUE=8000000 -D
#        STM32F411xE -lC
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list
#        --diag_suppress Pa050 -o
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 --silent --warnings_are_errors -e
#        --char_is_signed --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../board-hal\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Core\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Device\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/STM32F4xx_StdPeriph_Driver/inc\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/Images\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/DynamicProtocol\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list\Logger.lst
#    Object file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj\Logger.o
#
###############################################################################

C:\Users\prasa\Documents\1.0.0\sources\Invn\EmbUtils\Logger.c
      1          /*
      2              Copyright (c) 2014-2015 InvenSense Inc. Portions Copyright (c) 2014-2015 Movea. All rights reserved.
      3          
      4              This software, related documentation and any modifications thereto (collectively "Software") is subject
      5              to InvenSense and its licensors' intellectual property rights under U.S. and international copyright and
      6              other intellectual property rights laws.
      7          
      8              InvenSense and its licensors retain all intellectual property and proprietary rights in and to the Software
      9              and any use, reproduction, disclosure or distribution of the Software without an express license
     10              agreement from InvenSense is strictly prohibited.
     11          */
     12          
     13          #include "Logger.h"
     14          #include "InvFormat.h"
     15          #include "InvAssert.h"
     16          #include "RingByteBuffer.h"
     17          

   \                                 In section .data, align 4
     18          static uint8_t            sLoggerLevel    = LOG_LEVEL;
     19          static volatile uint8_t * sLoggerLevelRef = &sLoggerLevel;
   \                     sLoggerLevelRef:
   \   00000000   0x........         DC32 sLoggerLevel
   \                     sLoggerLevel:
   \   00000004   0x00               DC8 0
     20          

   \                                 In section .text, align 2, keep-with-next
     21          void Logger_setLevel(uint8_t level)
     22          {
     23          	*sLoggerLevelRef = level;
   \                     Logger_setLevel: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x7008             STRB     R0,[R1, #+0]
     24          }
   \   00000006   0x4770             BX       LR               ;; return
     25          

   \                                 In section .text, align 2, keep-with-next
     26          void Logger_setLevelRef(volatile uint8_t * plevel)
     27          {
     28          	if(!plevel) {
   \                     Logger_setLevelRef: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable4
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD102             BNE.N    ??Logger_setLevelRef_0
     29          		sLoggerLevelRef = &sLoggerLevel;
   \   00000006   0x1D08             ADDS     R0,R1,#+4
   \   00000008   0x6008             STR      R0,[R1, #+0]
   \   0000000A   0x4770             BX       LR
     30          	} else {
     31          		sLoggerLevelRef = plevel;
   \                     ??Logger_setLevelRef_0: (+1)
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     32          	}
     33          }
   \   0000000E   0x4770             BX       LR               ;; return
     34          
     35          

   \                                 In section .text, align 2, keep-with-next
     36          void Logger_log(const char *label, unsigned level, const char *msg, unsigned len)
     37          {
   \                     Logger_log: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4614             MOV      R4,R2
   \   00000004   0x461D             MOV      R5,R3
     38          	if(level && level <= *sLoggerLevelRef) {
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD00C             BEQ.N    ??Logger_log_0
   \   0000000A   0x....             LDR.N    R0,??DataTable4
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x4288             CMP      R0,R1
   \   00000012   0xD307             BCC.N    ??Logger_log_0
     39          		unsigned i;
     40          		for(i = 0; i < len; ++i) {
   \   00000014   0x2600             MOVS     R6,#+0
   \   00000016   0xE003             B.N      ??Logger_log_1
     41          			LOGGER_PUTCHARHOOK(msg[i]);
   \                     ??Logger_log_2: (+1)
   \   00000018   0x57A0             LDRSB    R0,[R4, R6]
   \   0000001A   0x.... 0x....      BL       putchar
     42          		}
   \   0000001E   0x1C76             ADDS     R6,R6,#+1
   \                     ??Logger_log_1: (+1)
   \   00000020   0x42AE             CMP      R6,R5
   \   00000022   0xD3F9             BCC.N    ??Logger_log_2
     43          	}
     44          
     45          	(void)label;
     46          }
   \                     ??Logger_log_0: (+1)
   \   00000024   0xBD70             POP      {R4-R6,PC}       ;; return
     47          

   \                                 In section .text, align 2, keep-with-next
     48          void Logger_logf(const char *label, unsigned level, const char *msg, ...)
     49          {
   \                     Logger_logf: (+1)
   \   00000000   0xB408             PUSH     {R3}
   \   00000002   0xB578             PUSH     {R3-R6,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
     50          	if(level && level <= *sLoggerLevelRef) {
   \   0000000A   0x2D00             CMP      R5,#+0
   \   0000000C   0xD02E             BEQ.N    ??Logger_logf_0
   \   0000000E   0x....             LDR.N    R0,??DataTable4
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x42A8             CMP      R0,R5
   \   00000016   0xD329             BCC.N    ??Logger_logf_0
     51          		static const char level_label[LOG_LEVEL_MAX] = {
     52          			'\0', 'P', 'E', 'W', 'N', 'I', 'V', 'D', 'T'
     53          		};
     54          
     55          		if(level < sizeof(level_label)) {
   \   00000018   0x2D09             CMP      R5,#+9
   \   0000001A   0xD20A             BCS.N    ??Logger_logf_1
     56          			LOGGER_PUTCHARHOOK('[');
   \   0000001C   0x205B             MOVS     R0,#+91
   \   0000001E   0x.... 0x....      BL       putchar
     57          			LOGGER_PUTCHARHOOK(level_label[level]);
   \   00000022   0x.... 0x....      ADR.W    R0,`Logger_logf{1}{2}::level_label`
   \   00000026   0x5740             LDRSB    R0,[R0, R5]
   \   00000028   0x.... 0x....      BL       putchar
     58          			LOGGER_PUTCHARHOOK(']');
   \   0000002C   0x205D             MOVS     R0,#+93
   \   0000002E   0x.... 0x....      BL       putchar
     59          		}
     60          
     61          		if(label) {
   \                     ??Logger_logf_1: (+1)
   \   00000032   0x2C00             CMP      R4,#+0
   \   00000034   0xD00B             BEQ.N    ??Logger_logf_2
     62          			const char *pc = label;
   \   00000036   0xE003             B.N      ??Logger_logf_3
     63          			while(*pc != '\0') {
     64          				LOGGER_PUTCHARHOOK(*pc);
   \                     ??Logger_logf_4: (+1)
   \   00000038   0xF914 0x0B01      LDRSB    R0,[R4], #+1
   \   0000003C   0x.... 0x....      BL       putchar
     65          				++pc;
     66          			}
   \                     ??Logger_logf_3: (+1)
   \   00000040   0xF994 0x0000      LDRSB    R0,[R4, #+0]
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD1F7             BNE.N    ??Logger_logf_4
     67          			LOGGER_PUTCHARHOOK(':');
   \   00000048   0x203A             MOVS     R0,#+58
   \   0000004A   0x.... 0x....      BL       putchar
     68          		}
     69          
     70          		LOGGER_PUTCHARHOOK(' ');
   \                     ??Logger_logf_2: (+1)
   \   0000004E   0x2020             MOVS     R0,#+32
   \   00000050   0x.... 0x....      BL       putchar
     71          
     72          		if(msg) {
   \   00000054   0x2E00             CMP      R6,#+0
   \   00000056   0xD003             BEQ.N    ??Logger_logf_5
     73          			va_list ap;
     74          			va_start(ap, msg);
   \   00000058   0xA905             ADD      R1,SP,#+20
     75          			LOGGER_VPRINTFHOOK(msg, ap);
   \   0000005A   0x4630             MOV      R0,R6
   \   0000005C   0x.... 0x....      BL       vprintf
     76          			va_end(ap);
     77          		}
     78          
     79          		LOGGER_PUTCHARHOOK('\r');
   \                     ??Logger_logf_5: (+1)
   \   00000060   0x200D             MOVS     R0,#+13
   \   00000062   0x.... 0x....      BL       putchar
     80          		LOGGER_PUTCHARHOOK('\n');
   \   00000066   0x200A             MOVS     R0,#+10
   \   00000068   0x.... 0x....      BL       putchar
     81          	}
     82          }
   \                     ??Logger_logf_0: (+1)
   \   0000006C   0xBC71             POP      {R0,R4-R6}
   \   0000006E   0xF85D 0xFB08      LDR      PC,[SP], #+8     ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     `Logger_logf{1}{2}::level_label`:
   \   00000000   0x00 0x50          DC8 0, 80, 69, 87, 78, 73, 86, 68, 84, 0, 0, 0
   \              0x45 0x57    
   \              0x4E 0x49    
   \              0x56 0x44    
   \              0x54 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     sLoggerLevelRef
     83          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   Logger_log
        16   -> putchar
      24   Logger_logf
        24   -> putchar
        24   -> vprintf
       0   Logger_setLevel
       0   Logger_setLevelRef


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
      38  Logger_log
     114  Logger_logf
       8  Logger_setLevel
      16  Logger_setLevelRef
      12  level_label
       5  sLoggerLevelRef
          sLoggerLevel

 
   5 bytes in section .data
 192 bytes in section .text
 
 192 bytes of CODE memory
   5 bytes of DATA memory

Errors: none
Warnings: none
