###############################################################################
#
# IAR ANSI C/C++ Compiler V7.70.2.11706/W32 for ARM       22/Dec/2017  10:34:30
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\Invn\EmbUtils\InvBasicMath.c
#    Command line =  
#        C:\Users\prasa\Documents\1.0.0\sources\Invn\EmbUtils\InvBasicMath.c -D
#        IAR_COMPILER -D __inline=inline -D INV_MSG_ENABLE -D ASSERT -D NUCLEO
#        -D USE_STDPERIPH_DRIVER -D USE_HSE_BYPASS -D HSE_VALUE=8000000 -D
#        STM32F411xE -lC
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list
#        --diag_suppress Pa050 -o
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj
#        --no_unroll --no_inline --no_tbaa --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 --silent --warnings_are_errors -e
#        --char_is_signed --fpu=VFPv4_sp --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.5\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../board-hal\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Core\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/CMSIS/Device\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../stm32f4x/STM32F4xx_StdPeriph_Driver/inc\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/Images\
#        -I
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948/../../Invn/DynamicProtocol\
#        -Om --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.5\arm\CMSIS\Include\"
#    Locale       =  English_United States.1252
#    List file    =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\list\InvBasicMath.lst
#    Object file  =  
#        C:\Users\prasa\Documents\1.0.0\sources\examples\example-icm20948\build\example-icm20948\obj\InvBasicMath.o
#
###############################################################################

C:\Users\prasa\Documents\1.0.0\sources\Invn\EmbUtils\InvBasicMath.c
      1          /*
      2              Copyright (c) 2014-2015 InvenSense Inc. Portions Copyright (c) 2014-2015 Movea. All rights reserved.
      3          
      4              This software, related documentation and any modifications thereto (collectively "Software") is subject
      5              to InvenSense and its licensors' intellectual property rights under U.S. and international copyright and
      6              other intellectual property rights laws.
      7          
      8              InvenSense and its licensors retain all intellectual property and proprietary rights in and to the Software
      9              and any use, reproduction, disclosure or distribution of the Software without an express license
     10              agreement from InvenSense is strictly prohibited.
     11          */
     12          
     13          #include "InvBasicMath.h"
     14          
     15          #include <limits.h>
     16          

   \                                 In section .text, align 2, keep-with-next
     17          unsigned int InvBasicMath_log2u(unsigned int val)
     18          {
     19          	unsigned int ret = UINT_MAX;
   \                     InvBasicMath_log2u: (+1)
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0xE001             B.N      ??InvBasicMath_log2u_0
     20          
     21          	while (val != 0) {
     22          		val >>= 1;
   \                     ??InvBasicMath_log2u_1: (+1)
   \   00000006   0x0840             LSRS     R0,R0,#+1
     23          		ret++;
   \   00000008   0x1C49             ADDS     R1,R1,#+1
     24          	}
   \                     ??InvBasicMath_log2u_0: (+1)
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD1FB             BNE.N    ??InvBasicMath_log2u_1
     25          
     26          	return ret;
   \   0000000E   0x4608             MOV      R0,R1
   \   00000010   0x4770             BX       LR               ;; return
     27          }
     28          

   \                                 In section .text, align 2, keep-with-next
     29          int InvBasicMath_isAnOrthonormalMatrix(const float matrix[9])
     30          {
   \                     InvBasicMath_isAnOrthonormalMatrix: (+1)
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0xB092             SUB      SP,SP,#+72
     31          	// Check if matrix is orthogonal
     32          	// Matrix is orthogonal if transpose(Matrix) x Matrix = Identity
     33          
     34          	float transpose[9];
     35          	float mult[9];
     36          	int i, j;
     37          
     38          	// Compute Transpose(matrix)
     39          	for (i = 0; i < 3; i++) {
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x466B             MOV      R3,SP
   \   00000008   0xE00D             B.N      ??InvBasicMath_isAnOrthonormalMatrix_0
     40          		for(j = 0; j < 3; j++) {
     41          			transpose[i*3+j] = matrix[i+j*3];
   \                     ??InvBasicMath_isAnOrthonormalMatrix_1: (+1)
   \   0000000A   0xEB01 0x0441      ADD      R4,R1,R1, LSL #+1
   \   0000000E   0x1914             ADDS     R4,R2,R4
   \   00000010   0xEB02 0x0542      ADD      R5,R2,R2, LSL #+1
   \   00000014   0x186D             ADDS     R5,R5,R1
   \   00000016   0xF850 0x5025      LDR      R5,[R0, R5, LSL #+2]
   \   0000001A   0xF843 0x5024      STR      R5,[R3, R4, LSL #+2]
     42          		}
   \   0000001E   0x1C52             ADDS     R2,R2,#+1
   \                     ??InvBasicMath_isAnOrthonormalMatrix_2: (+1)
   \   00000020   0x2A03             CMP      R2,#+3
   \   00000022   0xDBF2             BLT.N    ??InvBasicMath_isAnOrthonormalMatrix_1
   \   00000024   0x1C49             ADDS     R1,R1,#+1
   \                     ??InvBasicMath_isAnOrthonormalMatrix_0: (+1)
   \   00000026   0x2903             CMP      R1,#+3
   \   00000028   0xDA01             BGE.N    ??InvBasicMath_isAnOrthonormalMatrix_3
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0xE7F8             B.N      ??InvBasicMath_isAnOrthonormalMatrix_2
     43          	}
     44          
     45          	// Mulitply transpose x matrix
     46          	mult[0] = transpose[0]*matrix[0] + transpose[1]*matrix[3] + transpose[2]*matrix[6];
   \                     ??InvBasicMath_isAnOrthonormalMatrix_3: (+1)
   \   0000002E   0xED90 0x0A06      VLDR     S0,[R0, #+24]
   \   00000032   0x4669             MOV      R1,SP
   \   00000034   0xEDD1 0x0A02      VLDR     S1,[R1, #+8]
   \   00000038   0xED90 0x1A03      VLDR     S2,[R0, #+12]
   \   0000003C   0xEDD1 0x1A01      VLDR     S3,[R1, #+4]
   \   00000040   0xED90 0x2A00      VLDR     S4,[R0, #0]
   \   00000044   0xEDDD 0x2A00      VLDR     S5,[SP, #+0]
   \   00000048   0xEE62 0x2A82      VMUL.F32 S5,S5,S4
   \   0000004C   0xEE41 0x2A81      VMLA.F32 S5,S3,S2
   \   00000050   0xEE40 0x2A80      VMLA.F32 S5,S1,S0
   \   00000054   0xEDCD 0x2A09      VSTR     S5,[SP, #+36]
     47          	mult[1] = transpose[0]*matrix[1] + transpose[1]*matrix[4] + transpose[2]*matrix[7];
   \   00000058   0xEDD0 0x2A07      VLDR     S5,[R0, #+28]
   \   0000005C   0xED90 0x3A04      VLDR     S6,[R0, #+16]
   \   00000060   0xEDD0 0x3A01      VLDR     S7,[R0, #+4]
   \   00000064   0xAB09             ADD      R3,SP,#+36
   \   00000066   0xED9D 0x4A00      VLDR     S8,[SP, #+0]
   \   0000006A   0xEE24 0x4A23      VMUL.F32 S8,S8,S7
   \   0000006E   0xEE01 0x4A83      VMLA.F32 S8,S3,S6
   \   00000072   0xEE00 0x4AA2      VMLA.F32 S8,S1,S5
   \   00000076   0xED83 0x4A01      VSTR     S8,[R3, #+4]
     48          	mult[2] = transpose[0]*matrix[2] + transpose[1]*matrix[5] + transpose[2]*matrix[8];
   \   0000007A   0xED90 0x4A08      VLDR     S8,[R0, #+32]
   \   0000007E   0xEDD0 0x4A05      VLDR     S9,[R0, #+20]
   \   00000082   0xED90 0x5A02      VLDR     S10,[R0, #+8]
   \   00000086   0xEDDD 0x5A00      VLDR     S11,[SP, #+0]
   \   0000008A   0xEE65 0x5A85      VMUL.F32 S11,S11,S10
   \   0000008E   0xEE41 0x5AA4      VMLA.F32 S11,S3,S9
   \   00000092   0xEE40 0x5A84      VMLA.F32 S11,S1,S8
   \   00000096   0xEDC3 0x5A02      VSTR     S11,[R3, #+8]
     49          
     50          	mult[3] = transpose[3]*matrix[0] + transpose[4]*matrix[3] + transpose[5]*matrix[6];
   \   0000009A   0xEDD1 0x0A05      VLDR     S1,[R1, #+20]
   \   0000009E   0xEDD1 0x1A04      VLDR     S3,[R1, #+16]
   \   000000A2   0xEDD1 0x5A03      VLDR     S11,[R1, #+12]
   \   000000A6   0xEE25 0x6A82      VMUL.F32 S12,S11,S4
   \   000000AA   0xEE01 0x6A81      VMLA.F32 S12,S3,S2
   \   000000AE   0xEE00 0x6A80      VMLA.F32 S12,S1,S0
   \   000000B2   0xED83 0x6A03      VSTR     S12,[R3, #+12]
     51          	mult[4] = transpose[3]*matrix[1] + transpose[4]*matrix[4] + transpose[5]*matrix[7];
   \   000000B6   0xEE25 0x6AA3      VMUL.F32 S12,S11,S7
   \   000000BA   0xEE01 0x6A83      VMLA.F32 S12,S3,S6
   \   000000BE   0xEE00 0x6AA2      VMLA.F32 S12,S1,S5
   \   000000C2   0xED83 0x6A04      VSTR     S12,[R3, #+16]
     52          	mult[5] = transpose[3]*matrix[2] + transpose[4]*matrix[5] + transpose[5]*matrix[8];
   \   000000C6   0xEE65 0x5A85      VMUL.F32 S11,S11,S10
   \   000000CA   0xEE41 0x5AA4      VMLA.F32 S11,S3,S9
   \   000000CE   0xEE40 0x5A84      VMLA.F32 S11,S1,S8
   \   000000D2   0xEDC3 0x5A05      VSTR     S11,[R3, #+20]
     53          
     54          	mult[6] = transpose[6]*matrix[0] + transpose[7]*matrix[3] + transpose[8]*matrix[6];
   \   000000D6   0xEDD1 0x0A08      VLDR     S1,[R1, #+32]
   \   000000DA   0xEDD1 0x1A07      VLDR     S3,[R1, #+28]
   \   000000DE   0xEDD1 0x5A06      VLDR     S11,[R1, #+24]
   \   000000E2   0xEE25 0x2A82      VMUL.F32 S4,S11,S4
   \   000000E6   0xEE01 0x2A81      VMLA.F32 S4,S3,S2
   \   000000EA   0xEE00 0x2A80      VMLA.F32 S4,S1,S0
   \   000000EE   0xED83 0x2A06      VSTR     S4,[R3, #+24]
     55          	mult[7] = transpose[6]*matrix[1] + transpose[7]*matrix[4] + transpose[8]*matrix[7];
   \   000000F2   0xEE25 0x0AA3      VMUL.F32 S0,S11,S7
   \   000000F6   0xEE01 0x0A83      VMLA.F32 S0,S3,S6
   \   000000FA   0xEE00 0x0AA2      VMLA.F32 S0,S1,S5
   \   000000FE   0xED83 0x0A07      VSTR     S0,[R3, #+28]
     56          	mult[8] = transpose[6]*matrix[2] + transpose[7]*matrix[5] + transpose[8]*matrix[8];
   \   00000102   0xEE25 0x0A85      VMUL.F32 S0,S11,S10
   \   00000106   0xEE01 0x0AA4      VMLA.F32 S0,S3,S9
   \   0000010A   0xEE00 0x0A84      VMLA.F32 S0,S1,S8
   \   0000010E   0xED83 0x0A08      VSTR     S0,[R3, #+32]
     57          
     58          	// Check that mult is identity
     59          	for (i = 0; i < 3; i++) {
   \   00000112   0x2000             MOVS     R0,#+0
   \   00000114   0xE000             B.N      ??InvBasicMath_isAnOrthonormalMatrix_4
   \                     ??InvBasicMath_isAnOrthonormalMatrix_5: (+1)
   \   00000116   0x1C40             ADDS     R0,R0,#+1
   \                     ??InvBasicMath_isAnOrthonormalMatrix_4: (+1)
   \   00000118   0x2803             CMP      R0,#+3
   \   0000011A   0xDA1B             BGE.N    ??InvBasicMath_isAnOrthonormalMatrix_6
     60          		for(j = 0; j < 3; j++) {
   \   0000011C   0x2200             MOVS     R2,#+0
   \   0000011E   0xE007             B.N      ??InvBasicMath_isAnOrthonormalMatrix_7
     61          			if (i == j) {
     62          				if (mult[i+j*3] != 1)
   \                     ??InvBasicMath_isAnOrthonormalMatrix_8: (+1)
   \   00000120   0xEEF7 0x0A00      VMOV.F32 S1,#1.0
   \   00000124   0xEEB4 0x0A60      VCMP.F32 S0,S1
   \   00000128   0xEEF1 0xFA10      FMSTAT   
   \   0000012C   0xD110             BNE.N    ??InvBasicMath_isAnOrthonormalMatrix_9
     63          					return 0;
     64          			}
   \                     ??InvBasicMath_isAnOrthonormalMatrix_10: (+1)
   \   0000012E   0x1C52             ADDS     R2,R2,#+1
   \                     ??InvBasicMath_isAnOrthonormalMatrix_7: (+1)
   \   00000130   0x2A03             CMP      R2,#+3
   \   00000132   0xDAF0             BGE.N    ??InvBasicMath_isAnOrthonormalMatrix_5
   \   00000134   0xEB02 0x0142      ADD      R1,R2,R2, LSL #+1
   \   00000138   0x1809             ADDS     R1,R1,R0
   \   0000013A   0xEB03 0x0181      ADD      R1,R3,R1, LSL #+2
   \   0000013E   0xED91 0x0A00      VLDR     S0,[R1, #0]
   \   00000142   0x4290             CMP      R0,R2
   \   00000144   0xD0EC             BEQ.N    ??InvBasicMath_isAnOrthonormalMatrix_8
     65          			else {
     66          				if (mult[i+j*3] != 0)
   \   00000146   0xEEB5 0x0A40      VCMP.F32 S0,#0.0
   \   0000014A   0xEEF1 0xFA10      FMSTAT   
   \   0000014E   0xD0EE             BEQ.N    ??InvBasicMath_isAnOrthonormalMatrix_10
     67          					return 0;
   \                     ??InvBasicMath_isAnOrthonormalMatrix_9: (+1)
   \   00000150   0x2000             MOVS     R0,#+0
   \   00000152   0xE000             B.N      ??InvBasicMath_isAnOrthonormalMatrix_11
     68          			}
     69          		}
     70          	}
     71          
     72          	return 1;
   \                     ??InvBasicMath_isAnOrthonormalMatrix_6: (+1)
   \   00000154   0x2001             MOVS     R0,#+1
   \                     ??InvBasicMath_isAnOrthonormalMatrix_11: (+1)
   \   00000156   0xB012             ADD      SP,SP,#+72
   \   00000158   0xBC30             POP      {R4,R5}
   \   0000015A   0x4770             BX       LR               ;; return
     73          }
     74          

   \                                 In section .text, align 2, keep-with-next
     75          float InvBasicMath_computeMatrixDeterminant(const float matrix[9])
     76          {
     77          	return matrix[0] * (matrix[4]*matrix[8] - matrix[7]*matrix[5])
     78          	      -matrix[1] * (matrix[3]*matrix[8] - matrix[6]*matrix[5])
     79          	      +matrix[2] * (matrix[3]*matrix[7] - matrix[4]*matrix[6]);
   \                     InvBasicMath_computeMatrixDeterminant: (+1)
   \   00000000   0xEDD0 0x0A03      VLDR     S1,[R0, #+12]
   \   00000004   0xED90 0x1A06      VLDR     S2,[R0, #+24]
   \   00000008   0xEDD0 0x1A05      VLDR     S3,[R0, #+20]
   \   0000000C   0xED90 0x2A07      VLDR     S4,[R0, #+28]
   \   00000010   0xEDD0 0x2A08      VLDR     S5,[R0, #+32]
   \   00000014   0xED90 0x3A04      VLDR     S6,[R0, #+16]
   \   00000018   0xEE23 0x0A22      VMUL.F32 S0,S6,S5
   \   0000001C   0xEE02 0x0A61      VMLS.F32 S0,S4,S3
   \   00000020   0xEDD0 0x3A00      VLDR     S7,[R0, #0]
   \   00000024   0xEE20 0x0A23      VMUL.F32 S0,S0,S7
   \   00000028   0xEE61 0x1A21      VMUL.F32 S3,S2,S3
   \   0000002C   0xEE40 0x1AE2      VMLS.F32 S3,S1,S5
   \   00000030   0xEDD0 0x2A01      VLDR     S5,[R0, #+4]
   \   00000034   0xEE01 0x0AA2      VMLA.F32 S0,S3,S5
   \   00000038   0xEE60 0x0A82      VMUL.F32 S1,S1,S4
   \   0000003C   0xEE43 0x0A41      VMLS.F32 S1,S6,S2
   \   00000040   0xED90 0x1A02      VLDR     S2,[R0, #+8]
   \   00000044   0xEE00 0x0A81      VMLA.F32 S0,S1,S2
   \   00000048   0x4770             BX       LR               ;; return
     80          }
     81          
     82          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   InvBasicMath_computeMatrixDeterminant
      80   InvBasicMath_isAnOrthonormalMatrix
       0   InvBasicMath_log2u


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      74  InvBasicMath_computeMatrixDeterminant
     348  InvBasicMath_isAnOrthonormalMatrix
      18  InvBasicMath_log2u

 
 440 bytes in section .text
 
 440 bytes of CODE memory

Errors: none
Warnings: none
